   1              		.cpu cortex-m4
   2              		.eabi_attribute 20, 1
   3              		.eabi_attribute 21, 1
   4              		.eabi_attribute 23, 3
   5              		.eabi_attribute 24, 1
   6              		.eabi_attribute 25, 1
   7              		.eabi_attribute 26, 1
   8              		.eabi_attribute 30, 6
   9              		.eabi_attribute 34, 1
  10              		.eabi_attribute 18, 4
  11              		.file	"poly.c"
  12              		.text
  13              	.Ltext0:
  14              		.cfi_sections	.debug_frame
  15              		.section	.text.pqcrystals_dilithium2_ref_poly_reduce,"ax",%progbits
  16              		.align	1
  17              		.global	pqcrystals_dilithium2_ref_poly_reduce
  18              		.arch armv7e-m
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu softvfp
  24              	pqcrystals_dilithium2_ref_poly_reduce:
  25              	.LFB0:
  26              		.file 1 "poly.c"
   1:poly.c        **** #include <stdint.h>
   2:poly.c        **** #include "params.h"
   3:poly.c        **** #include "poly.h"
   4:poly.c        **** #include "ntt.h"
   5:poly.c        **** #include "reduce.h"
   6:poly.c        **** #include "rounding.h"
   7:poly.c        **** #include "symmetric.h"
   8:poly.c        **** #include "hal.h"
   9:poly.c        **** #include "simpleserial.h"
  10:poly.c        **** 
  11:poly.c        **** #ifdef DBENCH
  12:poly.c        **** #include "test/cpucycles.h"
  13:poly.c        **** extern const uint64_t timing_overhead;
  14:poly.c        **** extern uint64_t *tred, *tadd, *tmul, *tround, *tsample, *tpack;
  15:poly.c        **** #define DBENCH_START() uint64_t time = cpucycles()
  16:poly.c        **** #define DBENCH_STOP(t) t += cpucycles() - time - timing_overhead
  17:poly.c        **** #else
  18:poly.c        **** #define DBENCH_START()
  19:poly.c        **** #define DBENCH_STOP(t)
  20:poly.c        **** #endif
  21:poly.c        **** 
  22:poly.c        **** /*************************************************
  23:poly.c        **** * Name:        poly_reduce
  24:poly.c        **** *
  25:poly.c        **** * Description: Inplace reduction of all coefficients of polynomial to
  26:poly.c        **** *              representative in [-6283009,6283007].
  27:poly.c        **** *
  28:poly.c        **** * Arguments:   - poly *a: pointer to input/output polynomial
  29:poly.c        **** **************************************************/
  30:poly.c        **** void poly_reduce(poly *a) {
  27              		.loc 1 30 27
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 16
  30              		@ frame_needed = 1, uses_anonymous_args = 0
  31 0000 80B5     		push	{r7, lr}
  32              	.LCFI0:
  33              		.cfi_def_cfa_offset 8
  34              		.cfi_offset 7, -8
  35              		.cfi_offset 14, -4
  36 0002 84B0     		sub	sp, sp, #16
  37              	.LCFI1:
  38              		.cfi_def_cfa_offset 24
  39 0004 00AF     		add	r7, sp, #0
  40              	.LCFI2:
  41              		.cfi_def_cfa_register 7
  42 0006 7860     		str	r0, [r7, #4]
  31:poly.c        ****   unsigned int i;
  32:poly.c        ****   DBENCH_START();
  33:poly.c        **** 
  34:poly.c        ****   for(i = 0; i < N; ++i)
  43              		.loc 1 34 9
  44 0008 0023     		movs	r3, #0
  45 000a FB60     		str	r3, [r7, #12]
  46              		.loc 1 34 3
  47 000c 0EE0     		b	.L2
  48              	.L3:
  35:poly.c        ****     a->coeffs[i] = reduce32(a->coeffs[i]);
  49              		.loc 1 35 20 discriminator 3
  50 000e 7B68     		ldr	r3, [r7, #4]
  51 0010 FA68     		ldr	r2, [r7, #12]
  52 0012 53F82230 		ldr	r3, [r3, r2, lsl #2]
  53 0016 1846     		mov	r0, r3
  54 0018 FFF7FEFF 		bl	pqcrystals_dilithium2_ref_reduce32
  55 001c 0146     		mov	r1, r0
  56              		.loc 1 35 18 discriminator 3
  57 001e 7B68     		ldr	r3, [r7, #4]
  58 0020 FA68     		ldr	r2, [r7, #12]
  59 0022 43F82210 		str	r1, [r3, r2, lsl #2]
  34:poly.c        ****     a->coeffs[i] = reduce32(a->coeffs[i]);
  60              		.loc 1 34 21 discriminator 3
  61 0026 FB68     		ldr	r3, [r7, #12]
  62 0028 0133     		adds	r3, r3, #1
  63 002a FB60     		str	r3, [r7, #12]
  64              	.L2:
  34:poly.c        ****     a->coeffs[i] = reduce32(a->coeffs[i]);
  65              		.loc 1 34 3 discriminator 1
  66 002c FB68     		ldr	r3, [r7, #12]
  67 002e FF2B     		cmp	r3, #255
  68 0030 EDD9     		bls	.L3
  36:poly.c        **** 
  37:poly.c        ****   DBENCH_STOP(*tred);
  38:poly.c        **** }
  69              		.loc 1 38 1
  70 0032 00BF     		nop
  71 0034 00BF     		nop
  72 0036 1037     		adds	r7, r7, #16
  73              	.LCFI3:
  74              		.cfi_def_cfa_offset 8
  75 0038 BD46     		mov	sp, r7
  76              	.LCFI4:
  77              		.cfi_def_cfa_register 13
  78              		@ sp needed
  79 003a 80BD     		pop	{r7, pc}
  80              		.cfi_endproc
  81              	.LFE0:
  83              		.section	.text.pqcrystals_dilithium2_ref_poly_caddq,"ax",%progbits
  84              		.align	1
  85              		.global	pqcrystals_dilithium2_ref_poly_caddq
  86              		.syntax unified
  87              		.thumb
  88              		.thumb_func
  89              		.fpu softvfp
  91              	pqcrystals_dilithium2_ref_poly_caddq:
  92              	.LFB1:
  39:poly.c        **** 
  40:poly.c        **** /*************************************************
  41:poly.c        **** * Name:        poly_caddq
  42:poly.c        **** *
  43:poly.c        **** * Description: For all coefficients of in/out polynomial add Q if
  44:poly.c        **** *              coefficient is negative.
  45:poly.c        **** *
  46:poly.c        **** * Arguments:   - poly *a: pointer to input/output polynomial
  47:poly.c        **** **************************************************/
  48:poly.c        **** void poly_caddq(poly *a) {
  93              		.loc 1 48 26
  94              		.cfi_startproc
  95              		@ args = 0, pretend = 0, frame = 16
  96              		@ frame_needed = 1, uses_anonymous_args = 0
  97 0000 80B5     		push	{r7, lr}
  98              	.LCFI5:
  99              		.cfi_def_cfa_offset 8
 100              		.cfi_offset 7, -8
 101              		.cfi_offset 14, -4
 102 0002 84B0     		sub	sp, sp, #16
 103              	.LCFI6:
 104              		.cfi_def_cfa_offset 24
 105 0004 00AF     		add	r7, sp, #0
 106              	.LCFI7:
 107              		.cfi_def_cfa_register 7
 108 0006 7860     		str	r0, [r7, #4]
  49:poly.c        ****   unsigned int i;
  50:poly.c        ****   DBENCH_START();
  51:poly.c        **** 
  52:poly.c        ****   for(i = 0; i < N; ++i)
 109              		.loc 1 52 9
 110 0008 0023     		movs	r3, #0
 111 000a FB60     		str	r3, [r7, #12]
 112              		.loc 1 52 3
 113 000c 0EE0     		b	.L5
 114              	.L6:
  53:poly.c        ****     a->coeffs[i] = caddq(a->coeffs[i]);
 115              		.loc 1 53 20 discriminator 3
 116 000e 7B68     		ldr	r3, [r7, #4]
 117 0010 FA68     		ldr	r2, [r7, #12]
 118 0012 53F82230 		ldr	r3, [r3, r2, lsl #2]
 119 0016 1846     		mov	r0, r3
 120 0018 FFF7FEFF 		bl	pqcrystals_dilithium2_ref_caddq
 121 001c 0146     		mov	r1, r0
 122              		.loc 1 53 18 discriminator 3
 123 001e 7B68     		ldr	r3, [r7, #4]
 124 0020 FA68     		ldr	r2, [r7, #12]
 125 0022 43F82210 		str	r1, [r3, r2, lsl #2]
  52:poly.c        ****     a->coeffs[i] = caddq(a->coeffs[i]);
 126              		.loc 1 52 21 discriminator 3
 127 0026 FB68     		ldr	r3, [r7, #12]
 128 0028 0133     		adds	r3, r3, #1
 129 002a FB60     		str	r3, [r7, #12]
 130              	.L5:
  52:poly.c        ****     a->coeffs[i] = caddq(a->coeffs[i]);
 131              		.loc 1 52 3 discriminator 1
 132 002c FB68     		ldr	r3, [r7, #12]
 133 002e FF2B     		cmp	r3, #255
 134 0030 EDD9     		bls	.L6
  54:poly.c        **** 
  55:poly.c        ****   DBENCH_STOP(*tred);
  56:poly.c        **** }
 135              		.loc 1 56 1
 136 0032 00BF     		nop
 137 0034 00BF     		nop
 138 0036 1037     		adds	r7, r7, #16
 139              	.LCFI8:
 140              		.cfi_def_cfa_offset 8
 141 0038 BD46     		mov	sp, r7
 142              	.LCFI9:
 143              		.cfi_def_cfa_register 13
 144              		@ sp needed
 145 003a 80BD     		pop	{r7, pc}
 146              		.cfi_endproc
 147              	.LFE1:
 149              		.section	.text.pqcrystals_dilithium2_ref_poly_freeze,"ax",%progbits
 150              		.align	1
 151              		.global	pqcrystals_dilithium2_ref_poly_freeze
 152              		.syntax unified
 153              		.thumb
 154              		.thumb_func
 155              		.fpu softvfp
 157              	pqcrystals_dilithium2_ref_poly_freeze:
 158              	.LFB2:
  57:poly.c        **** 
  58:poly.c        **** /*************************************************
  59:poly.c        **** * Name:        poly_freeze
  60:poly.c        **** *
  61:poly.c        **** * Description: Inplace reduction of all coefficients of polynomial to
  62:poly.c        **** *              standard representatives.
  63:poly.c        **** *
  64:poly.c        **** * Arguments:   - poly *a: pointer to input/output polynomial
  65:poly.c        **** **************************************************/
  66:poly.c        **** void poly_freeze(poly *a) {
 159              		.loc 1 66 27
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 16
 162              		@ frame_needed = 1, uses_anonymous_args = 0
 163 0000 80B5     		push	{r7, lr}
 164              	.LCFI10:
 165              		.cfi_def_cfa_offset 8
 166              		.cfi_offset 7, -8
 167              		.cfi_offset 14, -4
 168 0002 84B0     		sub	sp, sp, #16
 169              	.LCFI11:
 170              		.cfi_def_cfa_offset 24
 171 0004 00AF     		add	r7, sp, #0
 172              	.LCFI12:
 173              		.cfi_def_cfa_register 7
 174 0006 7860     		str	r0, [r7, #4]
  67:poly.c        ****   unsigned int i;
  68:poly.c        ****   DBENCH_START();
  69:poly.c        **** 
  70:poly.c        ****   for(i = 0; i < N; ++i)
 175              		.loc 1 70 9
 176 0008 0023     		movs	r3, #0
 177 000a FB60     		str	r3, [r7, #12]
 178              		.loc 1 70 3
 179 000c 0EE0     		b	.L8
 180              	.L9:
  71:poly.c        ****     a->coeffs[i] = freeze(a->coeffs[i]);
 181              		.loc 1 71 20 discriminator 3
 182 000e 7B68     		ldr	r3, [r7, #4]
 183 0010 FA68     		ldr	r2, [r7, #12]
 184 0012 53F82230 		ldr	r3, [r3, r2, lsl #2]
 185 0016 1846     		mov	r0, r3
 186 0018 FFF7FEFF 		bl	pqcrystals_dilithium2_ref_freeze
 187 001c 0146     		mov	r1, r0
 188              		.loc 1 71 18 discriminator 3
 189 001e 7B68     		ldr	r3, [r7, #4]
 190 0020 FA68     		ldr	r2, [r7, #12]
 191 0022 43F82210 		str	r1, [r3, r2, lsl #2]
  70:poly.c        ****     a->coeffs[i] = freeze(a->coeffs[i]);
 192              		.loc 1 70 21 discriminator 3
 193 0026 FB68     		ldr	r3, [r7, #12]
 194 0028 0133     		adds	r3, r3, #1
 195 002a FB60     		str	r3, [r7, #12]
 196              	.L8:
  70:poly.c        ****     a->coeffs[i] = freeze(a->coeffs[i]);
 197              		.loc 1 70 3 discriminator 1
 198 002c FB68     		ldr	r3, [r7, #12]
 199 002e FF2B     		cmp	r3, #255
 200 0030 EDD9     		bls	.L9
  72:poly.c        **** 
  73:poly.c        ****   DBENCH_STOP(*tred);
  74:poly.c        **** }
 201              		.loc 1 74 1
 202 0032 00BF     		nop
 203 0034 00BF     		nop
 204 0036 1037     		adds	r7, r7, #16
 205              	.LCFI13:
 206              		.cfi_def_cfa_offset 8
 207 0038 BD46     		mov	sp, r7
 208              	.LCFI14:
 209              		.cfi_def_cfa_register 13
 210              		@ sp needed
 211 003a 80BD     		pop	{r7, pc}
 212              		.cfi_endproc
 213              	.LFE2:
 215              		.section	.text.pqcrystals_dilithium2_ref_poly_add,"ax",%progbits
 216              		.align	1
 217              		.global	pqcrystals_dilithium2_ref_poly_add
 218              		.syntax unified
 219              		.thumb
 220              		.thumb_func
 221              		.fpu softvfp
 223              	pqcrystals_dilithium2_ref_poly_add:
 224              	.LFB3:
  75:poly.c        **** 
  76:poly.c        **** /*************************************************
  77:poly.c        **** * Name:        poly_add
  78:poly.c        **** *
  79:poly.c        **** * Description: Add polynomials. No modular reduction is performed.
  80:poly.c        **** *
  81:poly.c        **** * Arguments:   - poly *c: pointer to output polynomial
  82:poly.c        **** *              - const poly *a: pointer to first summand
  83:poly.c        **** *              - const poly *b: pointer to second summand
  84:poly.c        **** **************************************************/
  85:poly.c        **** void poly_add(poly *c, const poly *a, const poly *b)  {
 225              		.loc 1 85 55
 226              		.cfi_startproc
 227              		@ args = 0, pretend = 0, frame = 24
 228              		@ frame_needed = 1, uses_anonymous_args = 0
 229              		@ link register save eliminated.
 230 0000 80B4     		push	{r7}
 231              	.LCFI15:
 232              		.cfi_def_cfa_offset 4
 233              		.cfi_offset 7, -4
 234 0002 87B0     		sub	sp, sp, #28
 235              	.LCFI16:
 236              		.cfi_def_cfa_offset 32
 237 0004 00AF     		add	r7, sp, #0
 238              	.LCFI17:
 239              		.cfi_def_cfa_register 7
 240 0006 F860     		str	r0, [r7, #12]
 241 0008 B960     		str	r1, [r7, #8]
 242 000a 7A60     		str	r2, [r7, #4]
  86:poly.c        ****   unsigned int i;
  87:poly.c        ****   DBENCH_START();
  88:poly.c        **** 
  89:poly.c        ****   for(i = 0; i < N; ++i)
 243              		.loc 1 89 9
 244 000c 0023     		movs	r3, #0
 245 000e 7B61     		str	r3, [r7, #20]
 246              		.loc 1 89 3
 247 0010 0FE0     		b	.L11
 248              	.L12:
  90:poly.c        ****     c->coeffs[i] = a->coeffs[i] + b->coeffs[i];
 249              		.loc 1 90 29 discriminator 3
 250 0012 BB68     		ldr	r3, [r7, #8]
 251 0014 7A69     		ldr	r2, [r7, #20]
 252 0016 53F82220 		ldr	r2, [r3, r2, lsl #2]
 253              		.loc 1 90 44 discriminator 3
 254 001a 7B68     		ldr	r3, [r7, #4]
 255 001c 7969     		ldr	r1, [r7, #20]
 256 001e 53F82130 		ldr	r3, [r3, r1, lsl #2]
 257              		.loc 1 90 33 discriminator 3
 258 0022 D118     		adds	r1, r2, r3
 259              		.loc 1 90 18 discriminator 3
 260 0024 FB68     		ldr	r3, [r7, #12]
 261 0026 7A69     		ldr	r2, [r7, #20]
 262 0028 43F82210 		str	r1, [r3, r2, lsl #2]
  89:poly.c        ****     c->coeffs[i] = a->coeffs[i] + b->coeffs[i];
 263              		.loc 1 89 21 discriminator 3
 264 002c 7B69     		ldr	r3, [r7, #20]
 265 002e 0133     		adds	r3, r3, #1
 266 0030 7B61     		str	r3, [r7, #20]
 267              	.L11:
  89:poly.c        ****     c->coeffs[i] = a->coeffs[i] + b->coeffs[i];
 268              		.loc 1 89 3 discriminator 1
 269 0032 7B69     		ldr	r3, [r7, #20]
 270 0034 FF2B     		cmp	r3, #255
 271 0036 ECD9     		bls	.L12
  91:poly.c        **** 
  92:poly.c        ****   DBENCH_STOP(*tadd);
  93:poly.c        **** }
 272              		.loc 1 93 1
 273 0038 00BF     		nop
 274 003a 00BF     		nop
 275 003c 1C37     		adds	r7, r7, #28
 276              	.LCFI18:
 277              		.cfi_def_cfa_offset 4
 278 003e BD46     		mov	sp, r7
 279              	.LCFI19:
 280              		.cfi_def_cfa_register 13
 281              		@ sp needed
 282 0040 80BC     		pop	{r7}
 283              	.LCFI20:
 284              		.cfi_restore 7
 285              		.cfi_def_cfa_offset 0
 286 0042 7047     		bx	lr
 287              		.cfi_endproc
 288              	.LFE3:
 290              		.section	.text.pqcrystals_dilithium2_ref_poly_sub,"ax",%progbits
 291              		.align	1
 292              		.global	pqcrystals_dilithium2_ref_poly_sub
 293              		.syntax unified
 294              		.thumb
 295              		.thumb_func
 296              		.fpu softvfp
 298              	pqcrystals_dilithium2_ref_poly_sub:
 299              	.LFB4:
  94:poly.c        **** 
  95:poly.c        **** /*************************************************
  96:poly.c        **** * Name:        poly_sub
  97:poly.c        **** *
  98:poly.c        **** * Description: Subtract polynomials. No modular reduction is
  99:poly.c        **** *              performed.
 100:poly.c        **** *
 101:poly.c        **** * Arguments:   - poly *c: pointer to output polynomial
 102:poly.c        **** *              - const poly *a: pointer to first input polynomial
 103:poly.c        **** *              - const poly *b: pointer to second input polynomial to be
 104:poly.c        **** *                               subtraced from first input polynomial
 105:poly.c        **** **************************************************/
 106:poly.c        **** void poly_sub(poly *c, const poly *a, const poly *b) {
 300              		.loc 1 106 54
 301              		.cfi_startproc
 302              		@ args = 0, pretend = 0, frame = 24
 303              		@ frame_needed = 1, uses_anonymous_args = 0
 304              		@ link register save eliminated.
 305 0000 80B4     		push	{r7}
 306              	.LCFI21:
 307              		.cfi_def_cfa_offset 4
 308              		.cfi_offset 7, -4
 309 0002 87B0     		sub	sp, sp, #28
 310              	.LCFI22:
 311              		.cfi_def_cfa_offset 32
 312 0004 00AF     		add	r7, sp, #0
 313              	.LCFI23:
 314              		.cfi_def_cfa_register 7
 315 0006 F860     		str	r0, [r7, #12]
 316 0008 B960     		str	r1, [r7, #8]
 317 000a 7A60     		str	r2, [r7, #4]
 107:poly.c        ****   unsigned int i;
 108:poly.c        ****   DBENCH_START();
 109:poly.c        **** 
 110:poly.c        ****   for(i = 0; i < N; ++i)
 318              		.loc 1 110 9
 319 000c 0023     		movs	r3, #0
 320 000e 7B61     		str	r3, [r7, #20]
 321              		.loc 1 110 3
 322 0010 0FE0     		b	.L14
 323              	.L15:
 111:poly.c        ****     c->coeffs[i] = a->coeffs[i] - b->coeffs[i];
 324              		.loc 1 111 29 discriminator 3
 325 0012 BB68     		ldr	r3, [r7, #8]
 326 0014 7A69     		ldr	r2, [r7, #20]
 327 0016 53F82220 		ldr	r2, [r3, r2, lsl #2]
 328              		.loc 1 111 44 discriminator 3
 329 001a 7B68     		ldr	r3, [r7, #4]
 330 001c 7969     		ldr	r1, [r7, #20]
 331 001e 53F82130 		ldr	r3, [r3, r1, lsl #2]
 332              		.loc 1 111 33 discriminator 3
 333 0022 D11A     		subs	r1, r2, r3
 334              		.loc 1 111 18 discriminator 3
 335 0024 FB68     		ldr	r3, [r7, #12]
 336 0026 7A69     		ldr	r2, [r7, #20]
 337 0028 43F82210 		str	r1, [r3, r2, lsl #2]
 110:poly.c        ****     c->coeffs[i] = a->coeffs[i] - b->coeffs[i];
 338              		.loc 1 110 21 discriminator 3
 339 002c 7B69     		ldr	r3, [r7, #20]
 340 002e 0133     		adds	r3, r3, #1
 341 0030 7B61     		str	r3, [r7, #20]
 342              	.L14:
 110:poly.c        ****     c->coeffs[i] = a->coeffs[i] - b->coeffs[i];
 343              		.loc 1 110 3 discriminator 1
 344 0032 7B69     		ldr	r3, [r7, #20]
 345 0034 FF2B     		cmp	r3, #255
 346 0036 ECD9     		bls	.L15
 112:poly.c        **** 
 113:poly.c        ****   DBENCH_STOP(*tadd);
 114:poly.c        **** }
 347              		.loc 1 114 1
 348 0038 00BF     		nop
 349 003a 00BF     		nop
 350 003c 1C37     		adds	r7, r7, #28
 351              	.LCFI24:
 352              		.cfi_def_cfa_offset 4
 353 003e BD46     		mov	sp, r7
 354              	.LCFI25:
 355              		.cfi_def_cfa_register 13
 356              		@ sp needed
 357 0040 80BC     		pop	{r7}
 358              	.LCFI26:
 359              		.cfi_restore 7
 360              		.cfi_def_cfa_offset 0
 361 0042 7047     		bx	lr
 362              		.cfi_endproc
 363              	.LFE4:
 365              		.section	.text.pqcrystals_dilithium2_ref_poly_shiftl,"ax",%progbits
 366              		.align	1
 367              		.global	pqcrystals_dilithium2_ref_poly_shiftl
 368              		.syntax unified
 369              		.thumb
 370              		.thumb_func
 371              		.fpu softvfp
 373              	pqcrystals_dilithium2_ref_poly_shiftl:
 374              	.LFB5:
 115:poly.c        **** 
 116:poly.c        **** /*************************************************
 117:poly.c        **** * Name:        poly_shiftl
 118:poly.c        **** *
 119:poly.c        **** * Description: Multiply polynomial by 2^D without modular reduction. Assumes
 120:poly.c        **** *              input coefficients to be less than 2^{31-D} in absolute value.
 121:poly.c        **** *
 122:poly.c        **** * Arguments:   - poly *a: pointer to input/output polynomial
 123:poly.c        **** **************************************************/
 124:poly.c        **** void poly_shiftl(poly *a) {
 375              		.loc 1 124 27
 376              		.cfi_startproc
 377              		@ args = 0, pretend = 0, frame = 16
 378              		@ frame_needed = 1, uses_anonymous_args = 0
 379              		@ link register save eliminated.
 380 0000 80B4     		push	{r7}
 381              	.LCFI27:
 382              		.cfi_def_cfa_offset 4
 383              		.cfi_offset 7, -4
 384 0002 85B0     		sub	sp, sp, #20
 385              	.LCFI28:
 386              		.cfi_def_cfa_offset 24
 387 0004 00AF     		add	r7, sp, #0
 388              	.LCFI29:
 389              		.cfi_def_cfa_register 7
 390 0006 7860     		str	r0, [r7, #4]
 125:poly.c        ****   unsigned int i;
 126:poly.c        ****   DBENCH_START();
 127:poly.c        **** 
 128:poly.c        ****   for(i = 0; i < N; ++i)
 391              		.loc 1 128 9
 392 0008 0023     		movs	r3, #0
 393 000a FB60     		str	r3, [r7, #12]
 394              		.loc 1 128 3
 395 000c 0BE0     		b	.L17
 396              	.L18:
 129:poly.c        ****     a->coeffs[i] <<= D;
 397              		.loc 1 129 18 discriminator 3
 398 000e 7B68     		ldr	r3, [r7, #4]
 399 0010 FA68     		ldr	r2, [r7, #12]
 400 0012 53F82230 		ldr	r3, [r3, r2, lsl #2]
 401 0016 5903     		lsls	r1, r3, #13
 402 0018 7B68     		ldr	r3, [r7, #4]
 403 001a FA68     		ldr	r2, [r7, #12]
 404 001c 43F82210 		str	r1, [r3, r2, lsl #2]
 128:poly.c        ****     a->coeffs[i] <<= D;
 405              		.loc 1 128 21 discriminator 3
 406 0020 FB68     		ldr	r3, [r7, #12]
 407 0022 0133     		adds	r3, r3, #1
 408 0024 FB60     		str	r3, [r7, #12]
 409              	.L17:
 128:poly.c        ****     a->coeffs[i] <<= D;
 410              		.loc 1 128 3 discriminator 1
 411 0026 FB68     		ldr	r3, [r7, #12]
 412 0028 FF2B     		cmp	r3, #255
 413 002a F0D9     		bls	.L18
 130:poly.c        **** 
 131:poly.c        ****   DBENCH_STOP(*tmul);
 132:poly.c        **** }
 414              		.loc 1 132 1
 415 002c 00BF     		nop
 416 002e 00BF     		nop
 417 0030 1437     		adds	r7, r7, #20
 418              	.LCFI30:
 419              		.cfi_def_cfa_offset 4
 420 0032 BD46     		mov	sp, r7
 421              	.LCFI31:
 422              		.cfi_def_cfa_register 13
 423              		@ sp needed
 424 0034 80BC     		pop	{r7}
 425              	.LCFI32:
 426              		.cfi_restore 7
 427              		.cfi_def_cfa_offset 0
 428 0036 7047     		bx	lr
 429              		.cfi_endproc
 430              	.LFE5:
 432              		.section	.text.pqcrystals_dilithium2_ref_poly_ntt,"ax",%progbits
 433              		.align	1
 434              		.global	pqcrystals_dilithium2_ref_poly_ntt
 435              		.syntax unified
 436              		.thumb
 437              		.thumb_func
 438              		.fpu softvfp
 440              	pqcrystals_dilithium2_ref_poly_ntt:
 441              	.LFB6:
 133:poly.c        **** 
 134:poly.c        **** /*************************************************
 135:poly.c        **** * Name:        poly_ntt
 136:poly.c        **** *
 137:poly.c        **** * Description: Inplace forward NTT. Coefficients can grow by
 138:poly.c        **** *              8*Q in absolute value.
 139:poly.c        **** *
 140:poly.c        **** * Arguments:   - poly *a: pointer to input/output polynomial
 141:poly.c        **** **************************************************/
 142:poly.c        **** void poly_ntt(poly *a) {
 442              		.loc 1 142 24
 443              		.cfi_startproc
 444              		@ args = 0, pretend = 0, frame = 8
 445              		@ frame_needed = 1, uses_anonymous_args = 0
 446 0000 80B5     		push	{r7, lr}
 447              	.LCFI33:
 448              		.cfi_def_cfa_offset 8
 449              		.cfi_offset 7, -8
 450              		.cfi_offset 14, -4
 451 0002 82B0     		sub	sp, sp, #8
 452              	.LCFI34:
 453              		.cfi_def_cfa_offset 16
 454 0004 00AF     		add	r7, sp, #0
 455              	.LCFI35:
 456              		.cfi_def_cfa_register 7
 457 0006 7860     		str	r0, [r7, #4]
 143:poly.c        ****   DBENCH_START();
 144:poly.c        **** 
 145:poly.c        ****   ntt(a->coeffs);
 458              		.loc 1 145 8
 459 0008 7B68     		ldr	r3, [r7, #4]
 460              		.loc 1 145 3
 461 000a 1846     		mov	r0, r3
 462 000c FFF7FEFF 		bl	pqcrystals_dilithium2_ref_ntt
 146:poly.c        **** 
 147:poly.c        ****   DBENCH_STOP(*tmul);
 148:poly.c        **** }
 463              		.loc 1 148 1
 464 0010 00BF     		nop
 465 0012 0837     		adds	r7, r7, #8
 466              	.LCFI36:
 467              		.cfi_def_cfa_offset 8
 468 0014 BD46     		mov	sp, r7
 469              	.LCFI37:
 470              		.cfi_def_cfa_register 13
 471              		@ sp needed
 472 0016 80BD     		pop	{r7, pc}
 473              		.cfi_endproc
 474              	.LFE6:
 476              		.section	.text.pqcrystals_dilithium2_ref_poly_invntt_tomont,"ax",%progbits
 477              		.align	1
 478              		.global	pqcrystals_dilithium2_ref_poly_invntt_tomont
 479              		.syntax unified
 480              		.thumb
 481              		.thumb_func
 482              		.fpu softvfp
 484              	pqcrystals_dilithium2_ref_poly_invntt_tomont:
 485              	.LFB7:
 149:poly.c        **** 
 150:poly.c        **** /*************************************************
 151:poly.c        **** * Name:        poly_invntt_tomont
 152:poly.c        **** *
 153:poly.c        **** * Description: Inplace inverse NTT and multiplication by 2^{32}.
 154:poly.c        **** *              Input coefficients need to be less than Q in absolute
 155:poly.c        **** *              value and output coefficients are again bounded by Q.
 156:poly.c        **** *
 157:poly.c        **** * Arguments:   - poly *a: pointer to input/output polynomial
 158:poly.c        **** **************************************************/
 159:poly.c        **** void poly_invntt_tomont(poly *a) {
 486              		.loc 1 159 34
 487              		.cfi_startproc
 488              		@ args = 0, pretend = 0, frame = 8
 489              		@ frame_needed = 1, uses_anonymous_args = 0
 490 0000 80B5     		push	{r7, lr}
 491              	.LCFI38:
 492              		.cfi_def_cfa_offset 8
 493              		.cfi_offset 7, -8
 494              		.cfi_offset 14, -4
 495 0002 82B0     		sub	sp, sp, #8
 496              	.LCFI39:
 497              		.cfi_def_cfa_offset 16
 498 0004 00AF     		add	r7, sp, #0
 499              	.LCFI40:
 500              		.cfi_def_cfa_register 7
 501 0006 7860     		str	r0, [r7, #4]
 160:poly.c        ****   DBENCH_START();
 161:poly.c        **** 
 162:poly.c        ****   invntt_tomont(a->coeffs);
 502              		.loc 1 162 18
 503 0008 7B68     		ldr	r3, [r7, #4]
 504              		.loc 1 162 3
 505 000a 1846     		mov	r0, r3
 506 000c FFF7FEFF 		bl	pqcrystals_dilithium2_ref_invntt_tomont
 163:poly.c        **** 
 164:poly.c        ****   DBENCH_STOP(*tmul);
 165:poly.c        **** }
 507              		.loc 1 165 1
 508 0010 00BF     		nop
 509 0012 0837     		adds	r7, r7, #8
 510              	.LCFI41:
 511              		.cfi_def_cfa_offset 8
 512 0014 BD46     		mov	sp, r7
 513              	.LCFI42:
 514              		.cfi_def_cfa_register 13
 515              		@ sp needed
 516 0016 80BD     		pop	{r7, pc}
 517              		.cfi_endproc
 518              	.LFE7:
 520              		.section	.text.pqcrystals_dilithium2_ref_poly_pointwise_montgomery,"ax",%progbits
 521              		.align	1
 522              		.global	pqcrystals_dilithium2_ref_poly_pointwise_montgomery
 523              		.syntax unified
 524              		.thumb
 525              		.thumb_func
 526              		.fpu softvfp
 528              	pqcrystals_dilithium2_ref_poly_pointwise_montgomery:
 529              	.LFB8:
 166:poly.c        **** 
 167:poly.c        **** /*************************************************
 168:poly.c        **** * Name:        poly_pointwise_montgomery
 169:poly.c        **** *
 170:poly.c        **** * Description: Pointwise multiplication of polynomials in NTT domain
 171:poly.c        **** *              representation and multiplication of resulting polynomial
 172:poly.c        **** *              by 2^{-32}.
 173:poly.c        **** *
 174:poly.c        **** * Arguments:   - poly *c: pointer to output polynomial
 175:poly.c        **** *              - const poly *a: pointer to first input polynomial
 176:poly.c        **** *              - const poly *b: pointer to second input polynomial
 177:poly.c        **** **************************************************/
 178:poly.c        **** void poly_pointwise_montgomery(poly *c, const poly *a, const poly *b) {
 530              		.loc 1 178 71
 531              		.cfi_startproc
 532              		@ args = 0, pretend = 0, frame = 24
 533              		@ frame_needed = 1, uses_anonymous_args = 0
 534 0000 2DE9B04F 		push	{r4, r5, r7, r8, r9, r10, fp, lr}
 535              	.LCFI43:
 536              		.cfi_def_cfa_offset 32
 537              		.cfi_offset 4, -32
 538              		.cfi_offset 5, -28
 539              		.cfi_offset 7, -24
 540              		.cfi_offset 8, -20
 541              		.cfi_offset 9, -16
 542              		.cfi_offset 10, -12
 543              		.cfi_offset 11, -8
 544              		.cfi_offset 14, -4
 545 0004 86B0     		sub	sp, sp, #24
 546              	.LCFI44:
 547              		.cfi_def_cfa_offset 56
 548 0006 00AF     		add	r7, sp, #0
 549              	.LCFI45:
 550              		.cfi_def_cfa_register 7
 551 0008 F860     		str	r0, [r7, #12]
 552 000a B960     		str	r1, [r7, #8]
 553 000c 7A60     		str	r2, [r7, #4]
 179:poly.c        ****   unsigned int i;
 180:poly.c        ****   DBENCH_START();
 181:poly.c        **** 
 182:poly.c        ****   for(i = 0; i < N; ++i)
 554              		.loc 1 182 9
 555 000e 0023     		movs	r3, #0
 556 0010 7B61     		str	r3, [r7, #20]
 557              		.loc 1 182 3
 558 0012 22E0     		b	.L22
 559              	.L23:
 183:poly.c        ****     c->coeffs[i] = montgomery_reduce((int64_t)a->coeffs[i] * b->coeffs[i]);
 560              		.loc 1 183 56 discriminator 3
 561 0014 BB68     		ldr	r3, [r7, #8]
 562 0016 7A69     		ldr	r2, [r7, #20]
 563 0018 53F82230 		ldr	r3, [r3, r2, lsl #2]
 564              		.loc 1 183 38 discriminator 3
 565 001c DA17     		asrs	r2, r3, #31
 566 001e 9846     		mov	r8, r3
 567 0020 9146     		mov	r9, r2
 568              		.loc 1 183 71 discriminator 3
 569 0022 7B68     		ldr	r3, [r7, #4]
 570 0024 7A69     		ldr	r2, [r7, #20]
 571 0026 53F82230 		ldr	r3, [r3, r2, lsl #2]
 572 002a DA17     		asrs	r2, r3, #31
 573 002c 9A46     		mov	r10, r3
 574 002e 9346     		mov	fp, r2
 575              		.loc 1 183 20 discriminator 3
 576 0030 0AFB09F2 		mul	r2, r10, r9
 577 0034 08FB0BF3 		mul	r3, r8, fp
 578 0038 1344     		add	r3, r3, r2
 579 003a A8FB0A45 		umull	r4, r5, r8, r10
 580 003e 2B44     		add	r3, r3, r5
 581 0040 1D46     		mov	r5, r3
 582 0042 2046     		mov	r0, r4
 583 0044 2946     		mov	r1, r5
 584 0046 FFF7FEFF 		bl	pqcrystals_dilithium2_ref_montgomery_reduce
 585 004a 0146     		mov	r1, r0
 586              		.loc 1 183 18 discriminator 3
 587 004c FB68     		ldr	r3, [r7, #12]
 588 004e 7A69     		ldr	r2, [r7, #20]
 589 0050 43F82210 		str	r1, [r3, r2, lsl #2]
 182:poly.c        ****     c->coeffs[i] = montgomery_reduce((int64_t)a->coeffs[i] * b->coeffs[i]);
 590              		.loc 1 182 21 discriminator 3
 591 0054 7B69     		ldr	r3, [r7, #20]
 592 0056 0133     		adds	r3, r3, #1
 593 0058 7B61     		str	r3, [r7, #20]
 594              	.L22:
 182:poly.c        ****     c->coeffs[i] = montgomery_reduce((int64_t)a->coeffs[i] * b->coeffs[i]);
 595              		.loc 1 182 3 discriminator 1
 596 005a 7B69     		ldr	r3, [r7, #20]
 597 005c FF2B     		cmp	r3, #255
 598 005e D9D9     		bls	.L23
 184:poly.c        **** 
 185:poly.c        ****   DBENCH_STOP(*tmul);
 186:poly.c        **** }
 599              		.loc 1 186 1
 600 0060 00BF     		nop
 601 0062 00BF     		nop
 602 0064 1837     		adds	r7, r7, #24
 603              	.LCFI46:
 604              		.cfi_def_cfa_offset 32
 605 0066 BD46     		mov	sp, r7
 606              	.LCFI47:
 607              		.cfi_def_cfa_register 13
 608              		@ sp needed
 609 0068 BDE8B08F 		pop	{r4, r5, r7, r8, r9, r10, fp, pc}
 610              		.cfi_endproc
 611              	.LFE8:
 613              		.section	.text.pqcrystals_dilithium2_ref_poly_power2round,"ax",%progbits
 614              		.align	1
 615              		.global	pqcrystals_dilithium2_ref_poly_power2round
 616              		.syntax unified
 617              		.thumb
 618              		.thumb_func
 619              		.fpu softvfp
 621              	pqcrystals_dilithium2_ref_poly_power2round:
 622              	.LFB9:
 187:poly.c        **** 
 188:poly.c        **** /*************************************************
 189:poly.c        **** * Name:        poly_power2round
 190:poly.c        **** *
 191:poly.c        **** * Description: For all coefficients c of the input polynomial,
 192:poly.c        **** *              compute c0, c1 such that c mod Q = c1*2^D + c0
 193:poly.c        **** *              with -2^{D-1} < c0 <= 2^{D-1}. Assumes coefficients to be
 194:poly.c        **** *              standard representatives.
 195:poly.c        **** *
 196:poly.c        **** * Arguments:   - poly *a1: pointer to output polynomial with coefficients c1
 197:poly.c        **** *              - poly *a0: pointer to output polynomial with coefficients c0
 198:poly.c        **** *              - const poly *a: pointer to input polynomial
 199:poly.c        **** **************************************************/
 200:poly.c        **** void poly_power2round(poly *a1, poly *a0, const poly *a) {
 623              		.loc 1 200 58
 624              		.cfi_startproc
 625              		@ args = 0, pretend = 0, frame = 24
 626              		@ frame_needed = 1, uses_anonymous_args = 0
 627 0000 80B5     		push	{r7, lr}
 628              	.LCFI48:
 629              		.cfi_def_cfa_offset 8
 630              		.cfi_offset 7, -8
 631              		.cfi_offset 14, -4
 632 0002 86B0     		sub	sp, sp, #24
 633              	.LCFI49:
 634              		.cfi_def_cfa_offset 32
 635 0004 00AF     		add	r7, sp, #0
 636              	.LCFI50:
 637              		.cfi_def_cfa_register 7
 638 0006 F860     		str	r0, [r7, #12]
 639 0008 B960     		str	r1, [r7, #8]
 640 000a 7A60     		str	r2, [r7, #4]
 201:poly.c        ****   unsigned int i;
 202:poly.c        ****   DBENCH_START();
 203:poly.c        **** 
 204:poly.c        ****   for(i = 0; i < N; ++i)
 641              		.loc 1 204 9
 642 000c 0023     		movs	r3, #0
 643 000e 7B61     		str	r3, [r7, #20]
 644              		.loc 1 204 3
 645 0010 12E0     		b	.L25
 646              	.L26:
 205:poly.c        ****     a1->coeffs[i] = power2round(&a0->coeffs[i], a->coeffs[i]);
 647              		.loc 1 205 21 discriminator 3
 648 0012 7B69     		ldr	r3, [r7, #20]
 649 0014 9B00     		lsls	r3, r3, #2
 650 0016 BA68     		ldr	r2, [r7, #8]
 651 0018 D018     		adds	r0, r2, r3
 652 001a 7B68     		ldr	r3, [r7, #4]
 653 001c 7A69     		ldr	r2, [r7, #20]
 654 001e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 655 0022 1946     		mov	r1, r3
 656 0024 FFF7FEFF 		bl	pqcrystals_dilithium2_ref_power2round
 657 0028 0146     		mov	r1, r0
 658              		.loc 1 205 19 discriminator 3
 659 002a FB68     		ldr	r3, [r7, #12]
 660 002c 7A69     		ldr	r2, [r7, #20]
 661 002e 43F82210 		str	r1, [r3, r2, lsl #2]
 204:poly.c        ****     a1->coeffs[i] = power2round(&a0->coeffs[i], a->coeffs[i]);
 662              		.loc 1 204 21 discriminator 3
 663 0032 7B69     		ldr	r3, [r7, #20]
 664 0034 0133     		adds	r3, r3, #1
 665 0036 7B61     		str	r3, [r7, #20]
 666              	.L25:
 204:poly.c        ****     a1->coeffs[i] = power2round(&a0->coeffs[i], a->coeffs[i]);
 667              		.loc 1 204 3 discriminator 1
 668 0038 7B69     		ldr	r3, [r7, #20]
 669 003a FF2B     		cmp	r3, #255
 670 003c E9D9     		bls	.L26
 206:poly.c        **** 
 207:poly.c        ****   DBENCH_STOP(*tround);
 208:poly.c        **** }
 671              		.loc 1 208 1
 672 003e 00BF     		nop
 673 0040 00BF     		nop
 674 0042 1837     		adds	r7, r7, #24
 675              	.LCFI51:
 676              		.cfi_def_cfa_offset 8
 677 0044 BD46     		mov	sp, r7
 678              	.LCFI52:
 679              		.cfi_def_cfa_register 13
 680              		@ sp needed
 681 0046 80BD     		pop	{r7, pc}
 682              		.cfi_endproc
 683              	.LFE9:
 685              		.section	.text.pqcrystals_dilithium2_ref_poly_decompose,"ax",%progbits
 686              		.align	1
 687              		.global	pqcrystals_dilithium2_ref_poly_decompose
 688              		.syntax unified
 689              		.thumb
 690              		.thumb_func
 691              		.fpu softvfp
 693              	pqcrystals_dilithium2_ref_poly_decompose:
 694              	.LFB10:
 209:poly.c        **** 
 210:poly.c        **** /*************************************************
 211:poly.c        **** * Name:        poly_decompose
 212:poly.c        **** *
 213:poly.c        **** * Description: For all coefficients c of the input polynomial,
 214:poly.c        **** *              compute high and low bits c0, c1 such c mod Q = c1*ALPHA + c0
 215:poly.c        **** *              with -ALPHA/2 < c0 <= ALPHA/2 except c1 = (Q-1)/ALPHA where we
 216:poly.c        **** *              set c1 = 0 and -ALPHA/2 <= c0 = c mod Q - Q < 0.
 217:poly.c        **** *              Assumes coefficients to be standard representatives.
 218:poly.c        **** *
 219:poly.c        **** * Arguments:   - poly *a1: pointer to output polynomial with coefficients c1
 220:poly.c        **** *              - poly *a0: pointer to output polynomial with coefficients c0
 221:poly.c        **** *              - const poly *a: pointer to input polynomial
 222:poly.c        **** **************************************************/
 223:poly.c        **** void poly_decompose(poly *a1, poly *a0, const poly *a) {
 695              		.loc 1 223 56
 696              		.cfi_startproc
 697              		@ args = 0, pretend = 0, frame = 24
 698              		@ frame_needed = 1, uses_anonymous_args = 0
 699 0000 80B5     		push	{r7, lr}
 700              	.LCFI53:
 701              		.cfi_def_cfa_offset 8
 702              		.cfi_offset 7, -8
 703              		.cfi_offset 14, -4
 704 0002 86B0     		sub	sp, sp, #24
 705              	.LCFI54:
 706              		.cfi_def_cfa_offset 32
 707 0004 00AF     		add	r7, sp, #0
 708              	.LCFI55:
 709              		.cfi_def_cfa_register 7
 710 0006 F860     		str	r0, [r7, #12]
 711 0008 B960     		str	r1, [r7, #8]
 712 000a 7A60     		str	r2, [r7, #4]
 224:poly.c        ****   unsigned int i;
 225:poly.c        ****   DBENCH_START();
 226:poly.c        **** 
 227:poly.c        ****   for(i = 0; i < N; ++i)
 713              		.loc 1 227 9
 714 000c 0023     		movs	r3, #0
 715 000e 7B61     		str	r3, [r7, #20]
 716              		.loc 1 227 3
 717 0010 12E0     		b	.L28
 718              	.L29:
 228:poly.c        ****     a1->coeffs[i] = decompose(&a0->coeffs[i], a->coeffs[i]);
 719              		.loc 1 228 21 discriminator 3
 720 0012 7B69     		ldr	r3, [r7, #20]
 721 0014 9B00     		lsls	r3, r3, #2
 722 0016 BA68     		ldr	r2, [r7, #8]
 723 0018 D018     		adds	r0, r2, r3
 724 001a 7B68     		ldr	r3, [r7, #4]
 725 001c 7A69     		ldr	r2, [r7, #20]
 726 001e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 727 0022 1946     		mov	r1, r3
 728 0024 FFF7FEFF 		bl	pqcrystals_dilithium2_ref_decompose
 729 0028 0146     		mov	r1, r0
 730              		.loc 1 228 19 discriminator 3
 731 002a FB68     		ldr	r3, [r7, #12]
 732 002c 7A69     		ldr	r2, [r7, #20]
 733 002e 43F82210 		str	r1, [r3, r2, lsl #2]
 227:poly.c        ****     a1->coeffs[i] = decompose(&a0->coeffs[i], a->coeffs[i]);
 734              		.loc 1 227 21 discriminator 3
 735 0032 7B69     		ldr	r3, [r7, #20]
 736 0034 0133     		adds	r3, r3, #1
 737 0036 7B61     		str	r3, [r7, #20]
 738              	.L28:
 227:poly.c        ****     a1->coeffs[i] = decompose(&a0->coeffs[i], a->coeffs[i]);
 739              		.loc 1 227 3 discriminator 1
 740 0038 7B69     		ldr	r3, [r7, #20]
 741 003a FF2B     		cmp	r3, #255
 742 003c E9D9     		bls	.L29
 229:poly.c        **** 
 230:poly.c        ****   DBENCH_STOP(*tround);
 231:poly.c        **** }
 743              		.loc 1 231 1
 744 003e 00BF     		nop
 745 0040 00BF     		nop
 746 0042 1837     		adds	r7, r7, #24
 747              	.LCFI56:
 748              		.cfi_def_cfa_offset 8
 749 0044 BD46     		mov	sp, r7
 750              	.LCFI57:
 751              		.cfi_def_cfa_register 13
 752              		@ sp needed
 753 0046 80BD     		pop	{r7, pc}
 754              		.cfi_endproc
 755              	.LFE10:
 757              		.section	.text.pqcrystals_dilithium2_ref_poly_make_hint,"ax",%progbits
 758              		.align	1
 759              		.global	pqcrystals_dilithium2_ref_poly_make_hint
 760              		.syntax unified
 761              		.thumb
 762              		.thumb_func
 763              		.fpu softvfp
 765              	pqcrystals_dilithium2_ref_poly_make_hint:
 766              	.LFB11:
 232:poly.c        **** 
 233:poly.c        **** /*************************************************
 234:poly.c        **** * Name:        poly_make_hint
 235:poly.c        **** *
 236:poly.c        **** * Description: Compute hint polynomial. The coefficients of which indicate
 237:poly.c        **** *              whether the low bits of the corresponding coefficient of
 238:poly.c        **** *              the input polynomial overflow into the high bits.
 239:poly.c        **** *
 240:poly.c        **** * Arguments:   - poly *h: pointer to output hint polynomial
 241:poly.c        **** *              - const poly *a0: pointer to low part of input polynomial
 242:poly.c        **** *              - const poly *a1: pointer to high part of input polynomial
 243:poly.c        **** *
 244:poly.c        **** * Returns number of 1 bits.
 245:poly.c        **** **************************************************/
 246:poly.c        **** unsigned int poly_make_hint(poly *h, const poly *a0, const poly *a1) {
 767              		.loc 1 246 70
 768              		.cfi_startproc
 769              		@ args = 0, pretend = 0, frame = 24
 770              		@ frame_needed = 1, uses_anonymous_args = 0
 771 0000 80B5     		push	{r7, lr}
 772              	.LCFI58:
 773              		.cfi_def_cfa_offset 8
 774              		.cfi_offset 7, -8
 775              		.cfi_offset 14, -4
 776 0002 86B0     		sub	sp, sp, #24
 777              	.LCFI59:
 778              		.cfi_def_cfa_offset 32
 779 0004 00AF     		add	r7, sp, #0
 780              	.LCFI60:
 781              		.cfi_def_cfa_register 7
 782 0006 F860     		str	r0, [r7, #12]
 783 0008 B960     		str	r1, [r7, #8]
 784 000a 7A60     		str	r2, [r7, #4]
 247:poly.c        ****   unsigned int i, s = 0;
 785              		.loc 1 247 19
 786 000c 0023     		movs	r3, #0
 787 000e 3B61     		str	r3, [r7, #16]
 248:poly.c        ****   DBENCH_START();
 249:poly.c        **** 
 250:poly.c        ****   for(i = 0; i < N; ++i) {
 788              		.loc 1 250 9
 789 0010 0023     		movs	r3, #0
 790 0012 7B61     		str	r3, [r7, #20]
 791              		.loc 1 250 3
 792 0014 1BE0     		b	.L31
 793              	.L32:
 251:poly.c        ****     h->coeffs[i] = make_hint(a0->coeffs[i], a1->coeffs[i]);
 794              		.loc 1 251 20 discriminator 3
 795 0016 BB68     		ldr	r3, [r7, #8]
 796 0018 7A69     		ldr	r2, [r7, #20]
 797 001a 53F82200 		ldr	r0, [r3, r2, lsl #2]
 798 001e 7B68     		ldr	r3, [r7, #4]
 799 0020 7A69     		ldr	r2, [r7, #20]
 800 0022 53F82230 		ldr	r3, [r3, r2, lsl #2]
 801 0026 1946     		mov	r1, r3
 802 0028 FFF7FEFF 		bl	pqcrystals_dilithium2_ref_make_hint
 803 002c 0346     		mov	r3, r0
 804 002e 1946     		mov	r1, r3
 805              		.loc 1 251 18 discriminator 3
 806 0030 FB68     		ldr	r3, [r7, #12]
 807 0032 7A69     		ldr	r2, [r7, #20]
 808 0034 43F82210 		str	r1, [r3, r2, lsl #2]
 252:poly.c        ****     s += h->coeffs[i];
 809              		.loc 1 252 19 discriminator 3
 810 0038 FB68     		ldr	r3, [r7, #12]
 811 003a 7A69     		ldr	r2, [r7, #20]
 812 003c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 813 0040 1A46     		mov	r2, r3
 814              		.loc 1 252 7 discriminator 3
 815 0042 3B69     		ldr	r3, [r7, #16]
 816 0044 1344     		add	r3, r3, r2
 817 0046 3B61     		str	r3, [r7, #16]
 250:poly.c        ****     h->coeffs[i] = make_hint(a0->coeffs[i], a1->coeffs[i]);
 818              		.loc 1 250 21 discriminator 3
 819 0048 7B69     		ldr	r3, [r7, #20]
 820 004a 0133     		adds	r3, r3, #1
 821 004c 7B61     		str	r3, [r7, #20]
 822              	.L31:
 250:poly.c        ****     h->coeffs[i] = make_hint(a0->coeffs[i], a1->coeffs[i]);
 823              		.loc 1 250 3 discriminator 1
 824 004e 7B69     		ldr	r3, [r7, #20]
 825 0050 FF2B     		cmp	r3, #255
 826 0052 E0D9     		bls	.L32
 253:poly.c        ****   }
 254:poly.c        **** 
 255:poly.c        ****   DBENCH_STOP(*tround);
 256:poly.c        ****   return s;
 827              		.loc 1 256 10
 828 0054 3B69     		ldr	r3, [r7, #16]
 257:poly.c        **** }
 829              		.loc 1 257 1
 830 0056 1846     		mov	r0, r3
 831 0058 1837     		adds	r7, r7, #24
 832              	.LCFI61:
 833              		.cfi_def_cfa_offset 8
 834 005a BD46     		mov	sp, r7
 835              	.LCFI62:
 836              		.cfi_def_cfa_register 13
 837              		@ sp needed
 838 005c 80BD     		pop	{r7, pc}
 839              		.cfi_endproc
 840              	.LFE11:
 842              		.section	.text.pqcrystals_dilithium2_ref_poly_use_hint,"ax",%progbits
 843              		.align	1
 844              		.global	pqcrystals_dilithium2_ref_poly_use_hint
 845              		.syntax unified
 846              		.thumb
 847              		.thumb_func
 848              		.fpu softvfp
 850              	pqcrystals_dilithium2_ref_poly_use_hint:
 851              	.LFB12:
 258:poly.c        **** 
 259:poly.c        **** /*************************************************
 260:poly.c        **** * Name:        poly_use_hint
 261:poly.c        **** *
 262:poly.c        **** * Description: Use hint polynomial to correct the high bits of a polynomial.
 263:poly.c        **** *
 264:poly.c        **** * Arguments:   - poly *b: pointer to output polynomial with corrected high bits
 265:poly.c        **** *              - const poly *a: pointer to input polynomial
 266:poly.c        **** *              - const poly *h: pointer to input hint polynomial
 267:poly.c        **** **************************************************/
 268:poly.c        **** void poly_use_hint(poly *b, const poly *a, const poly *h) {
 852              		.loc 1 268 59
 853              		.cfi_startproc
 854              		@ args = 0, pretend = 0, frame = 24
 855              		@ frame_needed = 1, uses_anonymous_args = 0
 856 0000 80B5     		push	{r7, lr}
 857              	.LCFI63:
 858              		.cfi_def_cfa_offset 8
 859              		.cfi_offset 7, -8
 860              		.cfi_offset 14, -4
 861 0002 86B0     		sub	sp, sp, #24
 862              	.LCFI64:
 863              		.cfi_def_cfa_offset 32
 864 0004 00AF     		add	r7, sp, #0
 865              	.LCFI65:
 866              		.cfi_def_cfa_register 7
 867 0006 F860     		str	r0, [r7, #12]
 868 0008 B960     		str	r1, [r7, #8]
 869 000a 7A60     		str	r2, [r7, #4]
 269:poly.c        ****   unsigned int i;
 270:poly.c        ****   DBENCH_START();
 271:poly.c        **** 
 272:poly.c        ****   for(i = 0; i < N; ++i)
 870              		.loc 1 272 9
 871 000c 0023     		movs	r3, #0
 872 000e 7B61     		str	r3, [r7, #20]
 873              		.loc 1 272 3
 874 0010 12E0     		b	.L35
 875              	.L36:
 273:poly.c        ****     b->coeffs[i] = use_hint(a->coeffs[i], h->coeffs[i]);
 876              		.loc 1 273 20 discriminator 3
 877 0012 BB68     		ldr	r3, [r7, #8]
 878 0014 7A69     		ldr	r2, [r7, #20]
 879 0016 53F82200 		ldr	r0, [r3, r2, lsl #2]
 880              		.loc 1 273 52 discriminator 3
 881 001a 7B68     		ldr	r3, [r7, #4]
 882 001c 7A69     		ldr	r2, [r7, #20]
 883 001e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 884              		.loc 1 273 20 discriminator 3
 885 0022 1946     		mov	r1, r3
 886 0024 FFF7FEFF 		bl	pqcrystals_dilithium2_ref_use_hint
 887 0028 0146     		mov	r1, r0
 888              		.loc 1 273 18 discriminator 3
 889 002a FB68     		ldr	r3, [r7, #12]
 890 002c 7A69     		ldr	r2, [r7, #20]
 891 002e 43F82210 		str	r1, [r3, r2, lsl #2]
 272:poly.c        ****     b->coeffs[i] = use_hint(a->coeffs[i], h->coeffs[i]);
 892              		.loc 1 272 21 discriminator 3
 893 0032 7B69     		ldr	r3, [r7, #20]
 894 0034 0133     		adds	r3, r3, #1
 895 0036 7B61     		str	r3, [r7, #20]
 896              	.L35:
 272:poly.c        ****     b->coeffs[i] = use_hint(a->coeffs[i], h->coeffs[i]);
 897              		.loc 1 272 3 discriminator 1
 898 0038 7B69     		ldr	r3, [r7, #20]
 899 003a FF2B     		cmp	r3, #255
 900 003c E9D9     		bls	.L36
 274:poly.c        **** 
 275:poly.c        ****   DBENCH_STOP(*tround);
 276:poly.c        **** }
 901              		.loc 1 276 1
 902 003e 00BF     		nop
 903 0040 00BF     		nop
 904 0042 1837     		adds	r7, r7, #24
 905              	.LCFI66:
 906              		.cfi_def_cfa_offset 8
 907 0044 BD46     		mov	sp, r7
 908              	.LCFI67:
 909              		.cfi_def_cfa_register 13
 910              		@ sp needed
 911 0046 80BD     		pop	{r7, pc}
 912              		.cfi_endproc
 913              	.LFE12:
 915              		.section	.text.pqcrystals_dilithium2_ref_poly_chknorm,"ax",%progbits
 916              		.align	1
 917              		.global	pqcrystals_dilithium2_ref_poly_chknorm
 918              		.syntax unified
 919              		.thumb
 920              		.thumb_func
 921              		.fpu softvfp
 923              	pqcrystals_dilithium2_ref_poly_chknorm:
 924              	.LFB13:
 277:poly.c        **** 
 278:poly.c        **** /*************************************************
 279:poly.c        **** * Name:        poly_chknorm
 280:poly.c        **** *
 281:poly.c        **** * Description: Check infinity norm of polynomial against given bound.
 282:poly.c        **** *              Assumes input coefficients were reduced by reduce32().
 283:poly.c        **** *
 284:poly.c        **** * Arguments:   - const poly *a: pointer to polynomial
 285:poly.c        **** *              - int32_t B: norm bound
 286:poly.c        **** *
 287:poly.c        **** * Returns 0 if norm is strictly smaller than B <= (Q-1)/8 and 1 otherwise.
 288:poly.c        **** **************************************************/
 289:poly.c        **** int poly_chknorm(const poly *a, int32_t B) {
 925              		.loc 1 289 44
 926              		.cfi_startproc
 927              		@ args = 0, pretend = 0, frame = 16
 928              		@ frame_needed = 1, uses_anonymous_args = 0
 929              		@ link register save eliminated.
 930 0000 80B4     		push	{r7}
 931              	.LCFI68:
 932              		.cfi_def_cfa_offset 4
 933              		.cfi_offset 7, -4
 934 0002 85B0     		sub	sp, sp, #20
 935              	.LCFI69:
 936              		.cfi_def_cfa_offset 24
 937 0004 00AF     		add	r7, sp, #0
 938              	.LCFI70:
 939              		.cfi_def_cfa_register 7
 940 0006 7860     		str	r0, [r7, #4]
 941 0008 3960     		str	r1, [r7]
 290:poly.c        ****   unsigned int i;
 291:poly.c        ****   int32_t t;
 292:poly.c        ****   DBENCH_START();
 293:poly.c        **** 
 294:poly.c        ****   if(B > (Q-1)/8)
 942              		.loc 1 294 5
 943 000a 3B68     		ldr	r3, [r7]
 944 000c 164A     		ldr	r2, .L43
 945 000e 9342     		cmp	r3, r2
 946 0010 01DD     		ble	.L38
 295:poly.c        ****     return 1;
 947              		.loc 1 295 12
 948 0012 0123     		movs	r3, #1
 949 0014 22E0     		b	.L39
 950              	.L38:
 296:poly.c        **** 
 297:poly.c        ****   /* It is ok to leak which coefficient violates the bound since
 298:poly.c        ****      the probability for each coefficient is independent of secret
 299:poly.c        ****      data but we must not leak the sign of the centralized representative. */
 300:poly.c        ****   for(i = 0; i < N; ++i) {
 951              		.loc 1 300 9
 952 0016 0023     		movs	r3, #0
 953 0018 FB60     		str	r3, [r7, #12]
 954              		.loc 1 300 3
 955 001a 1BE0     		b	.L40
 956              	.L42:
 301:poly.c        ****     /* Absolute value */
 302:poly.c        ****     t = a->coeffs[i] >> 31;
 957              		.loc 1 302 18
 958 001c 7B68     		ldr	r3, [r7, #4]
 959 001e FA68     		ldr	r2, [r7, #12]
 960 0020 53F82230 		ldr	r3, [r3, r2, lsl #2]
 961              		.loc 1 302 7
 962 0024 DB17     		asrs	r3, r3, #31
 963 0026 BB60     		str	r3, [r7, #8]
 303:poly.c        ****     t = a->coeffs[i] - (t & 2*a->coeffs[i]);
 964              		.loc 1 303 18
 965 0028 7B68     		ldr	r3, [r7, #4]
 966 002a FA68     		ldr	r2, [r7, #12]
 967 002c 53F82220 		ldr	r2, [r3, r2, lsl #2]
 968              		.loc 1 303 40
 969 0030 7B68     		ldr	r3, [r7, #4]
 970 0032 F968     		ldr	r1, [r7, #12]
 971 0034 53F82130 		ldr	r3, [r3, r1, lsl #2]
 972              		.loc 1 303 30
 973 0038 5900     		lsls	r1, r3, #1
 974              		.loc 1 303 27
 975 003a BB68     		ldr	r3, [r7, #8]
 976 003c 0B40     		ands	r3, r3, r1
 977              		.loc 1 303 7
 978 003e D31A     		subs	r3, r2, r3
 979 0040 BB60     		str	r3, [r7, #8]
 304:poly.c        **** 
 305:poly.c        ****     if(t >= B) {
 980              		.loc 1 305 7
 981 0042 BA68     		ldr	r2, [r7, #8]
 982 0044 3B68     		ldr	r3, [r7]
 983 0046 9A42     		cmp	r2, r3
 984 0048 01DB     		blt	.L41
 306:poly.c        ****       DBENCH_STOP(*tsample);
 307:poly.c        ****       return 1;
 985              		.loc 1 307 14
 986 004a 0123     		movs	r3, #1
 987 004c 06E0     		b	.L39
 988              	.L41:
 300:poly.c        ****     /* Absolute value */
 989              		.loc 1 300 21 discriminator 2
 990 004e FB68     		ldr	r3, [r7, #12]
 991 0050 0133     		adds	r3, r3, #1
 992 0052 FB60     		str	r3, [r7, #12]
 993              	.L40:
 300:poly.c        ****     /* Absolute value */
 994              		.loc 1 300 3 discriminator 1
 995 0054 FB68     		ldr	r3, [r7, #12]
 996 0056 FF2B     		cmp	r3, #255
 997 0058 E0D9     		bls	.L42
 308:poly.c        ****     }
 309:poly.c        ****   }
 310:poly.c        **** 
 311:poly.c        ****   DBENCH_STOP(*tsample);
 312:poly.c        ****   return 0;
 998              		.loc 1 312 10
 999 005a 0023     		movs	r3, #0
 1000              	.L39:
 313:poly.c        **** }
 1001              		.loc 1 313 1
 1002 005c 1846     		mov	r0, r3
 1003 005e 1437     		adds	r7, r7, #20
 1004              	.LCFI71:
 1005              		.cfi_def_cfa_offset 4
 1006 0060 BD46     		mov	sp, r7
 1007              	.LCFI72:
 1008              		.cfi_def_cfa_register 13
 1009              		@ sp needed
 1010 0062 80BC     		pop	{r7}
 1011              	.LCFI73:
 1012              		.cfi_restore 7
 1013              		.cfi_def_cfa_offset 0
 1014 0064 7047     		bx	lr
 1015              	.L44:
 1016 0066 00BF     		.align	2
 1017              	.L43:
 1018 0068 00FC0F00 		.word	1047552
 1019              		.cfi_endproc
 1020              	.LFE13:
 1022              		.section	.text.rej_uniform,"ax",%progbits
 1023              		.align	1
 1024              		.syntax unified
 1025              		.thumb
 1026              		.thumb_func
 1027              		.fpu softvfp
 1029              	rej_uniform:
 1030              	.LFB14:
 314:poly.c        **** 
 315:poly.c        **** /*************************************************
 316:poly.c        **** * Name:        rej_uniform
 317:poly.c        **** *
 318:poly.c        **** * Description: Sample uniformly random coefficients in [0, Q-1] by
 319:poly.c        **** *              performing rejection sampling on array of random bytes.
 320:poly.c        **** *
 321:poly.c        **** * Arguments:   - int32_t *a: pointer to output array (allocated)
 322:poly.c        **** *              - unsigned int len: number of coefficients to be sampled
 323:poly.c        **** *              - const uint8_t *buf: array of random bytes
 324:poly.c        **** *              - unsigned int buflen: length of array of random bytes
 325:poly.c        **** *
 326:poly.c        **** * Returns number of sampled coefficients. Can be smaller than len if not enough
 327:poly.c        **** * random bytes were given.
 328:poly.c        **** **************************************************/
 329:poly.c        **** static unsigned int rej_uniform(int32_t *a,
 330:poly.c        ****                                 unsigned int len,
 331:poly.c        ****                                 const uint8_t *buf,
 332:poly.c        ****                                 unsigned int buflen)
 333:poly.c        **** {
 1031              		.loc 1 333 1
 1032              		.cfi_startproc
 1033              		@ args = 0, pretend = 0, frame = 32
 1034              		@ frame_needed = 1, uses_anonymous_args = 0
 1035              		@ link register save eliminated.
 1036 0000 80B4     		push	{r7}
 1037              	.LCFI74:
 1038              		.cfi_def_cfa_offset 4
 1039              		.cfi_offset 7, -4
 1040 0002 89B0     		sub	sp, sp, #36
 1041              	.LCFI75:
 1042              		.cfi_def_cfa_offset 40
 1043 0004 00AF     		add	r7, sp, #0
 1044              	.LCFI76:
 1045              		.cfi_def_cfa_register 7
 1046 0006 F860     		str	r0, [r7, #12]
 1047 0008 B960     		str	r1, [r7, #8]
 1048 000a 7A60     		str	r2, [r7, #4]
 1049 000c 3B60     		str	r3, [r7]
 334:poly.c        ****   unsigned int ctr, pos;
 335:poly.c        ****   uint32_t t;
 336:poly.c        ****   DBENCH_START();
 337:poly.c        **** 
 338:poly.c        ****   ctr = pos = 0;
 1050              		.loc 1 338 13
 1051 000e 0023     		movs	r3, #0
 1052 0010 BB61     		str	r3, [r7, #24]
 1053              		.loc 1 338 7
 1054 0012 BB69     		ldr	r3, [r7, #24]
 1055 0014 FB61     		str	r3, [r7, #28]
 339:poly.c        ****   while(ctr < len && pos + 3 <= buflen) {
 1056              		.loc 1 339 8
 1057 0016 2AE0     		b	.L46
 1058              	.L48:
 340:poly.c        ****     t  = buf[pos++];
 1059              		.loc 1 340 17
 1060 0018 BB69     		ldr	r3, [r7, #24]
 1061 001a 5A1C     		adds	r2, r3, #1
 1062 001c BA61     		str	r2, [r7, #24]
 1063              		.loc 1 340 13
 1064 001e 7A68     		ldr	r2, [r7, #4]
 1065 0020 1344     		add	r3, r3, r2
 1066 0022 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1067              		.loc 1 340 8
 1068 0024 7B61     		str	r3, [r7, #20]
 341:poly.c        ****     t |= (uint32_t)buf[pos++] << 8;
 1069              		.loc 1 341 27
 1070 0026 BB69     		ldr	r3, [r7, #24]
 1071 0028 5A1C     		adds	r2, r3, #1
 1072 002a BA61     		str	r2, [r7, #24]
 1073              		.loc 1 341 23
 1074 002c 7A68     		ldr	r2, [r7, #4]
 1075 002e 1344     		add	r3, r3, r2
 1076 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1077              		.loc 1 341 31
 1078 0032 1B02     		lsls	r3, r3, #8
 1079              		.loc 1 341 7
 1080 0034 7A69     		ldr	r2, [r7, #20]
 1081 0036 1343     		orrs	r3, r3, r2
 1082 0038 7B61     		str	r3, [r7, #20]
 342:poly.c        ****     t |= (uint32_t)buf[pos++] << 16;
 1083              		.loc 1 342 27
 1084 003a BB69     		ldr	r3, [r7, #24]
 1085 003c 5A1C     		adds	r2, r3, #1
 1086 003e BA61     		str	r2, [r7, #24]
 1087              		.loc 1 342 23
 1088 0040 7A68     		ldr	r2, [r7, #4]
 1089 0042 1344     		add	r3, r3, r2
 1090 0044 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1091              		.loc 1 342 31
 1092 0046 1B04     		lsls	r3, r3, #16
 1093              		.loc 1 342 7
 1094 0048 7A69     		ldr	r2, [r7, #20]
 1095 004a 1343     		orrs	r3, r3, r2
 1096 004c 7B61     		str	r3, [r7, #20]
 343:poly.c        ****     t &= 0x7FFFFF;
 1097              		.loc 1 343 7
 1098 004e 7B69     		ldr	r3, [r7, #20]
 1099 0050 C3F31603 		ubfx	r3, r3, #0, #23
 1100 0054 7B61     		str	r3, [r7, #20]
 344:poly.c        **** 
 345:poly.c        ****     if(t < Q)
 1101              		.loc 1 345 7
 1102 0056 7B69     		ldr	r3, [r7, #20]
 1103 0058 0C4A     		ldr	r2, .L50
 1104 005a 9342     		cmp	r3, r2
 1105 005c 07D8     		bhi	.L46
 346:poly.c        ****       a[ctr++] = t;
 1106              		.loc 1 346 12
 1107 005e FB69     		ldr	r3, [r7, #28]
 1108 0060 5A1C     		adds	r2, r3, #1
 1109 0062 FA61     		str	r2, [r7, #28]
 1110              		.loc 1 346 8
 1111 0064 9B00     		lsls	r3, r3, #2
 1112 0066 FA68     		ldr	r2, [r7, #12]
 1113 0068 1344     		add	r3, r3, r2
 1114              		.loc 1 346 16
 1115 006a 7A69     		ldr	r2, [r7, #20]
 1116 006c 1A60     		str	r2, [r3]
 1117              	.L46:
 339:poly.c        ****     t  = buf[pos++];
 1118              		.loc 1 339 8
 1119 006e FA69     		ldr	r2, [r7, #28]
 1120 0070 BB68     		ldr	r3, [r7, #8]
 1121 0072 9A42     		cmp	r2, r3
 1122 0074 04D2     		bcs	.L47
 339:poly.c        ****     t  = buf[pos++];
 1123              		.loc 1 339 26 discriminator 1
 1124 0076 BB69     		ldr	r3, [r7, #24]
 1125 0078 0333     		adds	r3, r3, #3
 339:poly.c        ****     t  = buf[pos++];
 1126              		.loc 1 339 19 discriminator 1
 1127 007a 3A68     		ldr	r2, [r7]
 1128 007c 9A42     		cmp	r2, r3
 1129 007e CBD2     		bcs	.L48
 1130              	.L47:
 347:poly.c        ****   }
 348:poly.c        **** 
 349:poly.c        ****   DBENCH_STOP(*tsample);
 350:poly.c        ****   return ctr;
 1131              		.loc 1 350 10
 1132 0080 FB69     		ldr	r3, [r7, #28]
 351:poly.c        **** }
 1133              		.loc 1 351 1
 1134 0082 1846     		mov	r0, r3
 1135 0084 2437     		adds	r7, r7, #36
 1136              	.LCFI77:
 1137              		.cfi_def_cfa_offset 4
 1138 0086 BD46     		mov	sp, r7
 1139              	.LCFI78:
 1140              		.cfi_def_cfa_register 13
 1141              		@ sp needed
 1142 0088 80BC     		pop	{r7}
 1143              	.LCFI79:
 1144              		.cfi_restore 7
 1145              		.cfi_def_cfa_offset 0
 1146 008a 7047     		bx	lr
 1147              	.L51:
 1148              		.align	2
 1149              	.L50:
 1150 008c 00E07F00 		.word	8380416
 1151              		.cfi_endproc
 1152              	.LFE14:
 1154              		.section	.text.pqcrystals_dilithium2_ref_poly_uniform,"ax",%progbits
 1155              		.align	1
 1156              		.global	pqcrystals_dilithium2_ref_poly_uniform
 1157              		.syntax unified
 1158              		.thumb
 1159              		.thumb_func
 1160              		.fpu softvfp
 1162              	pqcrystals_dilithium2_ref_poly_uniform:
 1163              	.LFB15:
 352:poly.c        **** 
 353:poly.c        **** /*************************************************
 354:poly.c        **** * Name:        poly_uniform
 355:poly.c        **** *
 356:poly.c        **** * Description: Sample polynomial with uniformly random coefficients
 357:poly.c        **** *              in [0,Q-1] by performing rejection sampling on the
 358:poly.c        **** *              output stream of SHAKE256(seed|nonce) or AES256CTR(seed,nonce).
 359:poly.c        **** *
 360:poly.c        **** * Arguments:   - poly *a: pointer to output polynomial
 361:poly.c        **** *              - const uint8_t seed[]: byte array with seed of length SEEDBYTES
 362:poly.c        **** *              - uint16_t nonce: 2-byte nonce
 363:poly.c        **** **************************************************/
 364:poly.c        **** #define POLY_UNIFORM_NBLOCKS ((768 + STREAM128_BLOCKBYTES - 1)/STREAM128_BLOCKBYTES)
 365:poly.c        **** void poly_uniform(poly *a,
 366:poly.c        ****                   const uint8_t seed[SEEDBYTES],
 367:poly.c        ****                   uint16_t nonce)
 368:poly.c        **** {
 1164              		.loc 1 368 1
 1165              		.cfi_startproc
 1166              		@ args = 0, pretend = 0, frame = 1088
 1167              		@ frame_needed = 1, uses_anonymous_args = 0
 1168 0000 80B5     		push	{r7, lr}
 1169              	.LCFI80:
 1170              		.cfi_def_cfa_offset 8
 1171              		.cfi_offset 7, -8
 1172              		.cfi_offset 14, -4
 1173 0002 ADF5886D 		sub	sp, sp, #1088
 1174              	.LCFI81:
 1175              		.cfi_def_cfa_offset 1096
 1176 0006 00AF     		add	r7, sp, #0
 1177              	.LCFI82:
 1178              		.cfi_def_cfa_register 7
 1179 0008 07F58863 		add	r3, r7, #1088
 1180 000c A3F23443 		subw	r3, r3, #1076
 1181 0010 1860     		str	r0, [r3]
 1182 0012 07F58863 		add	r3, r7, #1088
 1183 0016 A3F58763 		sub	r3, r3, #1080
 1184 001a 1960     		str	r1, [r3]
 1185 001c 07F58863 		add	r3, r7, #1088
 1186 0020 A3F23A43 		subw	r3, r3, #1082
 1187 0024 1A80     		strh	r2, [r3]	@ movhi
 369:poly.c        ****   unsigned int i, ctr, off;
 370:poly.c        ****   unsigned int buflen = POLY_UNIFORM_NBLOCKS*STREAM128_BLOCKBYTES;
 1188              		.loc 1 370 16
 1189 0026 4FF45273 		mov	r3, #840
 1190 002a C7F83434 		str	r3, [r7, #1076]
 371:poly.c        ****   uint8_t buf[POLY_UNIFORM_NBLOCKS*STREAM128_BLOCKBYTES + 2];
 372:poly.c        ****   stream128_state state;
 373:poly.c        **** 
 374:poly.c        ****   stream128_init(&state, seed, nonce);
 1191              		.loc 1 374 3
 1192 002e 07F58863 		add	r3, r7, #1088
 1193 0032 A3F23A43 		subw	r3, r3, #1082
 1194 0036 1A88     		ldrh	r2, [r3]
 1195 0038 07F58863 		add	r3, r7, #1088
 1196 003c A3F58763 		sub	r3, r3, #1080
 1197 0040 07F11000 		add	r0, r7, #16
 1198 0044 1968     		ldr	r1, [r3]
 1199 0046 FFF7FEFF 		bl	pqcrystals_dilithium2_ref_dilithium_shake128_stream_init
 375:poly.c        ****   stream128_squeezeblocks(buf, POLY_UNIFORM_NBLOCKS, &state);
 1200              		.loc 1 375 3
 1201 004a 07F11002 		add	r2, r7, #16
 1202 004e 07F1E403 		add	r3, r7, #228
 1203 0052 0521     		movs	r1, #5
 1204 0054 1846     		mov	r0, r3
 1205 0056 FFF7FEFF 		bl	pqcrystals_fips202_ref_shake128_squeezeblocks
 376:poly.c        **** 
 377:poly.c        ****   ctr = rej_uniform(a->coeffs, N, buf, buflen);
 1206              		.loc 1 377 22
 1207 005a 07F58863 		add	r3, r7, #1088
 1208 005e A3F23443 		subw	r3, r3, #1076
 1209 0062 1868     		ldr	r0, [r3]
 1210              		.loc 1 377 9
 1211 0064 07F1E402 		add	r2, r7, #228
 1212 0068 D7F83434 		ldr	r3, [r7, #1076]
 1213 006c 4FF48071 		mov	r1, #256
 1214 0070 FFF7FEFF 		bl	rej_uniform
 1215 0074 C7F83804 		str	r0, [r7, #1080]
 378:poly.c        **** 
 379:poly.c        ****   while(ctr < N) {
 1216              		.loc 1 379 8
 1217 0078 59E0     		b	.L53
 1218              	.L56:
 380:poly.c        ****     off = buflen % 3;
 1219              		.loc 1 380 9
 1220 007a D7F83424 		ldr	r2, [r7, #1076]
 1221 007e 314B     		ldr	r3, .L57
 1222 0080 A3FB0213 		umull	r1, r3, r3, r2
 1223 0084 5908     		lsrs	r1, r3, #1
 1224 0086 0B46     		mov	r3, r1
 1225 0088 5B00     		lsls	r3, r3, #1
 1226 008a 0B44     		add	r3, r3, r1
 1227 008c D31A     		subs	r3, r2, r3
 1228 008e C7F83034 		str	r3, [r7, #1072]
 381:poly.c        ****     for(i = 0; i < off; ++i)
 1229              		.loc 1 381 11
 1230 0092 0023     		movs	r3, #0
 1231 0094 C7F83C34 		str	r3, [r7, #1084]
 1232              		.loc 1 381 5
 1233 0098 1AE0     		b	.L54
 1234              	.L55:
 382:poly.c        ****       buf[i] = buf[buflen - off + i];
 1235              		.loc 1 382 27 discriminator 3
 1236 009a D7F83424 		ldr	r2, [r7, #1076]
 1237 009e D7F83034 		ldr	r3, [r7, #1072]
 1238 00a2 D21A     		subs	r2, r2, r3
 1239              		.loc 1 382 33 discriminator 3
 1240 00a4 D7F83C34 		ldr	r3, [r7, #1084]
 1241 00a8 1344     		add	r3, r3, r2
 1242              		.loc 1 382 19 discriminator 3
 1243 00aa 07F58862 		add	r2, r7, #1088
 1244 00ae A2F55772 		sub	r2, r2, #860
 1245 00b2 D15C     		ldrb	r1, [r2, r3]	@ zero_extendqisi2
 1246              		.loc 1 382 14 discriminator 3
 1247 00b4 07F58863 		add	r3, r7, #1088
 1248 00b8 A3F55772 		sub	r2, r3, #860
 1249 00bc D7F83C34 		ldr	r3, [r7, #1084]
 1250 00c0 1344     		add	r3, r3, r2
 1251 00c2 0A46     		mov	r2, r1
 1252 00c4 1A70     		strb	r2, [r3]
 381:poly.c        ****     for(i = 0; i < off; ++i)
 1253              		.loc 1 381 25 discriminator 3
 1254 00c6 D7F83C34 		ldr	r3, [r7, #1084]
 1255 00ca 0133     		adds	r3, r3, #1
 1256 00cc C7F83C34 		str	r3, [r7, #1084]
 1257              	.L54:
 381:poly.c        ****     for(i = 0; i < off; ++i)
 1258              		.loc 1 381 5 discriminator 1
 1259 00d0 D7F83C24 		ldr	r2, [r7, #1084]
 1260 00d4 D7F83034 		ldr	r3, [r7, #1072]
 1261 00d8 9A42     		cmp	r2, r3
 1262 00da DED3     		bcc	.L55
 383:poly.c        **** 
 384:poly.c        ****     stream128_squeezeblocks(buf + off, 1, &state);
 1263              		.loc 1 384 5
 1264 00dc 07F1E402 		add	r2, r7, #228
 1265 00e0 D7F83034 		ldr	r3, [r7, #1072]
 1266 00e4 1344     		add	r3, r3, r2
 1267 00e6 07F11002 		add	r2, r7, #16
 1268 00ea 0121     		movs	r1, #1
 1269 00ec 1846     		mov	r0, r3
 1270 00ee FFF7FEFF 		bl	pqcrystals_fips202_ref_shake128_squeezeblocks
 385:poly.c        ****     buflen = STREAM128_BLOCKBYTES + off;
 1271              		.loc 1 385 12
 1272 00f2 D7F83034 		ldr	r3, [r7, #1072]
 1273 00f6 A833     		adds	r3, r3, #168
 1274 00f8 C7F83434 		str	r3, [r7, #1076]
 386:poly.c        ****     ctr += rej_uniform(a->coeffs + ctr, N - ctr, buf, buflen);
 1275              		.loc 1 386 24
 1276 00fc 07F58863 		add	r3, r7, #1088
 1277 0100 A3F23443 		subw	r3, r3, #1076
 1278 0104 1A68     		ldr	r2, [r3]
 1279              		.loc 1 386 34
 1280 0106 D7F83834 		ldr	r3, [r7, #1080]
 1281 010a 9B00     		lsls	r3, r3, #2
 1282              		.loc 1 386 12
 1283 010c D018     		adds	r0, r2, r3
 1284 010e D7F83834 		ldr	r3, [r7, #1080]
 1285 0112 C3F58071 		rsb	r1, r3, #256
 1286 0116 07F1E402 		add	r2, r7, #228
 1287 011a D7F83434 		ldr	r3, [r7, #1076]
 1288 011e FFF7FEFF 		bl	rej_uniform
 1289 0122 0246     		mov	r2, r0
 1290              		.loc 1 386 9
 1291 0124 D7F83834 		ldr	r3, [r7, #1080]
 1292 0128 1344     		add	r3, r3, r2
 1293 012a C7F83834 		str	r3, [r7, #1080]
 1294              	.L53:
 379:poly.c        ****     off = buflen % 3;
 1295              		.loc 1 379 8
 1296 012e D7F83834 		ldr	r3, [r7, #1080]
 1297 0132 FF2B     		cmp	r3, #255
 1298 0134 A1D9     		bls	.L56
 387:poly.c        ****   }
 388:poly.c        **** }
 1299              		.loc 1 388 1
 1300 0136 00BF     		nop
 1301 0138 00BF     		nop
 1302 013a 07F58867 		add	r7, r7, #1088
 1303              	.LCFI83:
 1304              		.cfi_def_cfa_offset 8
 1305 013e BD46     		mov	sp, r7
 1306              	.LCFI84:
 1307              		.cfi_def_cfa_register 13
 1308              		@ sp needed
 1309 0140 80BD     		pop	{r7, pc}
 1310              	.L58:
 1311 0142 00BF     		.align	2
 1312              	.L57:
 1313 0144 ABAAAAAA 		.word	-1431655765
 1314              		.cfi_endproc
 1315              	.LFE15:
 1317              		.section	.text.rej_eta,"ax",%progbits
 1318              		.align	1
 1319              		.syntax unified
 1320              		.thumb
 1321              		.thumb_func
 1322              		.fpu softvfp
 1324              	rej_eta:
 1325              	.LFB16:
 389:poly.c        **** 
 390:poly.c        **** /*************************************************
 391:poly.c        **** * Name:        rej_eta
 392:poly.c        **** *
 393:poly.c        **** * Description: Sample uniformly random coefficients in [-ETA, ETA] by
 394:poly.c        **** *              performing rejection sampling on array of random bytes.
 395:poly.c        **** *
 396:poly.c        **** * Arguments:   - int32_t *a: pointer to output array (allocated)
 397:poly.c        **** *              - unsigned int len: number of coefficients to be sampled
 398:poly.c        **** *              - const uint8_t *buf: array of random bytes
 399:poly.c        **** *              - unsigned int buflen: length of array of random bytes
 400:poly.c        **** *
 401:poly.c        **** * Returns number of sampled coefficients. Can be smaller than len if not enough
 402:poly.c        **** * random bytes were given.
 403:poly.c        **** **************************************************/
 404:poly.c        **** static unsigned int rej_eta(int32_t *a,
 405:poly.c        ****                             unsigned int len,
 406:poly.c        ****                             const uint8_t *buf,
 407:poly.c        ****                             unsigned int buflen)
 408:poly.c        **** {
 1326              		.loc 1 408 1
 1327              		.cfi_startproc
 1328              		@ args = 0, pretend = 0, frame = 32
 1329              		@ frame_needed = 1, uses_anonymous_args = 0
 1330              		@ link register save eliminated.
 1331 0000 80B4     		push	{r7}
 1332              	.LCFI85:
 1333              		.cfi_def_cfa_offset 4
 1334              		.cfi_offset 7, -4
 1335 0002 89B0     		sub	sp, sp, #36
 1336              	.LCFI86:
 1337              		.cfi_def_cfa_offset 40
 1338 0004 00AF     		add	r7, sp, #0
 1339              	.LCFI87:
 1340              		.cfi_def_cfa_register 7
 1341 0006 F860     		str	r0, [r7, #12]
 1342 0008 B960     		str	r1, [r7, #8]
 1343 000a 7A60     		str	r2, [r7, #4]
 1344 000c 3B60     		str	r3, [r7]
 409:poly.c        ****   unsigned int ctr, pos;
 410:poly.c        ****   uint32_t t0, t1;
 411:poly.c        ****   DBENCH_START();
 412:poly.c        **** 
 413:poly.c        ****   ctr = pos = 0;
 1345              		.loc 1 413 13
 1346 000e 0023     		movs	r3, #0
 1347 0010 BB61     		str	r3, [r7, #24]
 1348              		.loc 1 413 7
 1349 0012 BB69     		ldr	r3, [r7, #24]
 1350 0014 FB61     		str	r3, [r7, #28]
 414:poly.c        ****   while(ctr < len && pos < buflen) {
 1351              		.loc 1 414 8
 1352 0016 45E0     		b	.L60
 1353              	.L63:
 415:poly.c        ****     t0 = buf[pos] & 0x0F;
 1354              		.loc 1 415 13
 1355 0018 7A68     		ldr	r2, [r7, #4]
 1356 001a BB69     		ldr	r3, [r7, #24]
 1357 001c 1344     		add	r3, r3, r2
 1358 001e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1359              		.loc 1 415 8
 1360 0020 03F00F03 		and	r3, r3, #15
 1361 0024 7B61     		str	r3, [r7, #20]
 416:poly.c        ****     t1 = buf[pos++] >> 4;
 1362              		.loc 1 416 17
 1363 0026 BB69     		ldr	r3, [r7, #24]
 1364 0028 5A1C     		adds	r2, r3, #1
 1365 002a BA61     		str	r2, [r7, #24]
 1366              		.loc 1 416 13
 1367 002c 7A68     		ldr	r2, [r7, #4]
 1368 002e 1344     		add	r3, r3, r2
 1369 0030 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1370              		.loc 1 416 21
 1371 0032 1B09     		lsrs	r3, r3, #4
 1372 0034 DBB2     		uxtb	r3, r3
 1373              		.loc 1 416 8
 1374 0036 3B61     		str	r3, [r7, #16]
 417:poly.c        **** 
 418:poly.c        **** #if ETA == 2
 419:poly.c        ****     if(t0 < 15) {
 1375              		.loc 1 419 7
 1376 0038 7B69     		ldr	r3, [r7, #20]
 1377 003a 0E2B     		cmp	r3, #14
 1378 003c 15D8     		bhi	.L61
 420:poly.c        ****       t0 = t0 - (205*t0 >> 10)*5;
 1379              		.loc 1 420 21
 1380 003e 7B69     		ldr	r3, [r7, #20]
 1381 0040 CD22     		movs	r2, #205
 1382 0042 02FB03F3 		mul	r3, r2, r3
 1383              		.loc 1 420 25
 1384 0046 9A0A     		lsrs	r2, r3, #10
 1385              		.loc 1 420 31
 1386 0048 1346     		mov	r3, r2
 1387 004a 9B00     		lsls	r3, r3, #2
 1388 004c 1344     		add	r3, r3, r2
 1389              		.loc 1 420 10
 1390 004e 7A69     		ldr	r2, [r7, #20]
 1391 0050 D31A     		subs	r3, r2, r3
 1392 0052 7B61     		str	r3, [r7, #20]
 421:poly.c        ****       a[ctr++] = 2 - t0;
 1393              		.loc 1 421 20
 1394 0054 7B69     		ldr	r3, [r7, #20]
 1395 0056 C3F10201 		rsb	r1, r3, #2
 1396              		.loc 1 421 12
 1397 005a FB69     		ldr	r3, [r7, #28]
 1398 005c 5A1C     		adds	r2, r3, #1
 1399 005e FA61     		str	r2, [r7, #28]
 1400              		.loc 1 421 8
 1401 0060 9B00     		lsls	r3, r3, #2
 1402 0062 FA68     		ldr	r2, [r7, #12]
 1403 0064 1344     		add	r3, r3, r2
 1404              		.loc 1 421 20
 1405 0066 0A46     		mov	r2, r1
 1406              		.loc 1 421 16
 1407 0068 1A60     		str	r2, [r3]
 1408              	.L61:
 422:poly.c        ****     }
 423:poly.c        ****     if(t1 < 15 && ctr < len) {
 1409              		.loc 1 423 7
 1410 006a 3B69     		ldr	r3, [r7, #16]
 1411 006c 0E2B     		cmp	r3, #14
 1412 006e 19D8     		bhi	.L60
 1413              		.loc 1 423 16 discriminator 1
 1414 0070 FA69     		ldr	r2, [r7, #28]
 1415 0072 BB68     		ldr	r3, [r7, #8]
 1416 0074 9A42     		cmp	r2, r3
 1417 0076 15D2     		bcs	.L60
 424:poly.c        ****       t1 = t1 - (205*t1 >> 10)*5;
 1418              		.loc 1 424 21
 1419 0078 3B69     		ldr	r3, [r7, #16]
 1420 007a CD22     		movs	r2, #205
 1421 007c 02FB03F3 		mul	r3, r2, r3
 1422              		.loc 1 424 25
 1423 0080 9A0A     		lsrs	r2, r3, #10
 1424              		.loc 1 424 31
 1425 0082 1346     		mov	r3, r2
 1426 0084 9B00     		lsls	r3, r3, #2
 1427 0086 1344     		add	r3, r3, r2
 1428              		.loc 1 424 10
 1429 0088 3A69     		ldr	r2, [r7, #16]
 1430 008a D31A     		subs	r3, r2, r3
 1431 008c 3B61     		str	r3, [r7, #16]
 425:poly.c        ****       a[ctr++] = 2 - t1;
 1432              		.loc 1 425 20
 1433 008e 3B69     		ldr	r3, [r7, #16]
 1434 0090 C3F10201 		rsb	r1, r3, #2
 1435              		.loc 1 425 12
 1436 0094 FB69     		ldr	r3, [r7, #28]
 1437 0096 5A1C     		adds	r2, r3, #1
 1438 0098 FA61     		str	r2, [r7, #28]
 1439              		.loc 1 425 8
 1440 009a 9B00     		lsls	r3, r3, #2
 1441 009c FA68     		ldr	r2, [r7, #12]
 1442 009e 1344     		add	r3, r3, r2
 1443              		.loc 1 425 20
 1444 00a0 0A46     		mov	r2, r1
 1445              		.loc 1 425 16
 1446 00a2 1A60     		str	r2, [r3]
 1447              	.L60:
 414:poly.c        ****     t0 = buf[pos] & 0x0F;
 1448              		.loc 1 414 8
 1449 00a4 FA69     		ldr	r2, [r7, #28]
 1450 00a6 BB68     		ldr	r3, [r7, #8]
 1451 00a8 9A42     		cmp	r2, r3
 1452 00aa 03D2     		bcs	.L62
 414:poly.c        ****     t0 = buf[pos] & 0x0F;
 1453              		.loc 1 414 19 discriminator 1
 1454 00ac BA69     		ldr	r2, [r7, #24]
 1455 00ae 3B68     		ldr	r3, [r7]
 1456 00b0 9A42     		cmp	r2, r3
 1457 00b2 B1D3     		bcc	.L63
 1458              	.L62:
 426:poly.c        ****     }
 427:poly.c        **** #elif ETA == 4
 428:poly.c        ****     if(t0 < 9)
 429:poly.c        ****       a[ctr++] = 4 - t0;
 430:poly.c        ****     if(t1 < 9 && ctr < len)
 431:poly.c        ****       a[ctr++] = 4 - t1;
 432:poly.c        **** #endif
 433:poly.c        ****   }
 434:poly.c        **** 
 435:poly.c        ****   DBENCH_STOP(*tsample);
 436:poly.c        ****   return ctr;
 1459              		.loc 1 436 10
 1460 00b4 FB69     		ldr	r3, [r7, #28]
 437:poly.c        **** }
 1461              		.loc 1 437 1
 1462 00b6 1846     		mov	r0, r3
 1463 00b8 2437     		adds	r7, r7, #36
 1464              	.LCFI88:
 1465              		.cfi_def_cfa_offset 4
 1466 00ba BD46     		mov	sp, r7
 1467              	.LCFI89:
 1468              		.cfi_def_cfa_register 13
 1469              		@ sp needed
 1470 00bc 80BC     		pop	{r7}
 1471              	.LCFI90:
 1472              		.cfi_restore 7
 1473              		.cfi_def_cfa_offset 0
 1474 00be 7047     		bx	lr
 1475              		.cfi_endproc
 1476              	.LFE16:
 1478              		.section	.text.pqcrystals_dilithium2_ref_poly_uniform_eta,"ax",%progbits
 1479              		.align	1
 1480              		.global	pqcrystals_dilithium2_ref_poly_uniform_eta
 1481              		.syntax unified
 1482              		.thumb
 1483              		.thumb_func
 1484              		.fpu softvfp
 1486              	pqcrystals_dilithium2_ref_poly_uniform_eta:
 1487              	.LFB17:
 438:poly.c        **** 
 439:poly.c        **** /*************************************************
 440:poly.c        **** * Name:        poly_uniform_eta
 441:poly.c        **** *
 442:poly.c        **** * Description: Sample polynomial with uniformly random coefficients
 443:poly.c        **** *              in [-ETA,ETA] by performing rejection sampling on the
 444:poly.c        **** *              output stream from SHAKE256(seed|nonce) or AES256CTR(seed,nonce).
 445:poly.c        **** *
 446:poly.c        **** * Arguments:   - poly *a: pointer to output polynomial
 447:poly.c        **** *              - const uint8_t seed[]: byte array with seed of length SEEDBYTES
 448:poly.c        **** *              - uint16_t nonce: 2-byte nonce
 449:poly.c        **** **************************************************/
 450:poly.c        **** #if ETA == 2
 451:poly.c        **** #define POLY_UNIFORM_ETA_NBLOCKS ((136 + STREAM128_BLOCKBYTES - 1)/STREAM128_BLOCKBYTES)
 452:poly.c        **** #elif ETA == 4
 453:poly.c        **** #define POLY_UNIFORM_ETA_NBLOCKS ((227 + STREAM128_BLOCKBYTES - 1)/STREAM128_BLOCKBYTES)
 454:poly.c        **** #endif
 455:poly.c        **** void poly_uniform_eta(poly *a,
 456:poly.c        ****                       const uint8_t seed[SEEDBYTES],
 457:poly.c        ****                       uint16_t nonce)
 458:poly.c        **** {
 1488              		.loc 1 458 1
 1489              		.cfi_startproc
 1490              		@ args = 0, pretend = 0, frame = 400
 1491              		@ frame_needed = 1, uses_anonymous_args = 0
 1492 0000 80B5     		push	{r7, lr}
 1493              	.LCFI91:
 1494              		.cfi_def_cfa_offset 8
 1495              		.cfi_offset 7, -8
 1496              		.cfi_offset 14, -4
 1497 0002 E4B0     		sub	sp, sp, #400
 1498              	.LCFI92:
 1499              		.cfi_def_cfa_offset 408
 1500 0004 00AF     		add	r7, sp, #0
 1501              	.LCFI93:
 1502              		.cfi_def_cfa_register 7
 1503 0006 07F5C873 		add	r3, r7, #400
 1504 000a A3F5C273 		sub	r3, r3, #388
 1505 000e 1860     		str	r0, [r3]
 1506 0010 07F5C873 		add	r3, r7, #400
 1507 0014 A3F5C473 		sub	r3, r3, #392
 1508 0018 1960     		str	r1, [r3]
 1509 001a 07F5C873 		add	r3, r7, #400
 1510 001e A3F5C573 		sub	r3, r3, #394
 1511 0022 1A80     		strh	r2, [r3]	@ movhi
 459:poly.c        ****   unsigned int ctr;
 460:poly.c        ****   unsigned int buflen = POLY_UNIFORM_ETA_NBLOCKS*STREAM128_BLOCKBYTES;
 1512              		.loc 1 460 16
 1513 0024 A823     		movs	r3, #168
 1514 0026 C7F88831 		str	r3, [r7, #392]
 461:poly.c        ****   uint8_t buf[POLY_UNIFORM_ETA_NBLOCKS*STREAM128_BLOCKBYTES];
 462:poly.c        ****   stream128_state state;
 463:poly.c        **** 
 464:poly.c        ****   stream128_init(&state, seed, nonce);
 1515              		.loc 1 464 3
 1516 002a 07F5C873 		add	r3, r7, #400
 1517 002e A3F5C573 		sub	r3, r3, #394
 1518 0032 1A88     		ldrh	r2, [r3]
 1519 0034 07F5C873 		add	r3, r7, #400
 1520 0038 A3F5C473 		sub	r3, r3, #392
 1521 003c 07F11000 		add	r0, r7, #16
 1522 0040 1968     		ldr	r1, [r3]
 1523 0042 FFF7FEFF 		bl	pqcrystals_dilithium2_ref_dilithium_shake128_stream_init
 465:poly.c        ****   stream128_squeezeblocks(buf, POLY_UNIFORM_ETA_NBLOCKS, &state);
 1524              		.loc 1 465 3
 1525 0046 07F11002 		add	r2, r7, #16
 1526 004a 07F1E003 		add	r3, r7, #224
 1527 004e 0121     		movs	r1, #1
 1528 0050 1846     		mov	r0, r3
 1529 0052 FFF7FEFF 		bl	pqcrystals_fips202_ref_shake128_squeezeblocks
 466:poly.c        **** 
 467:poly.c        ****   ctr = rej_eta(a->coeffs, N, buf, buflen);
 1530              		.loc 1 467 18
 1531 0056 07F5C873 		add	r3, r7, #400
 1532 005a A3F5C273 		sub	r3, r3, #388
 1533 005e 1868     		ldr	r0, [r3]
 1534              		.loc 1 467 9
 1535 0060 07F1E002 		add	r2, r7, #224
 1536 0064 D7F88831 		ldr	r3, [r7, #392]
 1537 0068 4FF48071 		mov	r1, #256
 1538 006c FFF7FEFF 		bl	rej_eta
 1539 0070 C7F88C01 		str	r0, [r7, #396]
 468:poly.c        **** 
 469:poly.c        ****   while(ctr < N) {
 1540              		.loc 1 469 8
 1541 0074 1FE0     		b	.L66
 1542              	.L67:
 470:poly.c        ****     stream128_squeezeblocks(buf, 1, &state);
 1543              		.loc 1 470 5
 1544 0076 07F11002 		add	r2, r7, #16
 1545 007a 07F1E003 		add	r3, r7, #224
 1546 007e 0121     		movs	r1, #1
 1547 0080 1846     		mov	r0, r3
 1548 0082 FFF7FEFF 		bl	pqcrystals_fips202_ref_shake128_squeezeblocks
 471:poly.c        ****     ctr += rej_eta(a->coeffs + ctr, N - ctr, buf, STREAM128_BLOCKBYTES);
 1549              		.loc 1 471 20
 1550 0086 07F5C873 		add	r3, r7, #400
 1551 008a A3F5C273 		sub	r3, r3, #388
 1552 008e 1A68     		ldr	r2, [r3]
 1553              		.loc 1 471 30
 1554 0090 D7F88C31 		ldr	r3, [r7, #396]
 1555 0094 9B00     		lsls	r3, r3, #2
 1556              		.loc 1 471 12
 1557 0096 D018     		adds	r0, r2, r3
 1558 0098 D7F88C31 		ldr	r3, [r7, #396]
 1559 009c C3F58071 		rsb	r1, r3, #256
 1560 00a0 07F1E002 		add	r2, r7, #224
 1561 00a4 A823     		movs	r3, #168
 1562 00a6 FFF7FEFF 		bl	rej_eta
 1563 00aa 0246     		mov	r2, r0
 1564              		.loc 1 471 9
 1565 00ac D7F88C31 		ldr	r3, [r7, #396]
 1566 00b0 1344     		add	r3, r3, r2
 1567 00b2 C7F88C31 		str	r3, [r7, #396]
 1568              	.L66:
 469:poly.c        ****     stream128_squeezeblocks(buf, 1, &state);
 1569              		.loc 1 469 8
 1570 00b6 D7F88C31 		ldr	r3, [r7, #396]
 1571 00ba FF2B     		cmp	r3, #255
 1572 00bc DBD9     		bls	.L67
 472:poly.c        ****   }
 473:poly.c        **** }
 1573              		.loc 1 473 1
 1574 00be 00BF     		nop
 1575 00c0 00BF     		nop
 1576 00c2 07F5C877 		add	r7, r7, #400
 1577              	.LCFI94:
 1578              		.cfi_def_cfa_offset 8
 1579 00c6 BD46     		mov	sp, r7
 1580              	.LCFI95:
 1581              		.cfi_def_cfa_register 13
 1582              		@ sp needed
 1583 00c8 80BD     		pop	{r7, pc}
 1584              		.cfi_endproc
 1585              	.LFE17:
 1587              		.section	.text.pqcrystals_dilithium2_ref_poly_uniform_gamma1,"ax",%progbits
 1588              		.align	1
 1589              		.global	pqcrystals_dilithium2_ref_poly_uniform_gamma1
 1590              		.syntax unified
 1591              		.thumb
 1592              		.thumb_func
 1593              		.fpu softvfp
 1595              	pqcrystals_dilithium2_ref_poly_uniform_gamma1:
 1596              	.LFB18:
 474:poly.c        **** 
 475:poly.c        **** /*************************************************
 476:poly.c        **** * Name:        poly_uniform_gamma1m1
 477:poly.c        **** *
 478:poly.c        **** * Description: Sample polynomial with uniformly random coefficients
 479:poly.c        **** *              in [-(GAMMA1 - 1), GAMMA1] by unpacking output stream
 480:poly.c        **** *              of SHAKE256(seed|nonce) or AES256CTR(seed,nonce).
 481:poly.c        **** *
 482:poly.c        **** * Arguments:   - poly *a: pointer to output polynomial
 483:poly.c        **** *              - const uint8_t seed[]: byte array with seed of length CRHBYTES
 484:poly.c        **** *              - uint16_t nonce: 16-bit nonce
 485:poly.c        **** **************************************************/
 486:poly.c        **** #if GAMMA1 == (1 << 17)
 487:poly.c        **** #define POLY_UNIFORM_GAMMA1_NBLOCKS ((576 + STREAM256_BLOCKBYTES - 1)/STREAM256_BLOCKBYTES)
 488:poly.c        **** #elif GAMMA1 == (1 << 19)
 489:poly.c        **** #define POLY_UNIFORM_GAMMA1_NBLOCKS ((640 + STREAM256_BLOCKBYTES - 1)/STREAM256_BLOCKBYTES)
 490:poly.c        **** #endif
 491:poly.c        **** void poly_uniform_gamma1(poly *a,
 492:poly.c        ****                          const uint8_t seed[CRHBYTES],
 493:poly.c        ****                          uint16_t nonce)
 494:poly.c        **** {
 1597              		.loc 1 494 1
 1598              		.cfi_startproc
 1599              		@ args = 0, pretend = 0, frame = 904
 1600              		@ frame_needed = 1, uses_anonymous_args = 0
 1601 0000 80B5     		push	{r7, lr}
 1602              	.LCFI96:
 1603              		.cfi_def_cfa_offset 8
 1604              		.cfi_offset 7, -8
 1605              		.cfi_offset 14, -4
 1606 0002 ADF5627D 		sub	sp, sp, #904
 1607              	.LCFI97:
 1608              		.cfi_def_cfa_offset 912
 1609 0006 00AF     		add	r7, sp, #0
 1610              	.LCFI98:
 1611              		.cfi_def_cfa_register 7
 1612 0008 07F56273 		add	r3, r7, #904
 1613 000c A3F55F73 		sub	r3, r3, #892
 1614 0010 1860     		str	r0, [r3]
 1615 0012 07F56273 		add	r3, r7, #904
 1616 0016 A3F56073 		sub	r3, r3, #896
 1617 001a 1960     		str	r1, [r3]
 1618 001c 07F56273 		add	r3, r7, #904
 1619 0020 A3F28233 		subw	r3, r3, #898
 1620 0024 1A80     		strh	r2, [r3]	@ movhi
 495:poly.c        ****   uint8_t buf[POLY_UNIFORM_GAMMA1_NBLOCKS*STREAM256_BLOCKBYTES];
 496:poly.c        ****   stream256_state state;
 497:poly.c        **** 
 498:poly.c        ****   stream256_init(&state, seed, nonce);
 1621              		.loc 1 498 3
 1622 0026 07F56273 		add	r3, r7, #904
 1623 002a A3F28233 		subw	r3, r3, #898
 1624 002e 1A88     		ldrh	r2, [r3]
 1625 0030 07F56273 		add	r3, r7, #904
 1626 0034 A3F56073 		sub	r3, r3, #896
 1627 0038 07F11000 		add	r0, r7, #16
 1628 003c 1968     		ldr	r1, [r3]
 1629 003e FFF7FEFF 		bl	pqcrystals_dilithium2_ref_dilithium_shake256_stream_init
 499:poly.c        ****   stream256_squeezeblocks(buf, POLY_UNIFORM_GAMMA1_NBLOCKS, &state);
 1630              		.loc 1 499 3
 1631 0042 07F11002 		add	r2, r7, #16
 1632 0046 07F1E003 		add	r3, r7, #224
 1633 004a 0521     		movs	r1, #5
 1634 004c 1846     		mov	r0, r3
 1635 004e FFF7FEFF 		bl	pqcrystals_fips202_ref_shake256_squeezeblocks
 500:poly.c        ****   // trigger_high();
 501:poly.c        ****   polyz_unpack(a, buf);
 1636              		.loc 1 501 3
 1637 0052 07F1E002 		add	r2, r7, #224
 1638 0056 07F56273 		add	r3, r7, #904
 1639 005a A3F55F73 		sub	r3, r3, #892
 1640 005e 1146     		mov	r1, r2
 1641 0060 1868     		ldr	r0, [r3]
 1642 0062 FFF7FEFF 		bl	pqcrystals_dilithium2_ref_polyz_unpack
 502:poly.c        ****   // trigger_low();
 503:poly.c        **** }
 1643              		.loc 1 503 1
 1644 0066 00BF     		nop
 1645 0068 07F56277 		add	r7, r7, #904
 1646              	.LCFI99:
 1647              		.cfi_def_cfa_offset 8
 1648 006c BD46     		mov	sp, r7
 1649              	.LCFI100:
 1650              		.cfi_def_cfa_register 13
 1651              		@ sp needed
 1652 006e 80BD     		pop	{r7, pc}
 1653              		.cfi_endproc
 1654              	.LFE18:
 1656              		.section	.text.pqcrystals_dilithium2_ref_poly_challenge,"ax",%progbits
 1657              		.align	1
 1658              		.global	pqcrystals_dilithium2_ref_poly_challenge
 1659              		.syntax unified
 1660              		.thumb
 1661              		.thumb_func
 1662              		.fpu softvfp
 1664              	pqcrystals_dilithium2_ref_poly_challenge:
 1665              	.LFB19:
 504:poly.c        **** 
 505:poly.c        **** /*************************************************
 506:poly.c        **** * Name:        challenge
 507:poly.c        **** *
 508:poly.c        **** * Description: Implementation of H. Samples polynomial with TAU nonzero
 509:poly.c        **** *              coefficients in {-1,1} using the output stream of
 510:poly.c        **** *              SHAKE256(seed).
 511:poly.c        **** *
 512:poly.c        **** * Arguments:   - poly *c: pointer to output polynomial
 513:poly.c        **** *              - const uint8_t mu[]: byte array containing seed of length SEEDBYTES
 514:poly.c        **** **************************************************/
 515:poly.c        **** void poly_challenge(poly *c, const uint8_t seed[SEEDBYTES]) {
 1666              		.loc 1 515 61
 1667              		.cfi_startproc
 1668              		@ args = 0, pretend = 0, frame = 376
 1669              		@ frame_needed = 1, uses_anonymous_args = 0
 1670 0000 2DE9B04F 		push	{r4, r5, r7, r8, r9, r10, fp, lr}
 1671              	.LCFI101:
 1672              		.cfi_def_cfa_offset 32
 1673              		.cfi_offset 4, -32
 1674              		.cfi_offset 5, -28
 1675              		.cfi_offset 7, -24
 1676              		.cfi_offset 8, -20
 1677              		.cfi_offset 9, -16
 1678              		.cfi_offset 10, -12
 1679              		.cfi_offset 11, -8
 1680              		.cfi_offset 14, -4
 1681 0004 DEB0     		sub	sp, sp, #376
 1682              	.LCFI102:
 1683              		.cfi_def_cfa_offset 408
 1684 0006 00AF     		add	r7, sp, #0
 1685              	.LCFI103:
 1686              		.cfi_def_cfa_register 7
 1687 0008 07F5BC73 		add	r3, r7, #376
 1688 000c A3F5BA73 		sub	r3, r3, #372
 1689 0010 1860     		str	r0, [r3]
 1690 0012 07F5BC73 		add	r3, r7, #376
 1691 0016 A3F5BC73 		sub	r3, r3, #376
 1692 001a 1960     		str	r1, [r3]
 516:poly.c        ****   unsigned int i, b, pos;
 517:poly.c        ****   uint64_t signs;
 518:poly.c        ****   uint8_t buf[SHAKE256_RATE];
 519:poly.c        ****   keccak_state state;
 520:poly.c        **** 
 521:poly.c        ****   shake256_init(&state);
 1693              		.loc 1 521 3
 1694 001c 07F10803 		add	r3, r7, #8
 1695 0020 1846     		mov	r0, r3
 1696 0022 FFF7FEFF 		bl	pqcrystals_fips202_ref_shake256_init
 522:poly.c        ****   shake256_absorb(&state, seed, SEEDBYTES);
 1697              		.loc 1 522 3
 1698 0026 07F5BC73 		add	r3, r7, #376
 1699 002a A3F5BC73 		sub	r3, r3, #376
 1700 002e 07F10800 		add	r0, r7, #8
 1701 0032 2022     		movs	r2, #32
 1702 0034 1968     		ldr	r1, [r3]
 1703 0036 FFF7FEFF 		bl	pqcrystals_fips202_ref_shake256_absorb
 523:poly.c        ****   shake256_finalize(&state);
 1704              		.loc 1 523 3
 1705 003a 07F10803 		add	r3, r7, #8
 1706 003e 1846     		mov	r0, r3
 1707 0040 FFF7FEFF 		bl	pqcrystals_fips202_ref_shake256_finalize
 524:poly.c        ****   shake256_squeezeblocks(buf, 1, &state);
 1708              		.loc 1 524 3
 1709 0044 07F10802 		add	r2, r7, #8
 1710 0048 07F1DC03 		add	r3, r7, #220
 1711 004c 0121     		movs	r1, #1
 1712 004e 1846     		mov	r0, r3
 1713 0050 FFF7FEFF 		bl	pqcrystals_fips202_ref_shake256_squeezeblocks
 525:poly.c        **** 
 526:poly.c        ****   signs = 0;
 1714              		.loc 1 526 9
 1715 0054 4FF00002 		mov	r2, #0
 1716 0058 4FF00003 		mov	r3, #0
 1717 005c C7E95A23 		strd	r2, [r7, #360]
 527:poly.c        ****   for(i = 0; i < 8; ++i)
 1718              		.loc 1 527 9
 1719 0060 0023     		movs	r3, #0
 1720 0062 C7F87431 		str	r3, [r7, #372]
 1721              		.loc 1 527 3
 1722 0066 27E0     		b	.L70
 1723              	.L71:
 528:poly.c        ****     signs |= (uint64_t)buf[i] << 8*i;
 1724              		.loc 1 528 27 discriminator 3
 1725 0068 07F1DC02 		add	r2, r7, #220
 1726 006c D7F87431 		ldr	r3, [r7, #372]
 1727 0070 1344     		add	r3, r3, r2
 1728 0072 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1729              		.loc 1 528 14 discriminator 3
 1730 0074 DBB2     		uxtb	r3, r3
 1731 0076 0022     		movs	r2, #0
 1732 0078 9846     		mov	r8, r3
 1733 007a 9146     		mov	r9, r2
 1734              		.loc 1 528 35 discriminator 3
 1735 007c D7F87431 		ldr	r3, [r7, #372]
 1736 0080 DB00     		lsls	r3, r3, #3
 1737              		.loc 1 528 31 discriminator 3
 1738 0082 A3F12001 		sub	r1, r3, #32
 1739 0086 C3F12002 		rsb	r2, r3, #32
 1740 008a 09FA03F5 		lsl	r5, r9, r3
 1741 008e 08FA01F1 		lsl	r1, r8, r1
 1742 0092 0D43     		orrs	r5, r5, r1
 1743 0094 28FA02F2 		lsr	r2, r8, r2
 1744 0098 1543     		orrs	r5, r5, r2
 1745 009a 08FA03F4 		lsl	r4, r8, r3
 1746              		.loc 1 528 11 discriminator 3
 1747 009e D7E95A23 		ldrd	r2, [r7, #360]
 1748 00a2 42EA040A 		orr	r10, r2, r4
 1749 00a6 43EA050B 		orr	fp, r3, r5
 1750 00aa C7E95AAB 		strd	r10, [r7, #360]
 527:poly.c        ****   for(i = 0; i < 8; ++i)
 1751              		.loc 1 527 21 discriminator 3
 1752 00ae D7F87431 		ldr	r3, [r7, #372]
 1753 00b2 0133     		adds	r3, r3, #1
 1754 00b4 C7F87431 		str	r3, [r7, #372]
 1755              	.L70:
 527:poly.c        ****   for(i = 0; i < 8; ++i)
 1756              		.loc 1 527 3 discriminator 1
 1757 00b8 D7F87431 		ldr	r3, [r7, #372]
 1758 00bc 072B     		cmp	r3, #7
 1759 00be D3D9     		bls	.L71
 529:poly.c        ****   pos = 8;
 1760              		.loc 1 529 7
 1761 00c0 0823     		movs	r3, #8
 1762 00c2 C7F87031 		str	r3, [r7, #368]
 530:poly.c        **** 
 531:poly.c        ****   for(i = 0; i < N; ++i)
 1763              		.loc 1 531 9
 1764 00c6 0023     		movs	r3, #0
 1765 00c8 C7F87431 		str	r3, [r7, #372]
 1766              		.loc 1 531 3
 1767 00cc 0EE0     		b	.L72
 1768              	.L73:
 532:poly.c        ****     c->coeffs[i] = 0;
 1769              		.loc 1 532 18 discriminator 3
 1770 00ce 07F5BC73 		add	r3, r7, #376
 1771 00d2 A3F5BA73 		sub	r3, r3, #372
 1772 00d6 1B68     		ldr	r3, [r3]
 1773 00d8 D7F87421 		ldr	r2, [r7, #372]
 1774 00dc 0021     		movs	r1, #0
 1775 00de 43F82210 		str	r1, [r3, r2, lsl #2]
 531:poly.c        ****     c->coeffs[i] = 0;
 1776              		.loc 1 531 21 discriminator 3
 1777 00e2 D7F87431 		ldr	r3, [r7, #372]
 1778 00e6 0133     		adds	r3, r3, #1
 1779 00e8 C7F87431 		str	r3, [r7, #372]
 1780              	.L72:
 531:poly.c        ****     c->coeffs[i] = 0;
 1781              		.loc 1 531 3 discriminator 1
 1782 00ec D7F87431 		ldr	r3, [r7, #372]
 1783 00f0 FF2B     		cmp	r3, #255
 1784 00f2 ECD9     		bls	.L73
 533:poly.c        ****   for(i = N-TAU; i < N; ++i) {
 1785              		.loc 1 533 9
 1786 00f4 D923     		movs	r3, #217
 1787 00f6 C7F87431 		str	r3, [r7, #372]
 1788              		.loc 1 533 3
 1789 00fa 54E0     		b	.L74
 1790              	.L76:
 534:poly.c        ****     do {
 535:poly.c        ****       if(pos >= SHAKE256_RATE) {
 1791              		.loc 1 535 9
 1792 00fc D7F87031 		ldr	r3, [r7, #368]
 1793 0100 872B     		cmp	r3, #135
 1794 0102 0AD9     		bls	.L75
 536:poly.c        ****         shake256_squeezeblocks(buf, 1, &state);
 1795              		.loc 1 536 9
 1796 0104 07F10802 		add	r2, r7, #8
 1797 0108 07F1DC03 		add	r3, r7, #220
 1798 010c 0121     		movs	r1, #1
 1799 010e 1846     		mov	r0, r3
 1800 0110 FFF7FEFF 		bl	pqcrystals_fips202_ref_shake256_squeezeblocks
 537:poly.c        ****         pos = 0;
 1801              		.loc 1 537 13
 1802 0114 0023     		movs	r3, #0
 1803 0116 C7F87031 		str	r3, [r7, #368]
 1804              	.L75:
 538:poly.c        ****       }
 539:poly.c        **** 
 540:poly.c        ****       b = buf[pos++];
 1805              		.loc 1 540 18
 1806 011a D7F87031 		ldr	r3, [r7, #368]
 1807 011e 5A1C     		adds	r2, r3, #1
 1808 0120 C7F87021 		str	r2, [r7, #368]
 1809              		.loc 1 540 14
 1810 0124 07F5BC72 		add	r2, r7, #376
 1811 0128 1344     		add	r3, r3, r2
 1812 012a 13F89C3C 		ldrb	r3, [r3, #-156]	@ zero_extendqisi2
 1813              		.loc 1 540 9
 1814 012e C7F86431 		str	r3, [r7, #356]
 541:poly.c        ****     } while(b > i);
 1815              		.loc 1 541 5
 1816 0132 D7F86421 		ldr	r2, [r7, #356]
 1817 0136 D7F87431 		ldr	r3, [r7, #372]
 1818 013a 9A42     		cmp	r2, r3
 1819 013c DED8     		bhi	.L76
 542:poly.c        **** 
 543:poly.c        ****     c->coeffs[i] = c->coeffs[b];
 1820              		.loc 1 543 29 discriminator 2
 1821 013e 07F5BC73 		add	r3, r7, #376
 1822 0142 A3F5BA73 		sub	r3, r3, #372
 1823 0146 1B68     		ldr	r3, [r3]
 1824 0148 D7F86421 		ldr	r2, [r7, #356]
 1825 014c 53F82210 		ldr	r1, [r3, r2, lsl #2]
 1826              		.loc 1 543 18 discriminator 2
 1827 0150 07F5BC73 		add	r3, r7, #376
 1828 0154 A3F5BA73 		sub	r3, r3, #372
 1829 0158 1B68     		ldr	r3, [r3]
 1830 015a D7F87421 		ldr	r2, [r7, #372]
 1831 015e 43F82210 		str	r1, [r3, r2, lsl #2]
 544:poly.c        ****     c->coeffs[b] = 1 - 2*(signs & 1);
 1832              		.loc 1 544 22 discriminator 2
 1833 0162 D7F86831 		ldr	r3, [r7, #360]
 1834 0166 03F00103 		and	r3, r3, #1
 1835 016a 5B00     		lsls	r3, r3, #1
 1836 016c C3F10103 		rsb	r3, r3, #1
 1837 0170 1946     		mov	r1, r3
 1838              		.loc 1 544 18 discriminator 2
 1839 0172 07F5BC73 		add	r3, r7, #376
 1840 0176 A3F5BA73 		sub	r3, r3, #372
 1841 017a 1B68     		ldr	r3, [r3]
 1842 017c D7F86421 		ldr	r2, [r7, #356]
 1843 0180 43F82210 		str	r1, [r3, r2, lsl #2]
 545:poly.c        ****     signs >>= 1;
 1844              		.loc 1 545 11 discriminator 2
 1845 0184 D7E95A01 		ldrd	r0, [r7, #360]
 1846 0188 4FF00002 		mov	r2, #0
 1847 018c 4FF00003 		mov	r3, #0
 1848 0190 4208     		lsrs	r2, r0, #1
 1849 0192 42EAC172 		orr	r2, r2, r1, lsl #31
 1850 0196 4B08     		lsrs	r3, r1, #1
 1851 0198 C7E95A23 		strd	r2, [r7, #360]
 533:poly.c        ****     do {
 1852              		.loc 1 533 25 discriminator 2
 1853 019c D7F87431 		ldr	r3, [r7, #372]
 1854 01a0 0133     		adds	r3, r3, #1
 1855 01a2 C7F87431 		str	r3, [r7, #372]
 1856              	.L74:
 533:poly.c        ****     do {
 1857              		.loc 1 533 3 discriminator 1
 1858 01a6 D7F87431 		ldr	r3, [r7, #372]
 1859 01aa FF2B     		cmp	r3, #255
 1860 01ac A6D9     		bls	.L76
 546:poly.c        ****   }
 547:poly.c        **** }
 1861              		.loc 1 547 1
 1862 01ae 00BF     		nop
 1863 01b0 00BF     		nop
 1864 01b2 07F5BC77 		add	r7, r7, #376
 1865              	.LCFI104:
 1866              		.cfi_def_cfa_offset 32
 1867 01b6 BD46     		mov	sp, r7
 1868              	.LCFI105:
 1869              		.cfi_def_cfa_register 13
 1870              		@ sp needed
 1871 01b8 BDE8B08F 		pop	{r4, r5, r7, r8, r9, r10, fp, pc}
 1872              		.cfi_endproc
 1873              	.LFE19:
 1875              		.section	.text.pqcrystals_dilithium2_ref_polyeta_pack,"ax",%progbits
 1876              		.align	1
 1877              		.global	pqcrystals_dilithium2_ref_polyeta_pack
 1878              		.syntax unified
 1879              		.thumb
 1880              		.thumb_func
 1881              		.fpu softvfp
 1883              	pqcrystals_dilithium2_ref_polyeta_pack:
 1884              	.LFB20:
 548:poly.c        **** 
 549:poly.c        **** /*************************************************
 550:poly.c        **** * Name:        polyeta_pack
 551:poly.c        **** *
 552:poly.c        **** * Description: Bit-pack polynomial with coefficients in [-ETA,ETA].
 553:poly.c        **** *
 554:poly.c        **** * Arguments:   - uint8_t *r: pointer to output byte array with at least
 555:poly.c        **** *                            POLYETA_PACKEDBYTES bytes
 556:poly.c        **** *              - const poly *a: pointer to input polynomial
 557:poly.c        **** **************************************************/
 558:poly.c        **** void polyeta_pack(uint8_t *r, const poly *a) {
 1885              		.loc 1 558 46
 1886              		.cfi_startproc
 1887              		@ args = 0, pretend = 0, frame = 24
 1888              		@ frame_needed = 1, uses_anonymous_args = 0
 1889              		@ link register save eliminated.
 1890 0000 80B4     		push	{r7}
 1891              	.LCFI106:
 1892              		.cfi_def_cfa_offset 4
 1893              		.cfi_offset 7, -4
 1894 0002 87B0     		sub	sp, sp, #28
 1895              	.LCFI107:
 1896              		.cfi_def_cfa_offset 32
 1897 0004 00AF     		add	r7, sp, #0
 1898              	.LCFI108:
 1899              		.cfi_def_cfa_register 7
 1900 0006 7860     		str	r0, [r7, #4]
 1901 0008 3960     		str	r1, [r7]
 559:poly.c        ****   unsigned int i;
 560:poly.c        ****   uint8_t t[8];
 561:poly.c        ****   DBENCH_START();
 562:poly.c        **** 
 563:poly.c        **** #if ETA == 2
 564:poly.c        ****   for(i = 0; i < N/8; ++i) {
 1902              		.loc 1 564 9
 1903 000a 0023     		movs	r3, #0
 1904 000c 7B61     		str	r3, [r7, #20]
 1905              		.loc 1 564 3
 1906 000e A0E0     		b	.L78
 1907              	.L79:
 565:poly.c        ****     t[0] = ETA - a->coeffs[8*i+0];
 1908              		.loc 1 565 31 discriminator 3
 1909 0010 7B69     		ldr	r3, [r7, #20]
 1910 0012 DA00     		lsls	r2, r3, #3
 1911              		.loc 1 565 27 discriminator 3
 1912 0014 3B68     		ldr	r3, [r7]
 1913 0016 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1914              		.loc 1 565 16 discriminator 3
 1915 001a DBB2     		uxtb	r3, r3
 1916 001c C3F10203 		rsb	r3, r3, #2
 1917 0020 DBB2     		uxtb	r3, r3
 1918              		.loc 1 565 10 discriminator 3
 1919 0022 3B73     		strb	r3, [r7, #12]
 566:poly.c        ****     t[1] = ETA - a->coeffs[8*i+1];
 1920              		.loc 1 566 29 discriminator 3
 1921 0024 7B69     		ldr	r3, [r7, #20]
 1922 0026 DB00     		lsls	r3, r3, #3
 1923              		.loc 1 566 31 discriminator 3
 1924 0028 5A1C     		adds	r2, r3, #1
 1925              		.loc 1 566 27 discriminator 3
 1926 002a 3B68     		ldr	r3, [r7]
 1927 002c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1928              		.loc 1 566 16 discriminator 3
 1929 0030 DBB2     		uxtb	r3, r3
 1930 0032 C3F10203 		rsb	r3, r3, #2
 1931 0036 DBB2     		uxtb	r3, r3
 1932              		.loc 1 566 10 discriminator 3
 1933 0038 7B73     		strb	r3, [r7, #13]
 567:poly.c        ****     t[2] = ETA - a->coeffs[8*i+2];
 1934              		.loc 1 567 29 discriminator 3
 1935 003a 7B69     		ldr	r3, [r7, #20]
 1936 003c DB00     		lsls	r3, r3, #3
 1937              		.loc 1 567 31 discriminator 3
 1938 003e 9A1C     		adds	r2, r3, #2
 1939              		.loc 1 567 27 discriminator 3
 1940 0040 3B68     		ldr	r3, [r7]
 1941 0042 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1942              		.loc 1 567 16 discriminator 3
 1943 0046 DBB2     		uxtb	r3, r3
 1944 0048 C3F10203 		rsb	r3, r3, #2
 1945 004c DBB2     		uxtb	r3, r3
 1946              		.loc 1 567 10 discriminator 3
 1947 004e BB73     		strb	r3, [r7, #14]
 568:poly.c        ****     t[3] = ETA - a->coeffs[8*i+3];
 1948              		.loc 1 568 29 discriminator 3
 1949 0050 7B69     		ldr	r3, [r7, #20]
 1950 0052 DB00     		lsls	r3, r3, #3
 1951              		.loc 1 568 31 discriminator 3
 1952 0054 DA1C     		adds	r2, r3, #3
 1953              		.loc 1 568 27 discriminator 3
 1954 0056 3B68     		ldr	r3, [r7]
 1955 0058 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1956              		.loc 1 568 16 discriminator 3
 1957 005c DBB2     		uxtb	r3, r3
 1958 005e C3F10203 		rsb	r3, r3, #2
 1959 0062 DBB2     		uxtb	r3, r3
 1960              		.loc 1 568 10 discriminator 3
 1961 0064 FB73     		strb	r3, [r7, #15]
 569:poly.c        ****     t[4] = ETA - a->coeffs[8*i+4];
 1962              		.loc 1 569 29 discriminator 3
 1963 0066 7B69     		ldr	r3, [r7, #20]
 1964 0068 DB00     		lsls	r3, r3, #3
 1965              		.loc 1 569 31 discriminator 3
 1966 006a 1A1D     		adds	r2, r3, #4
 1967              		.loc 1 569 27 discriminator 3
 1968 006c 3B68     		ldr	r3, [r7]
 1969 006e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1970              		.loc 1 569 16 discriminator 3
 1971 0072 DBB2     		uxtb	r3, r3
 1972 0074 C3F10203 		rsb	r3, r3, #2
 1973 0078 DBB2     		uxtb	r3, r3
 1974              		.loc 1 569 10 discriminator 3
 1975 007a 3B74     		strb	r3, [r7, #16]
 570:poly.c        ****     t[5] = ETA - a->coeffs[8*i+5];
 1976              		.loc 1 570 29 discriminator 3
 1977 007c 7B69     		ldr	r3, [r7, #20]
 1978 007e DB00     		lsls	r3, r3, #3
 1979              		.loc 1 570 31 discriminator 3
 1980 0080 5A1D     		adds	r2, r3, #5
 1981              		.loc 1 570 27 discriminator 3
 1982 0082 3B68     		ldr	r3, [r7]
 1983 0084 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1984              		.loc 1 570 16 discriminator 3
 1985 0088 DBB2     		uxtb	r3, r3
 1986 008a C3F10203 		rsb	r3, r3, #2
 1987 008e DBB2     		uxtb	r3, r3
 1988              		.loc 1 570 10 discriminator 3
 1989 0090 7B74     		strb	r3, [r7, #17]
 571:poly.c        ****     t[6] = ETA - a->coeffs[8*i+6];
 1990              		.loc 1 571 29 discriminator 3
 1991 0092 7B69     		ldr	r3, [r7, #20]
 1992 0094 DB00     		lsls	r3, r3, #3
 1993              		.loc 1 571 31 discriminator 3
 1994 0096 9A1D     		adds	r2, r3, #6
 1995              		.loc 1 571 27 discriminator 3
 1996 0098 3B68     		ldr	r3, [r7]
 1997 009a 53F82230 		ldr	r3, [r3, r2, lsl #2]
 1998              		.loc 1 571 16 discriminator 3
 1999 009e DBB2     		uxtb	r3, r3
 2000 00a0 C3F10203 		rsb	r3, r3, #2
 2001 00a4 DBB2     		uxtb	r3, r3
 2002              		.loc 1 571 10 discriminator 3
 2003 00a6 BB74     		strb	r3, [r7, #18]
 572:poly.c        ****     t[7] = ETA - a->coeffs[8*i+7];
 2004              		.loc 1 572 29 discriminator 3
 2005 00a8 7B69     		ldr	r3, [r7, #20]
 2006 00aa DB00     		lsls	r3, r3, #3
 2007              		.loc 1 572 31 discriminator 3
 2008 00ac DA1D     		adds	r2, r3, #7
 2009              		.loc 1 572 27 discriminator 3
 2010 00ae 3B68     		ldr	r3, [r7]
 2011 00b0 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2012              		.loc 1 572 16 discriminator 3
 2013 00b4 DBB2     		uxtb	r3, r3
 2014 00b6 C3F10203 		rsb	r3, r3, #2
 2015 00ba DBB2     		uxtb	r3, r3
 2016              		.loc 1 572 10 discriminator 3
 2017 00bc FB74     		strb	r3, [r7, #19]
 573:poly.c        **** 
 574:poly.c        ****     r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 2018              		.loc 1 574 19 discriminator 3
 2019 00be 3B7B     		ldrb	r3, [r7, #12]	@ zero_extendqisi2
 2020 00c0 5AB2     		sxtb	r2, r3
 2021              		.loc 1 574 33 discriminator 3
 2022 00c2 7B7B     		ldrb	r3, [r7, #13]	@ zero_extendqisi2
 2023              		.loc 1 574 37 discriminator 3
 2024 00c4 DB00     		lsls	r3, r3, #3
 2025              		.loc 1 574 29 discriminator 3
 2026 00c6 5BB2     		sxtb	r3, r3
 2027 00c8 1343     		orrs	r3, r3, r2
 2028 00ca 5AB2     		sxtb	r2, r3
 2029              		.loc 1 574 47 discriminator 3
 2030 00cc BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 2031              		.loc 1 574 51 discriminator 3
 2032 00ce 9B01     		lsls	r3, r3, #6
 2033              		.loc 1 574 43 discriminator 3
 2034 00d0 5BB2     		sxtb	r3, r3
 2035 00d2 1343     		orrs	r3, r3, r2
 2036 00d4 59B2     		sxtb	r1, r3
 2037              		.loc 1 574 8 discriminator 3
 2038 00d6 7A69     		ldr	r2, [r7, #20]
 2039 00d8 1346     		mov	r3, r2
 2040 00da 5B00     		lsls	r3, r3, #1
 2041 00dc 1344     		add	r3, r3, r2
 2042              		.loc 1 574 6 discriminator 3
 2043 00de 7A68     		ldr	r2, [r7, #4]
 2044 00e0 1344     		add	r3, r3, r2
 2045              		.loc 1 574 43 discriminator 3
 2046 00e2 CAB2     		uxtb	r2, r1
 2047              		.loc 1 574 15 discriminator 3
 2048 00e4 1A70     		strb	r2, [r3]
 575:poly.c        ****     r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 2049              		.loc 1 575 19 discriminator 3
 2050 00e6 BB7B     		ldrb	r3, [r7, #14]	@ zero_extendqisi2
 2051              		.loc 1 575 29 discriminator 3
 2052 00e8 9B08     		lsrs	r3, r3, #2
 2053 00ea DBB2     		uxtb	r3, r3
 2054 00ec 5AB2     		sxtb	r2, r3
 2055              		.loc 1 575 33 discriminator 3
 2056 00ee FB7B     		ldrb	r3, [r7, #15]	@ zero_extendqisi2
 2057              		.loc 1 575 37 discriminator 3
 2058 00f0 5B00     		lsls	r3, r3, #1
 2059              		.loc 1 575 29 discriminator 3
 2060 00f2 5BB2     		sxtb	r3, r3
 2061 00f4 1343     		orrs	r3, r3, r2
 2062 00f6 5AB2     		sxtb	r2, r3
 2063              		.loc 1 575 47 discriminator 3
 2064 00f8 3B7C     		ldrb	r3, [r7, #16]	@ zero_extendqisi2
 2065              		.loc 1 575 51 discriminator 3
 2066 00fa 1B01     		lsls	r3, r3, #4
 2067              		.loc 1 575 43 discriminator 3
 2068 00fc 5BB2     		sxtb	r3, r3
 2069 00fe 1343     		orrs	r3, r3, r2
 2070 0100 5AB2     		sxtb	r2, r3
 2071              		.loc 1 575 61 discriminator 3
 2072 0102 7B7C     		ldrb	r3, [r7, #17]	@ zero_extendqisi2
 2073              		.loc 1 575 65 discriminator 3
 2074 0104 DB01     		lsls	r3, r3, #7
 2075              		.loc 1 575 57 discriminator 3
 2076 0106 5BB2     		sxtb	r3, r3
 2077 0108 1343     		orrs	r3, r3, r2
 2078 010a 59B2     		sxtb	r1, r3
 2079              		.loc 1 575 8 discriminator 3
 2080 010c 7A69     		ldr	r2, [r7, #20]
 2081 010e 1346     		mov	r3, r2
 2082 0110 5B00     		lsls	r3, r3, #1
 2083 0112 1344     		add	r3, r3, r2
 2084              		.loc 1 575 6 discriminator 3
 2085 0114 0133     		adds	r3, r3, #1
 2086 0116 7A68     		ldr	r2, [r7, #4]
 2087 0118 1344     		add	r3, r3, r2
 2088              		.loc 1 575 57 discriminator 3
 2089 011a CAB2     		uxtb	r2, r1
 2090              		.loc 1 575 15 discriminator 3
 2091 011c 1A70     		strb	r2, [r3]
 576:poly.c        ****     r[3*i+2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
 2092              		.loc 1 576 19 discriminator 3
 2093 011e 7B7C     		ldrb	r3, [r7, #17]	@ zero_extendqisi2
 2094              		.loc 1 576 29 discriminator 3
 2095 0120 5B08     		lsrs	r3, r3, #1
 2096 0122 DBB2     		uxtb	r3, r3
 2097 0124 5AB2     		sxtb	r2, r3
 2098              		.loc 1 576 33 discriminator 3
 2099 0126 BB7C     		ldrb	r3, [r7, #18]	@ zero_extendqisi2
 2100              		.loc 1 576 37 discriminator 3
 2101 0128 9B00     		lsls	r3, r3, #2
 2102              		.loc 1 576 29 discriminator 3
 2103 012a 5BB2     		sxtb	r3, r3
 2104 012c 1343     		orrs	r3, r3, r2
 2105 012e 5AB2     		sxtb	r2, r3
 2106              		.loc 1 576 47 discriminator 3
 2107 0130 FB7C     		ldrb	r3, [r7, #19]	@ zero_extendqisi2
 2108              		.loc 1 576 51 discriminator 3
 2109 0132 5B01     		lsls	r3, r3, #5
 2110              		.loc 1 576 43 discriminator 3
 2111 0134 5BB2     		sxtb	r3, r3
 2112 0136 1343     		orrs	r3, r3, r2
 2113 0138 59B2     		sxtb	r1, r3
 2114              		.loc 1 576 8 discriminator 3
 2115 013a 7A69     		ldr	r2, [r7, #20]
 2116 013c 1346     		mov	r3, r2
 2117 013e 5B00     		lsls	r3, r3, #1
 2118 0140 1344     		add	r3, r3, r2
 2119              		.loc 1 576 6 discriminator 3
 2120 0142 0233     		adds	r3, r3, #2
 2121 0144 7A68     		ldr	r2, [r7, #4]
 2122 0146 1344     		add	r3, r3, r2
 2123              		.loc 1 576 43 discriminator 3
 2124 0148 CAB2     		uxtb	r2, r1
 2125              		.loc 1 576 15 discriminator 3
 2126 014a 1A70     		strb	r2, [r3]
 564:poly.c        ****     t[0] = ETA - a->coeffs[8*i+0];
 2127              		.loc 1 564 23 discriminator 3
 2128 014c 7B69     		ldr	r3, [r7, #20]
 2129 014e 0133     		adds	r3, r3, #1
 2130 0150 7B61     		str	r3, [r7, #20]
 2131              	.L78:
 564:poly.c        ****     t[0] = ETA - a->coeffs[8*i+0];
 2132              		.loc 1 564 3 discriminator 1
 2133 0152 7B69     		ldr	r3, [r7, #20]
 2134 0154 1F2B     		cmp	r3, #31
 2135 0156 7FF65BAF 		bls	.L79
 577:poly.c        ****   }
 578:poly.c        **** #elif ETA == 4
 579:poly.c        ****   for(i = 0; i < N/2; ++i) {
 580:poly.c        ****     t[0] = ETA - a->coeffs[2*i+0];
 581:poly.c        ****     t[1] = ETA - a->coeffs[2*i+1];
 582:poly.c        ****     r[i] = t[0] | (t[1] << 4);
 583:poly.c        ****   }
 584:poly.c        **** #endif
 585:poly.c        **** 
 586:poly.c        ****   DBENCH_STOP(*tpack);
 587:poly.c        **** }
 2136              		.loc 1 587 1
 2137 015a 00BF     		nop
 2138 015c 00BF     		nop
 2139 015e 1C37     		adds	r7, r7, #28
 2140              	.LCFI109:
 2141              		.cfi_def_cfa_offset 4
 2142 0160 BD46     		mov	sp, r7
 2143              	.LCFI110:
 2144              		.cfi_def_cfa_register 13
 2145              		@ sp needed
 2146 0162 80BC     		pop	{r7}
 2147              	.LCFI111:
 2148              		.cfi_restore 7
 2149              		.cfi_def_cfa_offset 0
 2150 0164 7047     		bx	lr
 2151              		.cfi_endproc
 2152              	.LFE20:
 2154              		.section	.text.pqcrystals_dilithium2_ref_polyeta_unpack,"ax",%progbits
 2155              		.align	1
 2156              		.global	pqcrystals_dilithium2_ref_polyeta_unpack
 2157              		.syntax unified
 2158              		.thumb
 2159              		.thumb_func
 2160              		.fpu softvfp
 2162              	pqcrystals_dilithium2_ref_polyeta_unpack:
 2163              	.LFB21:
 588:poly.c        **** 
 589:poly.c        **** /*************************************************
 590:poly.c        **** * Name:        polyeta_unpack
 591:poly.c        **** *
 592:poly.c        **** * Description: Unpack polynomial with coefficients in [-ETA,ETA].
 593:poly.c        **** *
 594:poly.c        **** * Arguments:   - poly *r: pointer to output polynomial
 595:poly.c        **** *              - const uint8_t *a: byte array with bit-packed polynomial
 596:poly.c        **** **************************************************/
 597:poly.c        **** void polyeta_unpack(poly *r, const uint8_t *a) {
 2164              		.loc 1 597 48
 2165              		.cfi_startproc
 2166              		@ args = 0, pretend = 0, frame = 16
 2167              		@ frame_needed = 1, uses_anonymous_args = 0
 2168              		@ link register save eliminated.
 2169 0000 80B4     		push	{r7}
 2170              	.LCFI112:
 2171              		.cfi_def_cfa_offset 4
 2172              		.cfi_offset 7, -4
 2173 0002 85B0     		sub	sp, sp, #20
 2174              	.LCFI113:
 2175              		.cfi_def_cfa_offset 24
 2176 0004 00AF     		add	r7, sp, #0
 2177              	.LCFI114:
 2178              		.cfi_def_cfa_register 7
 2179 0006 7860     		str	r0, [r7, #4]
 2180 0008 3960     		str	r1, [r7]
 598:poly.c        ****   unsigned int i;
 599:poly.c        ****   DBENCH_START();
 600:poly.c        **** 
 601:poly.c        **** #if ETA == 2
 602:poly.c        ****   for(i = 0; i < N/8; ++i) {
 2181              		.loc 1 602 9
 2182 000a 0023     		movs	r3, #0
 2183 000c FB60     		str	r3, [r7, #12]
 2184              		.loc 1 602 3
 2185 000e 16E1     		b	.L81
 2186              	.L82:
 603:poly.c        ****     r->coeffs[8*i+0] =  (a[3*i+0] >> 0) & 7;
 2187              		.loc 1 603 29 discriminator 3
 2188 0010 FA68     		ldr	r2, [r7, #12]
 2189 0012 1346     		mov	r3, r2
 2190 0014 5B00     		lsls	r3, r3, #1
 2191 0016 1344     		add	r3, r3, r2
 2192              		.loc 1 603 27 discriminator 3
 2193 0018 3A68     		ldr	r2, [r7]
 2194 001a 1344     		add	r3, r3, r2
 2195 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2196              		.loc 1 603 41 discriminator 3
 2197 001e 1946     		mov	r1, r3
 2198              		.loc 1 603 18 discriminator 3
 2199 0020 FB68     		ldr	r3, [r7, #12]
 2200 0022 DA00     		lsls	r2, r3, #3
 2201              		.loc 1 603 41 discriminator 3
 2202 0024 01F00701 		and	r1, r1, #7
 2203              		.loc 1 603 22 discriminator 3
 2204 0028 7B68     		ldr	r3, [r7, #4]
 2205 002a 43F82210 		str	r1, [r3, r2, lsl #2]
 604:poly.c        ****     r->coeffs[8*i+1] =  (a[3*i+0] >> 3) & 7;
 2206              		.loc 1 604 29 discriminator 3
 2207 002e FA68     		ldr	r2, [r7, #12]
 2208 0030 1346     		mov	r3, r2
 2209 0032 5B00     		lsls	r3, r3, #1
 2210 0034 1344     		add	r3, r3, r2
 2211              		.loc 1 604 27 discriminator 3
 2212 0036 3A68     		ldr	r2, [r7]
 2213 0038 1344     		add	r3, r3, r2
 2214 003a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2215              		.loc 1 604 41 discriminator 3
 2216 003c DB08     		lsrs	r3, r3, #3
 2217 003e DBB2     		uxtb	r3, r3
 2218 0040 1946     		mov	r1, r3
 2219              		.loc 1 604 16 discriminator 3
 2220 0042 FB68     		ldr	r3, [r7, #12]
 2221 0044 DB00     		lsls	r3, r3, #3
 2222              		.loc 1 604 18 discriminator 3
 2223 0046 5A1C     		adds	r2, r3, #1
 2224              		.loc 1 604 41 discriminator 3
 2225 0048 01F00701 		and	r1, r1, #7
 2226              		.loc 1 604 22 discriminator 3
 2227 004c 7B68     		ldr	r3, [r7, #4]
 2228 004e 43F82210 		str	r1, [r3, r2, lsl #2]
 605:poly.c        ****     r->coeffs[8*i+2] = ((a[3*i+0] >> 6) | (a[3*i+1] << 2)) & 7;
 2229              		.loc 1 605 29 discriminator 3
 2230 0052 FA68     		ldr	r2, [r7, #12]
 2231 0054 1346     		mov	r3, r2
 2232 0056 5B00     		lsls	r3, r3, #1
 2233 0058 1344     		add	r3, r3, r2
 2234              		.loc 1 605 27 discriminator 3
 2235 005a 3A68     		ldr	r2, [r7]
 2236 005c 1344     		add	r3, r3, r2
 2237 005e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2238              		.loc 1 605 35 discriminator 3
 2239 0060 9B09     		lsrs	r3, r3, #6
 2240 0062 DBB2     		uxtb	r3, r3
 2241 0064 1946     		mov	r1, r3
 2242              		.loc 1 605 47 discriminator 3
 2243 0066 FA68     		ldr	r2, [r7, #12]
 2244 0068 1346     		mov	r3, r2
 2245 006a 5B00     		lsls	r3, r3, #1
 2246 006c 1344     		add	r3, r3, r2
 2247              		.loc 1 605 45 discriminator 3
 2248 006e 0133     		adds	r3, r3, #1
 2249 0070 3A68     		ldr	r2, [r7]
 2250 0072 1344     		add	r3, r3, r2
 2251 0074 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2252              		.loc 1 605 53 discriminator 3
 2253 0076 9B00     		lsls	r3, r3, #2
 2254              		.loc 1 605 41 discriminator 3
 2255 0078 0B43     		orrs	r3, r3, r1
 2256              		.loc 1 605 16 discriminator 3
 2257 007a FA68     		ldr	r2, [r7, #12]
 2258 007c D200     		lsls	r2, r2, #3
 2259              		.loc 1 605 18 discriminator 3
 2260 007e 0232     		adds	r2, r2, #2
 2261              		.loc 1 605 60 discriminator 3
 2262 0080 03F00701 		and	r1, r3, #7
 2263              		.loc 1 605 22 discriminator 3
 2264 0084 7B68     		ldr	r3, [r7, #4]
 2265 0086 43F82210 		str	r1, [r3, r2, lsl #2]
 606:poly.c        ****     r->coeffs[8*i+3] =  (a[3*i+1] >> 1) & 7;
 2266              		.loc 1 606 29 discriminator 3
 2267 008a FA68     		ldr	r2, [r7, #12]
 2268 008c 1346     		mov	r3, r2
 2269 008e 5B00     		lsls	r3, r3, #1
 2270 0090 1344     		add	r3, r3, r2
 2271              		.loc 1 606 27 discriminator 3
 2272 0092 0133     		adds	r3, r3, #1
 2273 0094 3A68     		ldr	r2, [r7]
 2274 0096 1344     		add	r3, r3, r2
 2275 0098 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2276              		.loc 1 606 41 discriminator 3
 2277 009a 5B08     		lsrs	r3, r3, #1
 2278 009c DBB2     		uxtb	r3, r3
 2279 009e 1946     		mov	r1, r3
 2280              		.loc 1 606 16 discriminator 3
 2281 00a0 FB68     		ldr	r3, [r7, #12]
 2282 00a2 DB00     		lsls	r3, r3, #3
 2283              		.loc 1 606 18 discriminator 3
 2284 00a4 DA1C     		adds	r2, r3, #3
 2285              		.loc 1 606 41 discriminator 3
 2286 00a6 01F00701 		and	r1, r1, #7
 2287              		.loc 1 606 22 discriminator 3
 2288 00aa 7B68     		ldr	r3, [r7, #4]
 2289 00ac 43F82210 		str	r1, [r3, r2, lsl #2]
 607:poly.c        ****     r->coeffs[8*i+4] =  (a[3*i+1] >> 4) & 7;
 2290              		.loc 1 607 29 discriminator 3
 2291 00b0 FA68     		ldr	r2, [r7, #12]
 2292 00b2 1346     		mov	r3, r2
 2293 00b4 5B00     		lsls	r3, r3, #1
 2294 00b6 1344     		add	r3, r3, r2
 2295              		.loc 1 607 27 discriminator 3
 2296 00b8 0133     		adds	r3, r3, #1
 2297 00ba 3A68     		ldr	r2, [r7]
 2298 00bc 1344     		add	r3, r3, r2
 2299 00be 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2300              		.loc 1 607 41 discriminator 3
 2301 00c0 1B09     		lsrs	r3, r3, #4
 2302 00c2 DBB2     		uxtb	r3, r3
 2303 00c4 1946     		mov	r1, r3
 2304              		.loc 1 607 16 discriminator 3
 2305 00c6 FB68     		ldr	r3, [r7, #12]
 2306 00c8 DB00     		lsls	r3, r3, #3
 2307              		.loc 1 607 18 discriminator 3
 2308 00ca 1A1D     		adds	r2, r3, #4
 2309              		.loc 1 607 41 discriminator 3
 2310 00cc 01F00701 		and	r1, r1, #7
 2311              		.loc 1 607 22 discriminator 3
 2312 00d0 7B68     		ldr	r3, [r7, #4]
 2313 00d2 43F82210 		str	r1, [r3, r2, lsl #2]
 608:poly.c        ****     r->coeffs[8*i+5] = ((a[3*i+1] >> 7) | (a[3*i+2] << 1)) & 7;
 2314              		.loc 1 608 29 discriminator 3
 2315 00d6 FA68     		ldr	r2, [r7, #12]
 2316 00d8 1346     		mov	r3, r2
 2317 00da 5B00     		lsls	r3, r3, #1
 2318 00dc 1344     		add	r3, r3, r2
 2319              		.loc 1 608 27 discriminator 3
 2320 00de 0133     		adds	r3, r3, #1
 2321 00e0 3A68     		ldr	r2, [r7]
 2322 00e2 1344     		add	r3, r3, r2
 2323 00e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2324              		.loc 1 608 35 discriminator 3
 2325 00e6 DB09     		lsrs	r3, r3, #7
 2326 00e8 DBB2     		uxtb	r3, r3
 2327 00ea 1946     		mov	r1, r3
 2328              		.loc 1 608 47 discriminator 3
 2329 00ec FA68     		ldr	r2, [r7, #12]
 2330 00ee 1346     		mov	r3, r2
 2331 00f0 5B00     		lsls	r3, r3, #1
 2332 00f2 1344     		add	r3, r3, r2
 2333              		.loc 1 608 45 discriminator 3
 2334 00f4 0233     		adds	r3, r3, #2
 2335 00f6 3A68     		ldr	r2, [r7]
 2336 00f8 1344     		add	r3, r3, r2
 2337 00fa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2338              		.loc 1 608 53 discriminator 3
 2339 00fc 5B00     		lsls	r3, r3, #1
 2340              		.loc 1 608 41 discriminator 3
 2341 00fe 0B43     		orrs	r3, r3, r1
 2342              		.loc 1 608 16 discriminator 3
 2343 0100 FA68     		ldr	r2, [r7, #12]
 2344 0102 D200     		lsls	r2, r2, #3
 2345              		.loc 1 608 18 discriminator 3
 2346 0104 0532     		adds	r2, r2, #5
 2347              		.loc 1 608 60 discriminator 3
 2348 0106 03F00701 		and	r1, r3, #7
 2349              		.loc 1 608 22 discriminator 3
 2350 010a 7B68     		ldr	r3, [r7, #4]
 2351 010c 43F82210 		str	r1, [r3, r2, lsl #2]
 609:poly.c        ****     r->coeffs[8*i+6] =  (a[3*i+2] >> 2) & 7;
 2352              		.loc 1 609 29 discriminator 3
 2353 0110 FA68     		ldr	r2, [r7, #12]
 2354 0112 1346     		mov	r3, r2
 2355 0114 5B00     		lsls	r3, r3, #1
 2356 0116 1344     		add	r3, r3, r2
 2357              		.loc 1 609 27 discriminator 3
 2358 0118 0233     		adds	r3, r3, #2
 2359 011a 3A68     		ldr	r2, [r7]
 2360 011c 1344     		add	r3, r3, r2
 2361 011e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2362              		.loc 1 609 41 discriminator 3
 2363 0120 9B08     		lsrs	r3, r3, #2
 2364 0122 DBB2     		uxtb	r3, r3
 2365 0124 1946     		mov	r1, r3
 2366              		.loc 1 609 16 discriminator 3
 2367 0126 FB68     		ldr	r3, [r7, #12]
 2368 0128 DB00     		lsls	r3, r3, #3
 2369              		.loc 1 609 18 discriminator 3
 2370 012a 9A1D     		adds	r2, r3, #6
 2371              		.loc 1 609 41 discriminator 3
 2372 012c 01F00701 		and	r1, r1, #7
 2373              		.loc 1 609 22 discriminator 3
 2374 0130 7B68     		ldr	r3, [r7, #4]
 2375 0132 43F82210 		str	r1, [r3, r2, lsl #2]
 610:poly.c        ****     r->coeffs[8*i+7] =  (a[3*i+2] >> 5) & 7;
 2376              		.loc 1 610 29 discriminator 3
 2377 0136 FA68     		ldr	r2, [r7, #12]
 2378 0138 1346     		mov	r3, r2
 2379 013a 5B00     		lsls	r3, r3, #1
 2380 013c 1344     		add	r3, r3, r2
 2381              		.loc 1 610 27 discriminator 3
 2382 013e 0233     		adds	r3, r3, #2
 2383 0140 3A68     		ldr	r2, [r7]
 2384 0142 1344     		add	r3, r3, r2
 2385 0144 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2386              		.loc 1 610 41 discriminator 3
 2387 0146 5B09     		lsrs	r3, r3, #5
 2388 0148 DBB2     		uxtb	r3, r3
 2389 014a 1946     		mov	r1, r3
 2390              		.loc 1 610 16 discriminator 3
 2391 014c FB68     		ldr	r3, [r7, #12]
 2392 014e DB00     		lsls	r3, r3, #3
 2393              		.loc 1 610 18 discriminator 3
 2394 0150 DA1D     		adds	r2, r3, #7
 2395              		.loc 1 610 41 discriminator 3
 2396 0152 01F00701 		and	r1, r1, #7
 2397              		.loc 1 610 22 discriminator 3
 2398 0156 7B68     		ldr	r3, [r7, #4]
 2399 0158 43F82210 		str	r1, [r3, r2, lsl #2]
 611:poly.c        **** 
 612:poly.c        ****     r->coeffs[8*i+0] = ETA - r->coeffs[8*i+0];
 2400              		.loc 1 612 43 discriminator 3
 2401 015c FB68     		ldr	r3, [r7, #12]
 2402 015e DA00     		lsls	r2, r3, #3
 2403              		.loc 1 612 39 discriminator 3
 2404 0160 7B68     		ldr	r3, [r7, #4]
 2405 0162 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2406              		.loc 1 612 18 discriminator 3
 2407 0166 FA68     		ldr	r2, [r7, #12]
 2408 0168 D200     		lsls	r2, r2, #3
 2409              		.loc 1 612 28 discriminator 3
 2410 016a C3F10201 		rsb	r1, r3, #2
 2411              		.loc 1 612 22 discriminator 3
 2412 016e 7B68     		ldr	r3, [r7, #4]
 2413 0170 43F82210 		str	r1, [r3, r2, lsl #2]
 613:poly.c        ****     r->coeffs[8*i+1] = ETA - r->coeffs[8*i+1];
 2414              		.loc 1 613 41 discriminator 3
 2415 0174 FB68     		ldr	r3, [r7, #12]
 2416 0176 DB00     		lsls	r3, r3, #3
 2417              		.loc 1 613 43 discriminator 3
 2418 0178 5A1C     		adds	r2, r3, #1
 2419              		.loc 1 613 39 discriminator 3
 2420 017a 7B68     		ldr	r3, [r7, #4]
 2421 017c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2422              		.loc 1 613 16 discriminator 3
 2423 0180 FA68     		ldr	r2, [r7, #12]
 2424 0182 D200     		lsls	r2, r2, #3
 2425              		.loc 1 613 18 discriminator 3
 2426 0184 0132     		adds	r2, r2, #1
 2427              		.loc 1 613 28 discriminator 3
 2428 0186 C3F10201 		rsb	r1, r3, #2
 2429              		.loc 1 613 22 discriminator 3
 2430 018a 7B68     		ldr	r3, [r7, #4]
 2431 018c 43F82210 		str	r1, [r3, r2, lsl #2]
 614:poly.c        ****     r->coeffs[8*i+2] = ETA - r->coeffs[8*i+2];
 2432              		.loc 1 614 41 discriminator 3
 2433 0190 FB68     		ldr	r3, [r7, #12]
 2434 0192 DB00     		lsls	r3, r3, #3
 2435              		.loc 1 614 43 discriminator 3
 2436 0194 9A1C     		adds	r2, r3, #2
 2437              		.loc 1 614 39 discriminator 3
 2438 0196 7B68     		ldr	r3, [r7, #4]
 2439 0198 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2440              		.loc 1 614 16 discriminator 3
 2441 019c FA68     		ldr	r2, [r7, #12]
 2442 019e D200     		lsls	r2, r2, #3
 2443              		.loc 1 614 18 discriminator 3
 2444 01a0 0232     		adds	r2, r2, #2
 2445              		.loc 1 614 28 discriminator 3
 2446 01a2 C3F10201 		rsb	r1, r3, #2
 2447              		.loc 1 614 22 discriminator 3
 2448 01a6 7B68     		ldr	r3, [r7, #4]
 2449 01a8 43F82210 		str	r1, [r3, r2, lsl #2]
 615:poly.c        ****     r->coeffs[8*i+3] = ETA - r->coeffs[8*i+3];
 2450              		.loc 1 615 41 discriminator 3
 2451 01ac FB68     		ldr	r3, [r7, #12]
 2452 01ae DB00     		lsls	r3, r3, #3
 2453              		.loc 1 615 43 discriminator 3
 2454 01b0 DA1C     		adds	r2, r3, #3
 2455              		.loc 1 615 39 discriminator 3
 2456 01b2 7B68     		ldr	r3, [r7, #4]
 2457 01b4 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2458              		.loc 1 615 16 discriminator 3
 2459 01b8 FA68     		ldr	r2, [r7, #12]
 2460 01ba D200     		lsls	r2, r2, #3
 2461              		.loc 1 615 18 discriminator 3
 2462 01bc 0332     		adds	r2, r2, #3
 2463              		.loc 1 615 28 discriminator 3
 2464 01be C3F10201 		rsb	r1, r3, #2
 2465              		.loc 1 615 22 discriminator 3
 2466 01c2 7B68     		ldr	r3, [r7, #4]
 2467 01c4 43F82210 		str	r1, [r3, r2, lsl #2]
 616:poly.c        ****     r->coeffs[8*i+4] = ETA - r->coeffs[8*i+4];
 2468              		.loc 1 616 41 discriminator 3
 2469 01c8 FB68     		ldr	r3, [r7, #12]
 2470 01ca DB00     		lsls	r3, r3, #3
 2471              		.loc 1 616 43 discriminator 3
 2472 01cc 1A1D     		adds	r2, r3, #4
 2473              		.loc 1 616 39 discriminator 3
 2474 01ce 7B68     		ldr	r3, [r7, #4]
 2475 01d0 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2476              		.loc 1 616 16 discriminator 3
 2477 01d4 FA68     		ldr	r2, [r7, #12]
 2478 01d6 D200     		lsls	r2, r2, #3
 2479              		.loc 1 616 18 discriminator 3
 2480 01d8 0432     		adds	r2, r2, #4
 2481              		.loc 1 616 28 discriminator 3
 2482 01da C3F10201 		rsb	r1, r3, #2
 2483              		.loc 1 616 22 discriminator 3
 2484 01de 7B68     		ldr	r3, [r7, #4]
 2485 01e0 43F82210 		str	r1, [r3, r2, lsl #2]
 617:poly.c        ****     r->coeffs[8*i+5] = ETA - r->coeffs[8*i+5];
 2486              		.loc 1 617 41 discriminator 3
 2487 01e4 FB68     		ldr	r3, [r7, #12]
 2488 01e6 DB00     		lsls	r3, r3, #3
 2489              		.loc 1 617 43 discriminator 3
 2490 01e8 5A1D     		adds	r2, r3, #5
 2491              		.loc 1 617 39 discriminator 3
 2492 01ea 7B68     		ldr	r3, [r7, #4]
 2493 01ec 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2494              		.loc 1 617 16 discriminator 3
 2495 01f0 FA68     		ldr	r2, [r7, #12]
 2496 01f2 D200     		lsls	r2, r2, #3
 2497              		.loc 1 617 18 discriminator 3
 2498 01f4 0532     		adds	r2, r2, #5
 2499              		.loc 1 617 28 discriminator 3
 2500 01f6 C3F10201 		rsb	r1, r3, #2
 2501              		.loc 1 617 22 discriminator 3
 2502 01fa 7B68     		ldr	r3, [r7, #4]
 2503 01fc 43F82210 		str	r1, [r3, r2, lsl #2]
 618:poly.c        ****     r->coeffs[8*i+6] = ETA - r->coeffs[8*i+6];
 2504              		.loc 1 618 41 discriminator 3
 2505 0200 FB68     		ldr	r3, [r7, #12]
 2506 0202 DB00     		lsls	r3, r3, #3
 2507              		.loc 1 618 43 discriminator 3
 2508 0204 9A1D     		adds	r2, r3, #6
 2509              		.loc 1 618 39 discriminator 3
 2510 0206 7B68     		ldr	r3, [r7, #4]
 2511 0208 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2512              		.loc 1 618 16 discriminator 3
 2513 020c FA68     		ldr	r2, [r7, #12]
 2514 020e D200     		lsls	r2, r2, #3
 2515              		.loc 1 618 18 discriminator 3
 2516 0210 0632     		adds	r2, r2, #6
 2517              		.loc 1 618 28 discriminator 3
 2518 0212 C3F10201 		rsb	r1, r3, #2
 2519              		.loc 1 618 22 discriminator 3
 2520 0216 7B68     		ldr	r3, [r7, #4]
 2521 0218 43F82210 		str	r1, [r3, r2, lsl #2]
 619:poly.c        ****     r->coeffs[8*i+7] = ETA - r->coeffs[8*i+7];
 2522              		.loc 1 619 41 discriminator 3
 2523 021c FB68     		ldr	r3, [r7, #12]
 2524 021e DB00     		lsls	r3, r3, #3
 2525              		.loc 1 619 43 discriminator 3
 2526 0220 DA1D     		adds	r2, r3, #7
 2527              		.loc 1 619 39 discriminator 3
 2528 0222 7B68     		ldr	r3, [r7, #4]
 2529 0224 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2530              		.loc 1 619 16 discriminator 3
 2531 0228 FA68     		ldr	r2, [r7, #12]
 2532 022a D200     		lsls	r2, r2, #3
 2533              		.loc 1 619 18 discriminator 3
 2534 022c 0732     		adds	r2, r2, #7
 2535              		.loc 1 619 28 discriminator 3
 2536 022e C3F10201 		rsb	r1, r3, #2
 2537              		.loc 1 619 22 discriminator 3
 2538 0232 7B68     		ldr	r3, [r7, #4]
 2539 0234 43F82210 		str	r1, [r3, r2, lsl #2]
 602:poly.c        ****     r->coeffs[8*i+0] =  (a[3*i+0] >> 0) & 7;
 2540              		.loc 1 602 23 discriminator 3
 2541 0238 FB68     		ldr	r3, [r7, #12]
 2542 023a 0133     		adds	r3, r3, #1
 2543 023c FB60     		str	r3, [r7, #12]
 2544              	.L81:
 602:poly.c        ****     r->coeffs[8*i+0] =  (a[3*i+0] >> 0) & 7;
 2545              		.loc 1 602 3 discriminator 1
 2546 023e FB68     		ldr	r3, [r7, #12]
 2547 0240 1F2B     		cmp	r3, #31
 2548 0242 7FF6E5AE 		bls	.L82
 620:poly.c        ****   }
 621:poly.c        **** #elif ETA == 4
 622:poly.c        ****   for(i = 0; i < N/2; ++i) {
 623:poly.c        ****     r->coeffs[2*i+0] = a[i] & 0x0F;
 624:poly.c        ****     r->coeffs[2*i+1] = a[i] >> 4;
 625:poly.c        ****     r->coeffs[2*i+0] = ETA - r->coeffs[2*i+0];
 626:poly.c        ****     r->coeffs[2*i+1] = ETA - r->coeffs[2*i+1];
 627:poly.c        ****   }
 628:poly.c        **** #endif
 629:poly.c        **** 
 630:poly.c        ****   DBENCH_STOP(*tpack);
 631:poly.c        **** }
 2549              		.loc 1 631 1
 2550 0246 00BF     		nop
 2551 0248 00BF     		nop
 2552 024a 1437     		adds	r7, r7, #20
 2553              	.LCFI115:
 2554              		.cfi_def_cfa_offset 4
 2555 024c BD46     		mov	sp, r7
 2556              	.LCFI116:
 2557              		.cfi_def_cfa_register 13
 2558              		@ sp needed
 2559 024e 80BC     		pop	{r7}
 2560              	.LCFI117:
 2561              		.cfi_restore 7
 2562              		.cfi_def_cfa_offset 0
 2563 0250 7047     		bx	lr
 2564              		.cfi_endproc
 2565              	.LFE21:
 2567              		.section	.text.pqcrystals_dilithium2_ref_polyt1_pack,"ax",%progbits
 2568              		.align	1
 2569              		.global	pqcrystals_dilithium2_ref_polyt1_pack
 2570              		.syntax unified
 2571              		.thumb
 2572              		.thumb_func
 2573              		.fpu softvfp
 2575              	pqcrystals_dilithium2_ref_polyt1_pack:
 2576              	.LFB22:
 632:poly.c        **** 
 633:poly.c        **** /*************************************************
 634:poly.c        **** * Name:        polyt1_pack
 635:poly.c        **** *
 636:poly.c        **** * Description: Bit-pack polynomial t1 with coefficients fitting in 10 bits.
 637:poly.c        **** *              Input coefficients are assumed to be standard representatives.
 638:poly.c        **** *
 639:poly.c        **** * Arguments:   - uint8_t *r: pointer to output byte array with at least
 640:poly.c        **** *                            POLYT1_PACKEDBYTES bytes
 641:poly.c        **** *              - const poly *a: pointer to input polynomial
 642:poly.c        **** **************************************************/
 643:poly.c        **** void polyt1_pack(uint8_t *r, const poly *a) {
 2577              		.loc 1 643 45
 2578              		.cfi_startproc
 2579              		@ args = 0, pretend = 0, frame = 16
 2580              		@ frame_needed = 1, uses_anonymous_args = 0
 2581              		@ link register save eliminated.
 2582 0000 80B4     		push	{r7}
 2583              	.LCFI118:
 2584              		.cfi_def_cfa_offset 4
 2585              		.cfi_offset 7, -4
 2586 0002 85B0     		sub	sp, sp, #20
 2587              	.LCFI119:
 2588              		.cfi_def_cfa_offset 24
 2589 0004 00AF     		add	r7, sp, #0
 2590              	.LCFI120:
 2591              		.cfi_def_cfa_register 7
 2592 0006 7860     		str	r0, [r7, #4]
 2593 0008 3960     		str	r1, [r7]
 644:poly.c        ****   unsigned int i;
 645:poly.c        ****   DBENCH_START();
 646:poly.c        **** 
 647:poly.c        ****   for(i = 0; i < N/4; ++i) {
 2594              		.loc 1 647 9
 2595 000a 0023     		movs	r3, #0
 2596 000c FB60     		str	r3, [r7, #12]
 2597              		.loc 1 647 3
 2598 000e 6FE0     		b	.L84
 2599              	.L85:
 648:poly.c        ****     r[5*i+0] = (a->coeffs[4*i+0] >> 0);
 2600              		.loc 1 648 30 discriminator 3
 2601 0010 FB68     		ldr	r3, [r7, #12]
 2602 0012 9A00     		lsls	r2, r3, #2
 2603              		.loc 1 648 34 discriminator 3
 2604 0014 3B68     		ldr	r3, [r7]
 2605 0016 53F82210 		ldr	r1, [r3, r2, lsl #2]
 2606              		.loc 1 648 8 discriminator 3
 2607 001a FA68     		ldr	r2, [r7, #12]
 2608 001c 1346     		mov	r3, r2
 2609 001e 9B00     		lsls	r3, r3, #2
 2610 0020 1344     		add	r3, r3, r2
 2611              		.loc 1 648 6 discriminator 3
 2612 0022 7A68     		ldr	r2, [r7, #4]
 2613 0024 1344     		add	r3, r3, r2
 2614              		.loc 1 648 14 discriminator 3
 2615 0026 CAB2     		uxtb	r2, r1
 2616 0028 1A70     		strb	r2, [r3]
 649:poly.c        ****     r[5*i+1] = (a->coeffs[4*i+0] >> 8) | (a->coeffs[4*i+1] << 2);
 2617              		.loc 1 649 30 discriminator 3
 2618 002a FB68     		ldr	r3, [r7, #12]
 2619 002c 9A00     		lsls	r2, r3, #2
 2620              		.loc 1 649 26 discriminator 3
 2621 002e 3B68     		ldr	r3, [r7]
 2622 0030 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2623              		.loc 1 649 34 discriminator 3
 2624 0034 1B12     		asrs	r3, r3, #8
 2625              		.loc 1 649 40 discriminator 3
 2626 0036 5AB2     		sxtb	r2, r3
 2627              		.loc 1 649 54 discriminator 3
 2628 0038 FB68     		ldr	r3, [r7, #12]
 2629 003a 9B00     		lsls	r3, r3, #2
 2630              		.loc 1 649 56 discriminator 3
 2631 003c 591C     		adds	r1, r3, #1
 2632              		.loc 1 649 52 discriminator 3
 2633 003e 3B68     		ldr	r3, [r7]
 2634 0040 53F82130 		ldr	r3, [r3, r1, lsl #2]
 2635              		.loc 1 649 60 discriminator 3
 2636 0044 9B00     		lsls	r3, r3, #2
 2637              		.loc 1 649 40 discriminator 3
 2638 0046 5BB2     		sxtb	r3, r3
 2639 0048 1343     		orrs	r3, r3, r2
 2640 004a 59B2     		sxtb	r1, r3
 2641              		.loc 1 649 8 discriminator 3
 2642 004c FA68     		ldr	r2, [r7, #12]
 2643 004e 1346     		mov	r3, r2
 2644 0050 9B00     		lsls	r3, r3, #2
 2645 0052 1344     		add	r3, r3, r2
 2646              		.loc 1 649 6 discriminator 3
 2647 0054 0133     		adds	r3, r3, #1
 2648 0056 7A68     		ldr	r2, [r7, #4]
 2649 0058 1344     		add	r3, r3, r2
 2650              		.loc 1 649 40 discriminator 3
 2651 005a CAB2     		uxtb	r2, r1
 2652              		.loc 1 649 14 discriminator 3
 2653 005c 1A70     		strb	r2, [r3]
 650:poly.c        ****     r[5*i+2] = (a->coeffs[4*i+1] >> 6) | (a->coeffs[4*i+2] << 4);
 2654              		.loc 1 650 28 discriminator 3
 2655 005e FB68     		ldr	r3, [r7, #12]
 2656 0060 9B00     		lsls	r3, r3, #2
 2657              		.loc 1 650 30 discriminator 3
 2658 0062 5A1C     		adds	r2, r3, #1
 2659              		.loc 1 650 26 discriminator 3
 2660 0064 3B68     		ldr	r3, [r7]
 2661 0066 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2662              		.loc 1 650 34 discriminator 3
 2663 006a 9B11     		asrs	r3, r3, #6
 2664              		.loc 1 650 40 discriminator 3
 2665 006c 5AB2     		sxtb	r2, r3
 2666              		.loc 1 650 54 discriminator 3
 2667 006e FB68     		ldr	r3, [r7, #12]
 2668 0070 9B00     		lsls	r3, r3, #2
 2669              		.loc 1 650 56 discriminator 3
 2670 0072 991C     		adds	r1, r3, #2
 2671              		.loc 1 650 52 discriminator 3
 2672 0074 3B68     		ldr	r3, [r7]
 2673 0076 53F82130 		ldr	r3, [r3, r1, lsl #2]
 2674              		.loc 1 650 60 discriminator 3
 2675 007a 1B01     		lsls	r3, r3, #4
 2676              		.loc 1 650 40 discriminator 3
 2677 007c 5BB2     		sxtb	r3, r3
 2678 007e 1343     		orrs	r3, r3, r2
 2679 0080 59B2     		sxtb	r1, r3
 2680              		.loc 1 650 8 discriminator 3
 2681 0082 FA68     		ldr	r2, [r7, #12]
 2682 0084 1346     		mov	r3, r2
 2683 0086 9B00     		lsls	r3, r3, #2
 2684 0088 1344     		add	r3, r3, r2
 2685              		.loc 1 650 6 discriminator 3
 2686 008a 0233     		adds	r3, r3, #2
 2687 008c 7A68     		ldr	r2, [r7, #4]
 2688 008e 1344     		add	r3, r3, r2
 2689              		.loc 1 650 40 discriminator 3
 2690 0090 CAB2     		uxtb	r2, r1
 2691              		.loc 1 650 14 discriminator 3
 2692 0092 1A70     		strb	r2, [r3]
 651:poly.c        ****     r[5*i+3] = (a->coeffs[4*i+2] >> 4) | (a->coeffs[4*i+3] << 6);
 2693              		.loc 1 651 28 discriminator 3
 2694 0094 FB68     		ldr	r3, [r7, #12]
 2695 0096 9B00     		lsls	r3, r3, #2
 2696              		.loc 1 651 30 discriminator 3
 2697 0098 9A1C     		adds	r2, r3, #2
 2698              		.loc 1 651 26 discriminator 3
 2699 009a 3B68     		ldr	r3, [r7]
 2700 009c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2701              		.loc 1 651 34 discriminator 3
 2702 00a0 1B11     		asrs	r3, r3, #4
 2703              		.loc 1 651 40 discriminator 3
 2704 00a2 5AB2     		sxtb	r2, r3
 2705              		.loc 1 651 54 discriminator 3
 2706 00a4 FB68     		ldr	r3, [r7, #12]
 2707 00a6 9B00     		lsls	r3, r3, #2
 2708              		.loc 1 651 56 discriminator 3
 2709 00a8 D91C     		adds	r1, r3, #3
 2710              		.loc 1 651 52 discriminator 3
 2711 00aa 3B68     		ldr	r3, [r7]
 2712 00ac 53F82130 		ldr	r3, [r3, r1, lsl #2]
 2713              		.loc 1 651 60 discriminator 3
 2714 00b0 9B01     		lsls	r3, r3, #6
 2715              		.loc 1 651 40 discriminator 3
 2716 00b2 5BB2     		sxtb	r3, r3
 2717 00b4 1343     		orrs	r3, r3, r2
 2718 00b6 59B2     		sxtb	r1, r3
 2719              		.loc 1 651 8 discriminator 3
 2720 00b8 FA68     		ldr	r2, [r7, #12]
 2721 00ba 1346     		mov	r3, r2
 2722 00bc 9B00     		lsls	r3, r3, #2
 2723 00be 1344     		add	r3, r3, r2
 2724              		.loc 1 651 6 discriminator 3
 2725 00c0 0333     		adds	r3, r3, #3
 2726 00c2 7A68     		ldr	r2, [r7, #4]
 2727 00c4 1344     		add	r3, r3, r2
 2728              		.loc 1 651 40 discriminator 3
 2729 00c6 CAB2     		uxtb	r2, r1
 2730              		.loc 1 651 14 discriminator 3
 2731 00c8 1A70     		strb	r2, [r3]
 652:poly.c        ****     r[5*i+4] = (a->coeffs[4*i+3] >> 2);
 2732              		.loc 1 652 28 discriminator 3
 2733 00ca FB68     		ldr	r3, [r7, #12]
 2734 00cc 9B00     		lsls	r3, r3, #2
 2735              		.loc 1 652 30 discriminator 3
 2736 00ce DA1C     		adds	r2, r3, #3
 2737              		.loc 1 652 26 discriminator 3
 2738 00d0 3B68     		ldr	r3, [r7]
 2739 00d2 53F82230 		ldr	r3, [r3, r2, lsl #2]
 2740              		.loc 1 652 34 discriminator 3
 2741 00d6 9910     		asrs	r1, r3, #2
 2742              		.loc 1 652 8 discriminator 3
 2743 00d8 FA68     		ldr	r2, [r7, #12]
 2744 00da 1346     		mov	r3, r2
 2745 00dc 9B00     		lsls	r3, r3, #2
 2746 00de 1344     		add	r3, r3, r2
 2747              		.loc 1 652 6 discriminator 3
 2748 00e0 0433     		adds	r3, r3, #4
 2749 00e2 7A68     		ldr	r2, [r7, #4]
 2750 00e4 1344     		add	r3, r3, r2
 2751              		.loc 1 652 14 discriminator 3
 2752 00e6 CAB2     		uxtb	r2, r1
 2753 00e8 1A70     		strb	r2, [r3]
 647:poly.c        ****     r[5*i+0] = (a->coeffs[4*i+0] >> 0);
 2754              		.loc 1 647 23 discriminator 3
 2755 00ea FB68     		ldr	r3, [r7, #12]
 2756 00ec 0133     		adds	r3, r3, #1
 2757 00ee FB60     		str	r3, [r7, #12]
 2758              	.L84:
 647:poly.c        ****     r[5*i+0] = (a->coeffs[4*i+0] >> 0);
 2759              		.loc 1 647 3 discriminator 1
 2760 00f0 FB68     		ldr	r3, [r7, #12]
 2761 00f2 3F2B     		cmp	r3, #63
 2762 00f4 8CD9     		bls	.L85
 653:poly.c        ****   }
 654:poly.c        **** 
 655:poly.c        ****   DBENCH_STOP(*tpack);
 656:poly.c        **** }
 2763              		.loc 1 656 1
 2764 00f6 00BF     		nop
 2765 00f8 00BF     		nop
 2766 00fa 1437     		adds	r7, r7, #20
 2767              	.LCFI121:
 2768              		.cfi_def_cfa_offset 4
 2769 00fc BD46     		mov	sp, r7
 2770              	.LCFI122:
 2771              		.cfi_def_cfa_register 13
 2772              		@ sp needed
 2773 00fe 80BC     		pop	{r7}
 2774              	.LCFI123:
 2775              		.cfi_restore 7
 2776              		.cfi_def_cfa_offset 0
 2777 0100 7047     		bx	lr
 2778              		.cfi_endproc
 2779              	.LFE22:
 2781              		.section	.text.pqcrystals_dilithium2_ref_polyt1_unpack,"ax",%progbits
 2782              		.align	1
 2783              		.global	pqcrystals_dilithium2_ref_polyt1_unpack
 2784              		.syntax unified
 2785              		.thumb
 2786              		.thumb_func
 2787              		.fpu softvfp
 2789              	pqcrystals_dilithium2_ref_polyt1_unpack:
 2790              	.LFB23:
 657:poly.c        **** 
 658:poly.c        **** /*************************************************
 659:poly.c        **** * Name:        polyt1_unpack
 660:poly.c        **** *
 661:poly.c        **** * Description: Unpack polynomial t1 with 10-bit coefficients.
 662:poly.c        **** *              Output coefficients are standard representatives.
 663:poly.c        **** *
 664:poly.c        **** * Arguments:   - poly *r: pointer to output polynomial
 665:poly.c        **** *              - const uint8_t *a: byte array with bit-packed polynomial
 666:poly.c        **** **************************************************/
 667:poly.c        **** void polyt1_unpack(poly *r, const uint8_t *a) {
 2791              		.loc 1 667 47
 2792              		.cfi_startproc
 2793              		@ args = 0, pretend = 0, frame = 16
 2794              		@ frame_needed = 1, uses_anonymous_args = 0
 2795              		@ link register save eliminated.
 2796 0000 80B4     		push	{r7}
 2797              	.LCFI124:
 2798              		.cfi_def_cfa_offset 4
 2799              		.cfi_offset 7, -4
 2800 0002 85B0     		sub	sp, sp, #20
 2801              	.LCFI125:
 2802              		.cfi_def_cfa_offset 24
 2803 0004 00AF     		add	r7, sp, #0
 2804              	.LCFI126:
 2805              		.cfi_def_cfa_register 7
 2806 0006 7860     		str	r0, [r7, #4]
 2807 0008 3960     		str	r1, [r7]
 668:poly.c        ****   unsigned int i;
 669:poly.c        ****   DBENCH_START();
 670:poly.c        **** 
 671:poly.c        ****   for(i = 0; i < N/4; ++i) {
 2808              		.loc 1 671 9
 2809 000a 0023     		movs	r3, #0
 2810 000c FB60     		str	r3, [r7, #12]
 2811              		.loc 1 671 3
 2812 000e 76E0     		b	.L87
 2813              	.L88:
 672:poly.c        ****     r->coeffs[4*i+0] = ((a[5*i+0] >> 0) | ((uint32_t)a[5*i+1] << 8)) & 0x3FF;
 2814              		.loc 1 672 29 discriminator 3
 2815 0010 FA68     		ldr	r2, [r7, #12]
 2816 0012 1346     		mov	r3, r2
 2817 0014 9B00     		lsls	r3, r3, #2
 2818 0016 1344     		add	r3, r3, r2
 2819              		.loc 1 672 27 discriminator 3
 2820 0018 3A68     		ldr	r2, [r7]
 2821 001a 1344     		add	r3, r3, r2
 2822 001c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2823              		.loc 1 672 35 discriminator 3
 2824 001e 1946     		mov	r1, r3
 2825              		.loc 1 672 57 discriminator 3
 2826 0020 FA68     		ldr	r2, [r7, #12]
 2827 0022 1346     		mov	r3, r2
 2828 0024 9B00     		lsls	r3, r3, #2
 2829 0026 1344     		add	r3, r3, r2
 2830              		.loc 1 672 55 discriminator 3
 2831 0028 0133     		adds	r3, r3, #1
 2832 002a 3A68     		ldr	r2, [r7]
 2833 002c 1344     		add	r3, r3, r2
 2834 002e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2835              		.loc 1 672 63 discriminator 3
 2836 0030 1B02     		lsls	r3, r3, #8
 2837              		.loc 1 672 41 discriminator 3
 2838 0032 0B43     		orrs	r3, r3, r1
 2839              		.loc 1 672 70 discriminator 3
 2840 0034 1946     		mov	r1, r3
 2841              		.loc 1 672 18 discriminator 3
 2842 0036 FB68     		ldr	r3, [r7, #12]
 2843 0038 9A00     		lsls	r2, r3, #2
 2844              		.loc 1 672 70 discriminator 3
 2845 003a C1F30901 		ubfx	r1, r1, #0, #10
 2846              		.loc 1 672 22 discriminator 3
 2847 003e 7B68     		ldr	r3, [r7, #4]
 2848 0040 43F82210 		str	r1, [r3, r2, lsl #2]
 673:poly.c        ****     r->coeffs[4*i+1] = ((a[5*i+1] >> 2) | ((uint32_t)a[5*i+2] << 6)) & 0x3FF;
 2849              		.loc 1 673 29 discriminator 3
 2850 0044 FA68     		ldr	r2, [r7, #12]
 2851 0046 1346     		mov	r3, r2
 2852 0048 9B00     		lsls	r3, r3, #2
 2853 004a 1344     		add	r3, r3, r2
 2854              		.loc 1 673 27 discriminator 3
 2855 004c 0133     		adds	r3, r3, #1
 2856 004e 3A68     		ldr	r2, [r7]
 2857 0050 1344     		add	r3, r3, r2
 2858 0052 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2859              		.loc 1 673 35 discriminator 3
 2860 0054 9B08     		lsrs	r3, r3, #2
 2861 0056 DBB2     		uxtb	r3, r3
 2862 0058 1946     		mov	r1, r3
 2863              		.loc 1 673 57 discriminator 3
 2864 005a FA68     		ldr	r2, [r7, #12]
 2865 005c 1346     		mov	r3, r2
 2866 005e 9B00     		lsls	r3, r3, #2
 2867 0060 1344     		add	r3, r3, r2
 2868              		.loc 1 673 55 discriminator 3
 2869 0062 0233     		adds	r3, r3, #2
 2870 0064 3A68     		ldr	r2, [r7]
 2871 0066 1344     		add	r3, r3, r2
 2872 0068 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2873              		.loc 1 673 63 discriminator 3
 2874 006a 9B01     		lsls	r3, r3, #6
 2875              		.loc 1 673 41 discriminator 3
 2876 006c 0B43     		orrs	r3, r3, r1
 2877              		.loc 1 673 70 discriminator 3
 2878 006e 1946     		mov	r1, r3
 2879              		.loc 1 673 16 discriminator 3
 2880 0070 FB68     		ldr	r3, [r7, #12]
 2881 0072 9B00     		lsls	r3, r3, #2
 2882              		.loc 1 673 18 discriminator 3
 2883 0074 5A1C     		adds	r2, r3, #1
 2884              		.loc 1 673 70 discriminator 3
 2885 0076 C1F30901 		ubfx	r1, r1, #0, #10
 2886              		.loc 1 673 22 discriminator 3
 2887 007a 7B68     		ldr	r3, [r7, #4]
 2888 007c 43F82210 		str	r1, [r3, r2, lsl #2]
 674:poly.c        ****     r->coeffs[4*i+2] = ((a[5*i+2] >> 4) | ((uint32_t)a[5*i+3] << 4)) & 0x3FF;
 2889              		.loc 1 674 29 discriminator 3
 2890 0080 FA68     		ldr	r2, [r7, #12]
 2891 0082 1346     		mov	r3, r2
 2892 0084 9B00     		lsls	r3, r3, #2
 2893 0086 1344     		add	r3, r3, r2
 2894              		.loc 1 674 27 discriminator 3
 2895 0088 0233     		adds	r3, r3, #2
 2896 008a 3A68     		ldr	r2, [r7]
 2897 008c 1344     		add	r3, r3, r2
 2898 008e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2899              		.loc 1 674 35 discriminator 3
 2900 0090 1B09     		lsrs	r3, r3, #4
 2901 0092 DBB2     		uxtb	r3, r3
 2902 0094 1946     		mov	r1, r3
 2903              		.loc 1 674 57 discriminator 3
 2904 0096 FA68     		ldr	r2, [r7, #12]
 2905 0098 1346     		mov	r3, r2
 2906 009a 9B00     		lsls	r3, r3, #2
 2907 009c 1344     		add	r3, r3, r2
 2908              		.loc 1 674 55 discriminator 3
 2909 009e 0333     		adds	r3, r3, #3
 2910 00a0 3A68     		ldr	r2, [r7]
 2911 00a2 1344     		add	r3, r3, r2
 2912 00a4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2913              		.loc 1 674 63 discriminator 3
 2914 00a6 1B01     		lsls	r3, r3, #4
 2915              		.loc 1 674 41 discriminator 3
 2916 00a8 0B43     		orrs	r3, r3, r1
 2917              		.loc 1 674 70 discriminator 3
 2918 00aa 1946     		mov	r1, r3
 2919              		.loc 1 674 16 discriminator 3
 2920 00ac FB68     		ldr	r3, [r7, #12]
 2921 00ae 9B00     		lsls	r3, r3, #2
 2922              		.loc 1 674 18 discriminator 3
 2923 00b0 9A1C     		adds	r2, r3, #2
 2924              		.loc 1 674 70 discriminator 3
 2925 00b2 C1F30901 		ubfx	r1, r1, #0, #10
 2926              		.loc 1 674 22 discriminator 3
 2927 00b6 7B68     		ldr	r3, [r7, #4]
 2928 00b8 43F82210 		str	r1, [r3, r2, lsl #2]
 675:poly.c        ****     r->coeffs[4*i+3] = ((a[5*i+3] >> 6) | ((uint32_t)a[5*i+4] << 2)) & 0x3FF;
 2929              		.loc 1 675 29 discriminator 3
 2930 00bc FA68     		ldr	r2, [r7, #12]
 2931 00be 1346     		mov	r3, r2
 2932 00c0 9B00     		lsls	r3, r3, #2
 2933 00c2 1344     		add	r3, r3, r2
 2934              		.loc 1 675 27 discriminator 3
 2935 00c4 0333     		adds	r3, r3, #3
 2936 00c6 3A68     		ldr	r2, [r7]
 2937 00c8 1344     		add	r3, r3, r2
 2938 00ca 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2939              		.loc 1 675 35 discriminator 3
 2940 00cc 9B09     		lsrs	r3, r3, #6
 2941 00ce DBB2     		uxtb	r3, r3
 2942 00d0 1946     		mov	r1, r3
 2943              		.loc 1 675 57 discriminator 3
 2944 00d2 FA68     		ldr	r2, [r7, #12]
 2945 00d4 1346     		mov	r3, r2
 2946 00d6 9B00     		lsls	r3, r3, #2
 2947 00d8 1344     		add	r3, r3, r2
 2948              		.loc 1 675 55 discriminator 3
 2949 00da 0433     		adds	r3, r3, #4
 2950 00dc 3A68     		ldr	r2, [r7]
 2951 00de 1344     		add	r3, r3, r2
 2952 00e0 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2953              		.loc 1 675 63 discriminator 3
 2954 00e2 9B00     		lsls	r3, r3, #2
 2955              		.loc 1 675 41 discriminator 3
 2956 00e4 0B43     		orrs	r3, r3, r1
 2957              		.loc 1 675 70 discriminator 3
 2958 00e6 1946     		mov	r1, r3
 2959              		.loc 1 675 16 discriminator 3
 2960 00e8 FB68     		ldr	r3, [r7, #12]
 2961 00ea 9B00     		lsls	r3, r3, #2
 2962              		.loc 1 675 18 discriminator 3
 2963 00ec DA1C     		adds	r2, r3, #3
 2964              		.loc 1 675 70 discriminator 3
 2965 00ee C1F30901 		ubfx	r1, r1, #0, #10
 2966              		.loc 1 675 22 discriminator 3
 2967 00f2 7B68     		ldr	r3, [r7, #4]
 2968 00f4 43F82210 		str	r1, [r3, r2, lsl #2]
 671:poly.c        ****     r->coeffs[4*i+0] = ((a[5*i+0] >> 0) | ((uint32_t)a[5*i+1] << 8)) & 0x3FF;
 2969              		.loc 1 671 23 discriminator 3
 2970 00f8 FB68     		ldr	r3, [r7, #12]
 2971 00fa 0133     		adds	r3, r3, #1
 2972 00fc FB60     		str	r3, [r7, #12]
 2973              	.L87:
 671:poly.c        ****     r->coeffs[4*i+0] = ((a[5*i+0] >> 0) | ((uint32_t)a[5*i+1] << 8)) & 0x3FF;
 2974              		.loc 1 671 3 discriminator 1
 2975 00fe FB68     		ldr	r3, [r7, #12]
 2976 0100 3F2B     		cmp	r3, #63
 2977 0102 85D9     		bls	.L88
 676:poly.c        ****   }
 677:poly.c        **** 
 678:poly.c        ****   DBENCH_STOP(*tpack);
 679:poly.c        **** }
 2978              		.loc 1 679 1
 2979 0104 00BF     		nop
 2980 0106 00BF     		nop
 2981 0108 1437     		adds	r7, r7, #20
 2982              	.LCFI127:
 2983              		.cfi_def_cfa_offset 4
 2984 010a BD46     		mov	sp, r7
 2985              	.LCFI128:
 2986              		.cfi_def_cfa_register 13
 2987              		@ sp needed
 2988 010c 80BC     		pop	{r7}
 2989              	.LCFI129:
 2990              		.cfi_restore 7
 2991              		.cfi_def_cfa_offset 0
 2992 010e 7047     		bx	lr
 2993              		.cfi_endproc
 2994              	.LFE23:
 2996              		.section	.text.pqcrystals_dilithium2_ref_polyt0_pack,"ax",%progbits
 2997              		.align	1
 2998              		.global	pqcrystals_dilithium2_ref_polyt0_pack
 2999              		.syntax unified
 3000              		.thumb
 3001              		.thumb_func
 3002              		.fpu softvfp
 3004              	pqcrystals_dilithium2_ref_polyt0_pack:
 3005              	.LFB24:
 680:poly.c        **** 
 681:poly.c        **** /*************************************************
 682:poly.c        **** * Name:        polyt0_pack
 683:poly.c        **** *
 684:poly.c        **** * Description: Bit-pack polynomial t0 with coefficients in ]-2^{D-1}, 2^{D-1}].
 685:poly.c        **** *
 686:poly.c        **** * Arguments:   - uint8_t *r: pointer to output byte array with at least
 687:poly.c        **** *                            POLYT0_PACKEDBYTES bytes
 688:poly.c        **** *              - const poly *a: pointer to input polynomial
 689:poly.c        **** **************************************************/
 690:poly.c        **** void polyt0_pack(uint8_t *r, const poly *a) {
 3006              		.loc 1 690 45
 3007              		.cfi_startproc
 3008              		@ args = 0, pretend = 0, frame = 48
 3009              		@ frame_needed = 1, uses_anonymous_args = 0
 3010              		@ link register save eliminated.
 3011 0000 80B4     		push	{r7}
 3012              	.LCFI130:
 3013              		.cfi_def_cfa_offset 4
 3014              		.cfi_offset 7, -4
 3015 0002 8DB0     		sub	sp, sp, #52
 3016              	.LCFI131:
 3017              		.cfi_def_cfa_offset 56
 3018 0004 00AF     		add	r7, sp, #0
 3019              	.LCFI132:
 3020              		.cfi_def_cfa_register 7
 3021 0006 7860     		str	r0, [r7, #4]
 3022 0008 3960     		str	r1, [r7]
 691:poly.c        ****   unsigned int i;
 692:poly.c        ****   uint32_t t[8];
 693:poly.c        ****   DBENCH_START();
 694:poly.c        **** 
 695:poly.c        ****   for(i = 0; i < N/8; ++i) {
 3023              		.loc 1 695 9
 3024 000a 0023     		movs	r3, #0
 3025 000c FB62     		str	r3, [r7, #44]
 3026              		.loc 1 695 3
 3027 000e ADE1     		b	.L90
 3028              	.L91:
 696:poly.c        ****     t[0] = (1 << (D-1)) - a->coeffs[8*i+0];
 3029              		.loc 1 696 40 discriminator 3
 3030 0010 FB6A     		ldr	r3, [r7, #44]
 3031 0012 DA00     		lsls	r2, r3, #3
 3032              		.loc 1 696 36 discriminator 3
 3033 0014 3B68     		ldr	r3, [r7]
 3034 0016 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3035              		.loc 1 696 25 discriminator 3
 3036 001a C3F58053 		rsb	r3, r3, #4096
 3037              		.loc 1 696 10 discriminator 3
 3038 001e FB60     		str	r3, [r7, #12]
 697:poly.c        ****     t[1] = (1 << (D-1)) - a->coeffs[8*i+1];
 3039              		.loc 1 697 38 discriminator 3
 3040 0020 FB6A     		ldr	r3, [r7, #44]
 3041 0022 DB00     		lsls	r3, r3, #3
 3042              		.loc 1 697 40 discriminator 3
 3043 0024 5A1C     		adds	r2, r3, #1
 3044              		.loc 1 697 36 discriminator 3
 3045 0026 3B68     		ldr	r3, [r7]
 3046 0028 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3047              		.loc 1 697 25 discriminator 3
 3048 002c C3F58053 		rsb	r3, r3, #4096
 3049              		.loc 1 697 10 discriminator 3
 3050 0030 3B61     		str	r3, [r7, #16]
 698:poly.c        ****     t[2] = (1 << (D-1)) - a->coeffs[8*i+2];
 3051              		.loc 1 698 38 discriminator 3
 3052 0032 FB6A     		ldr	r3, [r7, #44]
 3053 0034 DB00     		lsls	r3, r3, #3
 3054              		.loc 1 698 40 discriminator 3
 3055 0036 9A1C     		adds	r2, r3, #2
 3056              		.loc 1 698 36 discriminator 3
 3057 0038 3B68     		ldr	r3, [r7]
 3058 003a 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3059              		.loc 1 698 25 discriminator 3
 3060 003e C3F58053 		rsb	r3, r3, #4096
 3061              		.loc 1 698 10 discriminator 3
 3062 0042 7B61     		str	r3, [r7, #20]
 699:poly.c        ****     t[3] = (1 << (D-1)) - a->coeffs[8*i+3];
 3063              		.loc 1 699 38 discriminator 3
 3064 0044 FB6A     		ldr	r3, [r7, #44]
 3065 0046 DB00     		lsls	r3, r3, #3
 3066              		.loc 1 699 40 discriminator 3
 3067 0048 DA1C     		adds	r2, r3, #3
 3068              		.loc 1 699 36 discriminator 3
 3069 004a 3B68     		ldr	r3, [r7]
 3070 004c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3071              		.loc 1 699 25 discriminator 3
 3072 0050 C3F58053 		rsb	r3, r3, #4096
 3073              		.loc 1 699 10 discriminator 3
 3074 0054 BB61     		str	r3, [r7, #24]
 700:poly.c        ****     t[4] = (1 << (D-1)) - a->coeffs[8*i+4];
 3075              		.loc 1 700 38 discriminator 3
 3076 0056 FB6A     		ldr	r3, [r7, #44]
 3077 0058 DB00     		lsls	r3, r3, #3
 3078              		.loc 1 700 40 discriminator 3
 3079 005a 1A1D     		adds	r2, r3, #4
 3080              		.loc 1 700 36 discriminator 3
 3081 005c 3B68     		ldr	r3, [r7]
 3082 005e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3083              		.loc 1 700 25 discriminator 3
 3084 0062 C3F58053 		rsb	r3, r3, #4096
 3085              		.loc 1 700 10 discriminator 3
 3086 0066 FB61     		str	r3, [r7, #28]
 701:poly.c        ****     t[5] = (1 << (D-1)) - a->coeffs[8*i+5];
 3087              		.loc 1 701 38 discriminator 3
 3088 0068 FB6A     		ldr	r3, [r7, #44]
 3089 006a DB00     		lsls	r3, r3, #3
 3090              		.loc 1 701 40 discriminator 3
 3091 006c 5A1D     		adds	r2, r3, #5
 3092              		.loc 1 701 36 discriminator 3
 3093 006e 3B68     		ldr	r3, [r7]
 3094 0070 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3095              		.loc 1 701 25 discriminator 3
 3096 0074 C3F58053 		rsb	r3, r3, #4096
 3097              		.loc 1 701 10 discriminator 3
 3098 0078 3B62     		str	r3, [r7, #32]
 702:poly.c        ****     t[6] = (1 << (D-1)) - a->coeffs[8*i+6];
 3099              		.loc 1 702 38 discriminator 3
 3100 007a FB6A     		ldr	r3, [r7, #44]
 3101 007c DB00     		lsls	r3, r3, #3
 3102              		.loc 1 702 40 discriminator 3
 3103 007e 9A1D     		adds	r2, r3, #6
 3104              		.loc 1 702 36 discriminator 3
 3105 0080 3B68     		ldr	r3, [r7]
 3106 0082 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3107              		.loc 1 702 25 discriminator 3
 3108 0086 C3F58053 		rsb	r3, r3, #4096
 3109              		.loc 1 702 10 discriminator 3
 3110 008a 7B62     		str	r3, [r7, #36]
 703:poly.c        ****     t[7] = (1 << (D-1)) - a->coeffs[8*i+7];
 3111              		.loc 1 703 38 discriminator 3
 3112 008c FB6A     		ldr	r3, [r7, #44]
 3113 008e DB00     		lsls	r3, r3, #3
 3114              		.loc 1 703 40 discriminator 3
 3115 0090 DA1D     		adds	r2, r3, #7
 3116              		.loc 1 703 36 discriminator 3
 3117 0092 3B68     		ldr	r3, [r7]
 3118 0094 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3119              		.loc 1 703 25 discriminator 3
 3120 0098 C3F58053 		rsb	r3, r3, #4096
 3121              		.loc 1 703 10 discriminator 3
 3122 009c BB62     		str	r3, [r7, #40]
 704:poly.c        **** 
 705:poly.c        ****     r[13*i+ 0]  =  t[0];
 3123              		.loc 1 705 21 discriminator 3
 3124 009e F968     		ldr	r1, [r7, #12]
 3125              		.loc 1 705 9 discriminator 3
 3126 00a0 FA6A     		ldr	r2, [r7, #44]
 3127 00a2 1346     		mov	r3, r2
 3128 00a4 5B00     		lsls	r3, r3, #1
 3129 00a6 1344     		add	r3, r3, r2
 3130 00a8 9B00     		lsls	r3, r3, #2
 3131 00aa 1344     		add	r3, r3, r2
 3132              		.loc 1 705 6 discriminator 3
 3133 00ac 7A68     		ldr	r2, [r7, #4]
 3134 00ae 1344     		add	r3, r3, r2
 3135              		.loc 1 705 17 discriminator 3
 3136 00b0 CAB2     		uxtb	r2, r1
 3137 00b2 1A70     		strb	r2, [r3]
 706:poly.c        ****     r[13*i+ 1]  =  t[0] >>  8;
 3138              		.loc 1 706 21 discriminator 3
 3139 00b4 FB68     		ldr	r3, [r7, #12]
 3140              		.loc 1 706 25 discriminator 3
 3141 00b6 190A     		lsrs	r1, r3, #8
 3142              		.loc 1 706 9 discriminator 3
 3143 00b8 FA6A     		ldr	r2, [r7, #44]
 3144 00ba 1346     		mov	r3, r2
 3145 00bc 5B00     		lsls	r3, r3, #1
 3146 00be 1344     		add	r3, r3, r2
 3147 00c0 9B00     		lsls	r3, r3, #2
 3148 00c2 1344     		add	r3, r3, r2
 3149              		.loc 1 706 6 discriminator 3
 3150 00c4 0133     		adds	r3, r3, #1
 3151 00c6 7A68     		ldr	r2, [r7, #4]
 3152 00c8 1344     		add	r3, r3, r2
 3153              		.loc 1 706 17 discriminator 3
 3154 00ca CAB2     		uxtb	r2, r1
 3155 00cc 1A70     		strb	r2, [r3]
 707:poly.c        ****     r[13*i+ 1] |=  t[1] <<  5;
 3156              		.loc 1 707 16 discriminator 3
 3157 00ce FA6A     		ldr	r2, [r7, #44]
 3158 00d0 1346     		mov	r3, r2
 3159 00d2 5B00     		lsls	r3, r3, #1
 3160 00d4 1344     		add	r3, r3, r2
 3161 00d6 9B00     		lsls	r3, r3, #2
 3162 00d8 1344     		add	r3, r3, r2
 3163 00da 0133     		adds	r3, r3, #1
 3164 00dc 7A68     		ldr	r2, [r7, #4]
 3165 00de 1344     		add	r3, r3, r2
 3166 00e0 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 3167              		.loc 1 707 21 discriminator 3
 3168 00e2 3B69     		ldr	r3, [r7, #16]
 3169              		.loc 1 707 25 discriminator 3
 3170 00e4 DBB2     		uxtb	r3, r3
 3171 00e6 5B01     		lsls	r3, r3, #5
 3172 00e8 D9B2     		uxtb	r1, r3
 3173              		.loc 1 707 16 discriminator 3
 3174 00ea FA6A     		ldr	r2, [r7, #44]
 3175 00ec 1346     		mov	r3, r2
 3176 00ee 5B00     		lsls	r3, r3, #1
 3177 00f0 1344     		add	r3, r3, r2
 3178 00f2 9B00     		lsls	r3, r3, #2
 3179 00f4 1344     		add	r3, r3, r2
 3180 00f6 0133     		adds	r3, r3, #1
 3181 00f8 7A68     		ldr	r2, [r7, #4]
 3182 00fa 1344     		add	r3, r3, r2
 3183 00fc 40EA0102 		orr	r2, r0, r1
 3184 0100 D2B2     		uxtb	r2, r2
 3185 0102 1A70     		strb	r2, [r3]
 708:poly.c        ****     r[13*i+ 2]  =  t[1] >>  3;
 3186              		.loc 1 708 21 discriminator 3
 3187 0104 3B69     		ldr	r3, [r7, #16]
 3188              		.loc 1 708 25 discriminator 3
 3189 0106 D908     		lsrs	r1, r3, #3
 3190              		.loc 1 708 9 discriminator 3
 3191 0108 FA6A     		ldr	r2, [r7, #44]
 3192 010a 1346     		mov	r3, r2
 3193 010c 5B00     		lsls	r3, r3, #1
 3194 010e 1344     		add	r3, r3, r2
 3195 0110 9B00     		lsls	r3, r3, #2
 3196 0112 1344     		add	r3, r3, r2
 3197              		.loc 1 708 6 discriminator 3
 3198 0114 0233     		adds	r3, r3, #2
 3199 0116 7A68     		ldr	r2, [r7, #4]
 3200 0118 1344     		add	r3, r3, r2
 3201              		.loc 1 708 17 discriminator 3
 3202 011a CAB2     		uxtb	r2, r1
 3203 011c 1A70     		strb	r2, [r3]
 709:poly.c        ****     r[13*i+ 3]  =  t[1] >> 11;
 3204              		.loc 1 709 21 discriminator 3
 3205 011e 3B69     		ldr	r3, [r7, #16]
 3206              		.loc 1 709 25 discriminator 3
 3207 0120 D90A     		lsrs	r1, r3, #11
 3208              		.loc 1 709 9 discriminator 3
 3209 0122 FA6A     		ldr	r2, [r7, #44]
 3210 0124 1346     		mov	r3, r2
 3211 0126 5B00     		lsls	r3, r3, #1
 3212 0128 1344     		add	r3, r3, r2
 3213 012a 9B00     		lsls	r3, r3, #2
 3214 012c 1344     		add	r3, r3, r2
 3215              		.loc 1 709 6 discriminator 3
 3216 012e 0333     		adds	r3, r3, #3
 3217 0130 7A68     		ldr	r2, [r7, #4]
 3218 0132 1344     		add	r3, r3, r2
 3219              		.loc 1 709 17 discriminator 3
 3220 0134 CAB2     		uxtb	r2, r1
 3221 0136 1A70     		strb	r2, [r3]
 710:poly.c        ****     r[13*i+ 3] |=  t[2] <<  2;
 3222              		.loc 1 710 16 discriminator 3
 3223 0138 FA6A     		ldr	r2, [r7, #44]
 3224 013a 1346     		mov	r3, r2
 3225 013c 5B00     		lsls	r3, r3, #1
 3226 013e 1344     		add	r3, r3, r2
 3227 0140 9B00     		lsls	r3, r3, #2
 3228 0142 1344     		add	r3, r3, r2
 3229 0144 0333     		adds	r3, r3, #3
 3230 0146 7A68     		ldr	r2, [r7, #4]
 3231 0148 1344     		add	r3, r3, r2
 3232 014a 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 3233              		.loc 1 710 21 discriminator 3
 3234 014c 7B69     		ldr	r3, [r7, #20]
 3235              		.loc 1 710 25 discriminator 3
 3236 014e DBB2     		uxtb	r3, r3
 3237 0150 9B00     		lsls	r3, r3, #2
 3238 0152 D9B2     		uxtb	r1, r3
 3239              		.loc 1 710 16 discriminator 3
 3240 0154 FA6A     		ldr	r2, [r7, #44]
 3241 0156 1346     		mov	r3, r2
 3242 0158 5B00     		lsls	r3, r3, #1
 3243 015a 1344     		add	r3, r3, r2
 3244 015c 9B00     		lsls	r3, r3, #2
 3245 015e 1344     		add	r3, r3, r2
 3246 0160 0333     		adds	r3, r3, #3
 3247 0162 7A68     		ldr	r2, [r7, #4]
 3248 0164 1344     		add	r3, r3, r2
 3249 0166 40EA0102 		orr	r2, r0, r1
 3250 016a D2B2     		uxtb	r2, r2
 3251 016c 1A70     		strb	r2, [r3]
 711:poly.c        ****     r[13*i+ 4]  =  t[2] >>  6;
 3252              		.loc 1 711 21 discriminator 3
 3253 016e 7B69     		ldr	r3, [r7, #20]
 3254              		.loc 1 711 25 discriminator 3
 3255 0170 9909     		lsrs	r1, r3, #6
 3256              		.loc 1 711 9 discriminator 3
 3257 0172 FA6A     		ldr	r2, [r7, #44]
 3258 0174 1346     		mov	r3, r2
 3259 0176 5B00     		lsls	r3, r3, #1
 3260 0178 1344     		add	r3, r3, r2
 3261 017a 9B00     		lsls	r3, r3, #2
 3262 017c 1344     		add	r3, r3, r2
 3263              		.loc 1 711 6 discriminator 3
 3264 017e 0433     		adds	r3, r3, #4
 3265 0180 7A68     		ldr	r2, [r7, #4]
 3266 0182 1344     		add	r3, r3, r2
 3267              		.loc 1 711 17 discriminator 3
 3268 0184 CAB2     		uxtb	r2, r1
 3269 0186 1A70     		strb	r2, [r3]
 712:poly.c        ****     r[13*i+ 4] |=  t[3] <<  7;
 3270              		.loc 1 712 16 discriminator 3
 3271 0188 FA6A     		ldr	r2, [r7, #44]
 3272 018a 1346     		mov	r3, r2
 3273 018c 5B00     		lsls	r3, r3, #1
 3274 018e 1344     		add	r3, r3, r2
 3275 0190 9B00     		lsls	r3, r3, #2
 3276 0192 1344     		add	r3, r3, r2
 3277 0194 0433     		adds	r3, r3, #4
 3278 0196 7A68     		ldr	r2, [r7, #4]
 3279 0198 1344     		add	r3, r3, r2
 3280 019a 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 3281              		.loc 1 712 21 discriminator 3
 3282 019c BB69     		ldr	r3, [r7, #24]
 3283              		.loc 1 712 25 discriminator 3
 3284 019e DBB2     		uxtb	r3, r3
 3285 01a0 DB01     		lsls	r3, r3, #7
 3286 01a2 D9B2     		uxtb	r1, r3
 3287              		.loc 1 712 16 discriminator 3
 3288 01a4 FA6A     		ldr	r2, [r7, #44]
 3289 01a6 1346     		mov	r3, r2
 3290 01a8 5B00     		lsls	r3, r3, #1
 3291 01aa 1344     		add	r3, r3, r2
 3292 01ac 9B00     		lsls	r3, r3, #2
 3293 01ae 1344     		add	r3, r3, r2
 3294 01b0 0433     		adds	r3, r3, #4
 3295 01b2 7A68     		ldr	r2, [r7, #4]
 3296 01b4 1344     		add	r3, r3, r2
 3297 01b6 40EA0102 		orr	r2, r0, r1
 3298 01ba D2B2     		uxtb	r2, r2
 3299 01bc 1A70     		strb	r2, [r3]
 713:poly.c        ****     r[13*i+ 5]  =  t[3] >>  1;
 3300              		.loc 1 713 21 discriminator 3
 3301 01be BB69     		ldr	r3, [r7, #24]
 3302              		.loc 1 713 25 discriminator 3
 3303 01c0 5908     		lsrs	r1, r3, #1
 3304              		.loc 1 713 9 discriminator 3
 3305 01c2 FA6A     		ldr	r2, [r7, #44]
 3306 01c4 1346     		mov	r3, r2
 3307 01c6 5B00     		lsls	r3, r3, #1
 3308 01c8 1344     		add	r3, r3, r2
 3309 01ca 9B00     		lsls	r3, r3, #2
 3310 01cc 1344     		add	r3, r3, r2
 3311              		.loc 1 713 6 discriminator 3
 3312 01ce 0533     		adds	r3, r3, #5
 3313 01d0 7A68     		ldr	r2, [r7, #4]
 3314 01d2 1344     		add	r3, r3, r2
 3315              		.loc 1 713 17 discriminator 3
 3316 01d4 CAB2     		uxtb	r2, r1
 3317 01d6 1A70     		strb	r2, [r3]
 714:poly.c        ****     r[13*i+ 6]  =  t[3] >>  9;
 3318              		.loc 1 714 21 discriminator 3
 3319 01d8 BB69     		ldr	r3, [r7, #24]
 3320              		.loc 1 714 25 discriminator 3
 3321 01da 590A     		lsrs	r1, r3, #9
 3322              		.loc 1 714 9 discriminator 3
 3323 01dc FA6A     		ldr	r2, [r7, #44]
 3324 01de 1346     		mov	r3, r2
 3325 01e0 5B00     		lsls	r3, r3, #1
 3326 01e2 1344     		add	r3, r3, r2
 3327 01e4 9B00     		lsls	r3, r3, #2
 3328 01e6 1344     		add	r3, r3, r2
 3329              		.loc 1 714 6 discriminator 3
 3330 01e8 0633     		adds	r3, r3, #6
 3331 01ea 7A68     		ldr	r2, [r7, #4]
 3332 01ec 1344     		add	r3, r3, r2
 3333              		.loc 1 714 17 discriminator 3
 3334 01ee CAB2     		uxtb	r2, r1
 3335 01f0 1A70     		strb	r2, [r3]
 715:poly.c        ****     r[13*i+ 6] |=  t[4] <<  4;
 3336              		.loc 1 715 16 discriminator 3
 3337 01f2 FA6A     		ldr	r2, [r7, #44]
 3338 01f4 1346     		mov	r3, r2
 3339 01f6 5B00     		lsls	r3, r3, #1
 3340 01f8 1344     		add	r3, r3, r2
 3341 01fa 9B00     		lsls	r3, r3, #2
 3342 01fc 1344     		add	r3, r3, r2
 3343 01fe 0633     		adds	r3, r3, #6
 3344 0200 7A68     		ldr	r2, [r7, #4]
 3345 0202 1344     		add	r3, r3, r2
 3346 0204 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 3347              		.loc 1 715 21 discriminator 3
 3348 0206 FB69     		ldr	r3, [r7, #28]
 3349              		.loc 1 715 25 discriminator 3
 3350 0208 DBB2     		uxtb	r3, r3
 3351 020a 1B01     		lsls	r3, r3, #4
 3352 020c D9B2     		uxtb	r1, r3
 3353              		.loc 1 715 16 discriminator 3
 3354 020e FA6A     		ldr	r2, [r7, #44]
 3355 0210 1346     		mov	r3, r2
 3356 0212 5B00     		lsls	r3, r3, #1
 3357 0214 1344     		add	r3, r3, r2
 3358 0216 9B00     		lsls	r3, r3, #2
 3359 0218 1344     		add	r3, r3, r2
 3360 021a 0633     		adds	r3, r3, #6
 3361 021c 7A68     		ldr	r2, [r7, #4]
 3362 021e 1344     		add	r3, r3, r2
 3363 0220 40EA0102 		orr	r2, r0, r1
 3364 0224 D2B2     		uxtb	r2, r2
 3365 0226 1A70     		strb	r2, [r3]
 716:poly.c        ****     r[13*i+ 7]  =  t[4] >>  4;
 3366              		.loc 1 716 21 discriminator 3
 3367 0228 FB69     		ldr	r3, [r7, #28]
 3368              		.loc 1 716 25 discriminator 3
 3369 022a 1909     		lsrs	r1, r3, #4
 3370              		.loc 1 716 9 discriminator 3
 3371 022c FA6A     		ldr	r2, [r7, #44]
 3372 022e 1346     		mov	r3, r2
 3373 0230 5B00     		lsls	r3, r3, #1
 3374 0232 1344     		add	r3, r3, r2
 3375 0234 9B00     		lsls	r3, r3, #2
 3376 0236 1344     		add	r3, r3, r2
 3377              		.loc 1 716 6 discriminator 3
 3378 0238 0733     		adds	r3, r3, #7
 3379 023a 7A68     		ldr	r2, [r7, #4]
 3380 023c 1344     		add	r3, r3, r2
 3381              		.loc 1 716 17 discriminator 3
 3382 023e CAB2     		uxtb	r2, r1
 3383 0240 1A70     		strb	r2, [r3]
 717:poly.c        ****     r[13*i+ 8]  =  t[4] >> 12;
 3384              		.loc 1 717 21 discriminator 3
 3385 0242 FB69     		ldr	r3, [r7, #28]
 3386              		.loc 1 717 25 discriminator 3
 3387 0244 190B     		lsrs	r1, r3, #12
 3388              		.loc 1 717 9 discriminator 3
 3389 0246 FA6A     		ldr	r2, [r7, #44]
 3390 0248 1346     		mov	r3, r2
 3391 024a 5B00     		lsls	r3, r3, #1
 3392 024c 1344     		add	r3, r3, r2
 3393 024e 9B00     		lsls	r3, r3, #2
 3394 0250 1344     		add	r3, r3, r2
 3395              		.loc 1 717 6 discriminator 3
 3396 0252 0833     		adds	r3, r3, #8
 3397 0254 7A68     		ldr	r2, [r7, #4]
 3398 0256 1344     		add	r3, r3, r2
 3399              		.loc 1 717 17 discriminator 3
 3400 0258 CAB2     		uxtb	r2, r1
 3401 025a 1A70     		strb	r2, [r3]
 718:poly.c        ****     r[13*i+ 8] |=  t[5] <<  1;
 3402              		.loc 1 718 16 discriminator 3
 3403 025c FA6A     		ldr	r2, [r7, #44]
 3404 025e 1346     		mov	r3, r2
 3405 0260 5B00     		lsls	r3, r3, #1
 3406 0262 1344     		add	r3, r3, r2
 3407 0264 9B00     		lsls	r3, r3, #2
 3408 0266 1344     		add	r3, r3, r2
 3409 0268 0833     		adds	r3, r3, #8
 3410 026a 7A68     		ldr	r2, [r7, #4]
 3411 026c 1344     		add	r3, r3, r2
 3412 026e 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 3413              		.loc 1 718 21 discriminator 3
 3414 0270 3B6A     		ldr	r3, [r7, #32]
 3415              		.loc 1 718 25 discriminator 3
 3416 0272 DBB2     		uxtb	r3, r3
 3417 0274 5B00     		lsls	r3, r3, #1
 3418 0276 D9B2     		uxtb	r1, r3
 3419              		.loc 1 718 16 discriminator 3
 3420 0278 FA6A     		ldr	r2, [r7, #44]
 3421 027a 1346     		mov	r3, r2
 3422 027c 5B00     		lsls	r3, r3, #1
 3423 027e 1344     		add	r3, r3, r2
 3424 0280 9B00     		lsls	r3, r3, #2
 3425 0282 1344     		add	r3, r3, r2
 3426 0284 0833     		adds	r3, r3, #8
 3427 0286 7A68     		ldr	r2, [r7, #4]
 3428 0288 1344     		add	r3, r3, r2
 3429 028a 40EA0102 		orr	r2, r0, r1
 3430 028e D2B2     		uxtb	r2, r2
 3431 0290 1A70     		strb	r2, [r3]
 719:poly.c        ****     r[13*i+ 9]  =  t[5] >>  7;
 3432              		.loc 1 719 21 discriminator 3
 3433 0292 3B6A     		ldr	r3, [r7, #32]
 3434              		.loc 1 719 25 discriminator 3
 3435 0294 D909     		lsrs	r1, r3, #7
 3436              		.loc 1 719 9 discriminator 3
 3437 0296 FA6A     		ldr	r2, [r7, #44]
 3438 0298 1346     		mov	r3, r2
 3439 029a 5B00     		lsls	r3, r3, #1
 3440 029c 1344     		add	r3, r3, r2
 3441 029e 9B00     		lsls	r3, r3, #2
 3442 02a0 1344     		add	r3, r3, r2
 3443              		.loc 1 719 6 discriminator 3
 3444 02a2 0933     		adds	r3, r3, #9
 3445 02a4 7A68     		ldr	r2, [r7, #4]
 3446 02a6 1344     		add	r3, r3, r2
 3447              		.loc 1 719 17 discriminator 3
 3448 02a8 CAB2     		uxtb	r2, r1
 3449 02aa 1A70     		strb	r2, [r3]
 720:poly.c        ****     r[13*i+ 9] |=  t[6] <<  6;
 3450              		.loc 1 720 16 discriminator 3
 3451 02ac FA6A     		ldr	r2, [r7, #44]
 3452 02ae 1346     		mov	r3, r2
 3453 02b0 5B00     		lsls	r3, r3, #1
 3454 02b2 1344     		add	r3, r3, r2
 3455 02b4 9B00     		lsls	r3, r3, #2
 3456 02b6 1344     		add	r3, r3, r2
 3457 02b8 0933     		adds	r3, r3, #9
 3458 02ba 7A68     		ldr	r2, [r7, #4]
 3459 02bc 1344     		add	r3, r3, r2
 3460 02be 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 3461              		.loc 1 720 21 discriminator 3
 3462 02c0 7B6A     		ldr	r3, [r7, #36]
 3463              		.loc 1 720 25 discriminator 3
 3464 02c2 DBB2     		uxtb	r3, r3
 3465 02c4 9B01     		lsls	r3, r3, #6
 3466 02c6 D9B2     		uxtb	r1, r3
 3467              		.loc 1 720 16 discriminator 3
 3468 02c8 FA6A     		ldr	r2, [r7, #44]
 3469 02ca 1346     		mov	r3, r2
 3470 02cc 5B00     		lsls	r3, r3, #1
 3471 02ce 1344     		add	r3, r3, r2
 3472 02d0 9B00     		lsls	r3, r3, #2
 3473 02d2 1344     		add	r3, r3, r2
 3474 02d4 0933     		adds	r3, r3, #9
 3475 02d6 7A68     		ldr	r2, [r7, #4]
 3476 02d8 1344     		add	r3, r3, r2
 3477 02da 40EA0102 		orr	r2, r0, r1
 3478 02de D2B2     		uxtb	r2, r2
 3479 02e0 1A70     		strb	r2, [r3]
 721:poly.c        ****     r[13*i+10]  =  t[6] >>  2;
 3480              		.loc 1 721 21 discriminator 3
 3481 02e2 7B6A     		ldr	r3, [r7, #36]
 3482              		.loc 1 721 25 discriminator 3
 3483 02e4 9908     		lsrs	r1, r3, #2
 3484              		.loc 1 721 9 discriminator 3
 3485 02e6 FA6A     		ldr	r2, [r7, #44]
 3486 02e8 1346     		mov	r3, r2
 3487 02ea 5B00     		lsls	r3, r3, #1
 3488 02ec 1344     		add	r3, r3, r2
 3489 02ee 9B00     		lsls	r3, r3, #2
 3490 02f0 1344     		add	r3, r3, r2
 3491              		.loc 1 721 6 discriminator 3
 3492 02f2 0A33     		adds	r3, r3, #10
 3493 02f4 7A68     		ldr	r2, [r7, #4]
 3494 02f6 1344     		add	r3, r3, r2
 3495              		.loc 1 721 17 discriminator 3
 3496 02f8 CAB2     		uxtb	r2, r1
 3497 02fa 1A70     		strb	r2, [r3]
 722:poly.c        ****     r[13*i+11]  =  t[6] >> 10;
 3498              		.loc 1 722 21 discriminator 3
 3499 02fc 7B6A     		ldr	r3, [r7, #36]
 3500              		.loc 1 722 25 discriminator 3
 3501 02fe 990A     		lsrs	r1, r3, #10
 3502              		.loc 1 722 9 discriminator 3
 3503 0300 FA6A     		ldr	r2, [r7, #44]
 3504 0302 1346     		mov	r3, r2
 3505 0304 5B00     		lsls	r3, r3, #1
 3506 0306 1344     		add	r3, r3, r2
 3507 0308 9B00     		lsls	r3, r3, #2
 3508 030a 1344     		add	r3, r3, r2
 3509              		.loc 1 722 6 discriminator 3
 3510 030c 0B33     		adds	r3, r3, #11
 3511 030e 7A68     		ldr	r2, [r7, #4]
 3512 0310 1344     		add	r3, r3, r2
 3513              		.loc 1 722 17 discriminator 3
 3514 0312 CAB2     		uxtb	r2, r1
 3515 0314 1A70     		strb	r2, [r3]
 723:poly.c        ****     r[13*i+11] |=  t[7] <<  3;
 3516              		.loc 1 723 16 discriminator 3
 3517 0316 FA6A     		ldr	r2, [r7, #44]
 3518 0318 1346     		mov	r3, r2
 3519 031a 5B00     		lsls	r3, r3, #1
 3520 031c 1344     		add	r3, r3, r2
 3521 031e 9B00     		lsls	r3, r3, #2
 3522 0320 1344     		add	r3, r3, r2
 3523 0322 0B33     		adds	r3, r3, #11
 3524 0324 7A68     		ldr	r2, [r7, #4]
 3525 0326 1344     		add	r3, r3, r2
 3526 0328 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 3527              		.loc 1 723 21 discriminator 3
 3528 032a BB6A     		ldr	r3, [r7, #40]
 3529              		.loc 1 723 25 discriminator 3
 3530 032c DBB2     		uxtb	r3, r3
 3531 032e DB00     		lsls	r3, r3, #3
 3532 0330 D9B2     		uxtb	r1, r3
 3533              		.loc 1 723 16 discriminator 3
 3534 0332 FA6A     		ldr	r2, [r7, #44]
 3535 0334 1346     		mov	r3, r2
 3536 0336 5B00     		lsls	r3, r3, #1
 3537 0338 1344     		add	r3, r3, r2
 3538 033a 9B00     		lsls	r3, r3, #2
 3539 033c 1344     		add	r3, r3, r2
 3540 033e 0B33     		adds	r3, r3, #11
 3541 0340 7A68     		ldr	r2, [r7, #4]
 3542 0342 1344     		add	r3, r3, r2
 3543 0344 40EA0102 		orr	r2, r0, r1
 3544 0348 D2B2     		uxtb	r2, r2
 3545 034a 1A70     		strb	r2, [r3]
 724:poly.c        ****     r[13*i+12]  =  t[7] >>  5;
 3546              		.loc 1 724 21 discriminator 3
 3547 034c BB6A     		ldr	r3, [r7, #40]
 3548              		.loc 1 724 25 discriminator 3
 3549 034e 5909     		lsrs	r1, r3, #5
 3550              		.loc 1 724 9 discriminator 3
 3551 0350 FA6A     		ldr	r2, [r7, #44]
 3552 0352 1346     		mov	r3, r2
 3553 0354 5B00     		lsls	r3, r3, #1
 3554 0356 1344     		add	r3, r3, r2
 3555 0358 9B00     		lsls	r3, r3, #2
 3556 035a 1344     		add	r3, r3, r2
 3557              		.loc 1 724 6 discriminator 3
 3558 035c 0C33     		adds	r3, r3, #12
 3559 035e 7A68     		ldr	r2, [r7, #4]
 3560 0360 1344     		add	r3, r3, r2
 3561              		.loc 1 724 17 discriminator 3
 3562 0362 CAB2     		uxtb	r2, r1
 3563 0364 1A70     		strb	r2, [r3]
 695:poly.c        ****     t[0] = (1 << (D-1)) - a->coeffs[8*i+0];
 3564              		.loc 1 695 23 discriminator 3
 3565 0366 FB6A     		ldr	r3, [r7, #44]
 3566 0368 0133     		adds	r3, r3, #1
 3567 036a FB62     		str	r3, [r7, #44]
 3568              	.L90:
 695:poly.c        ****     t[0] = (1 << (D-1)) - a->coeffs[8*i+0];
 3569              		.loc 1 695 3 discriminator 1
 3570 036c FB6A     		ldr	r3, [r7, #44]
 3571 036e 1F2B     		cmp	r3, #31
 3572 0370 7FF64EAE 		bls	.L91
 725:poly.c        ****   }
 726:poly.c        **** 
 727:poly.c        ****   DBENCH_STOP(*tpack);
 728:poly.c        **** }
 3573              		.loc 1 728 1
 3574 0374 00BF     		nop
 3575 0376 00BF     		nop
 3576 0378 3437     		adds	r7, r7, #52
 3577              	.LCFI133:
 3578              		.cfi_def_cfa_offset 4
 3579 037a BD46     		mov	sp, r7
 3580              	.LCFI134:
 3581              		.cfi_def_cfa_register 13
 3582              		@ sp needed
 3583 037c 80BC     		pop	{r7}
 3584              	.LCFI135:
 3585              		.cfi_restore 7
 3586              		.cfi_def_cfa_offset 0
 3587 037e 7047     		bx	lr
 3588              		.cfi_endproc
 3589              	.LFE24:
 3591              		.section	.text.pqcrystals_dilithium2_ref_polyt0_unpack,"ax",%progbits
 3592              		.align	1
 3593              		.global	pqcrystals_dilithium2_ref_polyt0_unpack
 3594              		.syntax unified
 3595              		.thumb
 3596              		.thumb_func
 3597              		.fpu softvfp
 3599              	pqcrystals_dilithium2_ref_polyt0_unpack:
 3600              	.LFB25:
 729:poly.c        **** 
 730:poly.c        **** /*************************************************
 731:poly.c        **** * Name:        polyt0_unpack
 732:poly.c        **** *
 733:poly.c        **** * Description: Unpack polynomial t0 with coefficients in ]-2^{D-1}, 2^{D-1}].
 734:poly.c        **** *
 735:poly.c        **** * Arguments:   - poly *r: pointer to output polynomial
 736:poly.c        **** *              - const uint8_t *a: byte array with bit-packed polynomial
 737:poly.c        **** **************************************************/
 738:poly.c        **** void polyt0_unpack(poly *r, const uint8_t *a) {
 3601              		.loc 1 738 47
 3602              		.cfi_startproc
 3603              		@ args = 0, pretend = 0, frame = 16
 3604              		@ frame_needed = 1, uses_anonymous_args = 0
 3605              		@ link register save eliminated.
 3606 0000 80B4     		push	{r7}
 3607              	.LCFI136:
 3608              		.cfi_def_cfa_offset 4
 3609              		.cfi_offset 7, -4
 3610 0002 85B0     		sub	sp, sp, #20
 3611              	.LCFI137:
 3612              		.cfi_def_cfa_offset 24
 3613 0004 00AF     		add	r7, sp, #0
 3614              	.LCFI138:
 3615              		.cfi_def_cfa_register 7
 3616 0006 7860     		str	r0, [r7, #4]
 3617 0008 3960     		str	r1, [r7]
 739:poly.c        ****   unsigned int i;
 740:poly.c        ****   DBENCH_START();
 741:poly.c        **** 
 742:poly.c        ****   for(i = 0; i < N/8; ++i) {
 3618              		.loc 1 742 9
 3619 000a 0023     		movs	r3, #0
 3620 000c FB60     		str	r3, [r7, #12]
 3621              		.loc 1 742 3
 3622 000e 94E2     		b	.L93
 3623              	.L94:
 743:poly.c        ****     r->coeffs[8*i+0]  = a[13*i+0];
 3624              		.loc 1 743 29 discriminator 3
 3625 0010 FA68     		ldr	r2, [r7, #12]
 3626 0012 1346     		mov	r3, r2
 3627 0014 5B00     		lsls	r3, r3, #1
 3628 0016 1344     		add	r3, r3, r2
 3629 0018 9B00     		lsls	r3, r3, #2
 3630 001a 1344     		add	r3, r3, r2
 3631              		.loc 1 743 26 discriminator 3
 3632 001c 3A68     		ldr	r2, [r7]
 3633 001e 1344     		add	r3, r3, r2
 3634 0020 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 3635              		.loc 1 743 18 discriminator 3
 3636 0022 FB68     		ldr	r3, [r7, #12]
 3637 0024 DA00     		lsls	r2, r3, #3
 3638              		.loc 1 743 23 discriminator 3
 3639 0026 7B68     		ldr	r3, [r7, #4]
 3640 0028 43F82210 		str	r1, [r3, r2, lsl #2]
 744:poly.c        ****     r->coeffs[8*i+0] |= (uint32_t)a[13*i+1] << 8;
 3641              		.loc 1 744 22 discriminator 3
 3642 002c FB68     		ldr	r3, [r7, #12]
 3643 002e DA00     		lsls	r2, r3, #3
 3644 0030 7B68     		ldr	r3, [r7, #4]
 3645 0032 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3646 0036 1946     		mov	r1, r3
 3647              		.loc 1 744 39 discriminator 3
 3648 0038 FA68     		ldr	r2, [r7, #12]
 3649 003a 1346     		mov	r3, r2
 3650 003c 5B00     		lsls	r3, r3, #1
 3651 003e 1344     		add	r3, r3, r2
 3652 0040 9B00     		lsls	r3, r3, #2
 3653 0042 1344     		add	r3, r3, r2
 3654              		.loc 1 744 36 discriminator 3
 3655 0044 0133     		adds	r3, r3, #1
 3656 0046 3A68     		ldr	r2, [r7]
 3657 0048 1344     		add	r3, r3, r2
 3658 004a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3659              		.loc 1 744 45 discriminator 3
 3660 004c 1B02     		lsls	r3, r3, #8
 3661              		.loc 1 744 22 discriminator 3
 3662 004e 1943     		orrs	r1, r1, r3
 3663 0050 FB68     		ldr	r3, [r7, #12]
 3664 0052 DA00     		lsls	r2, r3, #3
 3665 0054 7B68     		ldr	r3, [r7, #4]
 3666 0056 43F82210 		str	r1, [r3, r2, lsl #2]
 745:poly.c        ****     r->coeffs[8*i+0] &= 0x1FFF;
 3667              		.loc 1 745 22 discriminator 3
 3668 005a FB68     		ldr	r3, [r7, #12]
 3669 005c DA00     		lsls	r2, r3, #3
 3670 005e 7B68     		ldr	r3, [r7, #4]
 3671 0060 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3672 0064 FA68     		ldr	r2, [r7, #12]
 3673 0066 D200     		lsls	r2, r2, #3
 3674 0068 C3F30C01 		ubfx	r1, r3, #0, #13
 3675 006c 7B68     		ldr	r3, [r7, #4]
 3676 006e 43F82210 		str	r1, [r3, r2, lsl #2]
 746:poly.c        **** 
 747:poly.c        ****     r->coeffs[8*i+1]  = a[13*i+1] >> 5;
 3677              		.loc 1 747 29 discriminator 3
 3678 0072 FA68     		ldr	r2, [r7, #12]
 3679 0074 1346     		mov	r3, r2
 3680 0076 5B00     		lsls	r3, r3, #1
 3681 0078 1344     		add	r3, r3, r2
 3682 007a 9B00     		lsls	r3, r3, #2
 3683 007c 1344     		add	r3, r3, r2
 3684              		.loc 1 747 26 discriminator 3
 3685 007e 0133     		adds	r3, r3, #1
 3686 0080 3A68     		ldr	r2, [r7]
 3687 0082 1344     		add	r3, r3, r2
 3688 0084 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3689              		.loc 1 747 35 discriminator 3
 3690 0086 5B09     		lsrs	r3, r3, #5
 3691 0088 D9B2     		uxtb	r1, r3
 3692              		.loc 1 747 16 discriminator 3
 3693 008a FB68     		ldr	r3, [r7, #12]
 3694 008c DB00     		lsls	r3, r3, #3
 3695              		.loc 1 747 18 discriminator 3
 3696 008e 5A1C     		adds	r2, r3, #1
 3697              		.loc 1 747 23 discriminator 3
 3698 0090 7B68     		ldr	r3, [r7, #4]
 3699 0092 43F82210 		str	r1, [r3, r2, lsl #2]
 748:poly.c        ****     r->coeffs[8*i+1] |= (uint32_t)a[13*i+2] << 3;
 3700              		.loc 1 748 22 discriminator 3
 3701 0096 FB68     		ldr	r3, [r7, #12]
 3702 0098 DB00     		lsls	r3, r3, #3
 3703 009a 5A1C     		adds	r2, r3, #1
 3704 009c 7B68     		ldr	r3, [r7, #4]
 3705 009e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3706 00a2 1946     		mov	r1, r3
 3707              		.loc 1 748 39 discriminator 3
 3708 00a4 FA68     		ldr	r2, [r7, #12]
 3709 00a6 1346     		mov	r3, r2
 3710 00a8 5B00     		lsls	r3, r3, #1
 3711 00aa 1344     		add	r3, r3, r2
 3712 00ac 9B00     		lsls	r3, r3, #2
 3713 00ae 1344     		add	r3, r3, r2
 3714              		.loc 1 748 36 discriminator 3
 3715 00b0 0233     		adds	r3, r3, #2
 3716 00b2 3A68     		ldr	r2, [r7]
 3717 00b4 1344     		add	r3, r3, r2
 3718 00b6 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3719              		.loc 1 748 45 discriminator 3
 3720 00b8 DB00     		lsls	r3, r3, #3
 3721              		.loc 1 748 22 discriminator 3
 3722 00ba 1943     		orrs	r1, r1, r3
 3723 00bc FB68     		ldr	r3, [r7, #12]
 3724 00be DB00     		lsls	r3, r3, #3
 3725 00c0 5A1C     		adds	r2, r3, #1
 3726 00c2 7B68     		ldr	r3, [r7, #4]
 3727 00c4 43F82210 		str	r1, [r3, r2, lsl #2]
 749:poly.c        ****     r->coeffs[8*i+1] |= (uint32_t)a[13*i+3] << 11;
 3728              		.loc 1 749 22 discriminator 3
 3729 00c8 FB68     		ldr	r3, [r7, #12]
 3730 00ca DB00     		lsls	r3, r3, #3
 3731 00cc 5A1C     		adds	r2, r3, #1
 3732 00ce 7B68     		ldr	r3, [r7, #4]
 3733 00d0 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3734 00d4 1946     		mov	r1, r3
 3735              		.loc 1 749 39 discriminator 3
 3736 00d6 FA68     		ldr	r2, [r7, #12]
 3737 00d8 1346     		mov	r3, r2
 3738 00da 5B00     		lsls	r3, r3, #1
 3739 00dc 1344     		add	r3, r3, r2
 3740 00de 9B00     		lsls	r3, r3, #2
 3741 00e0 1344     		add	r3, r3, r2
 3742              		.loc 1 749 36 discriminator 3
 3743 00e2 0333     		adds	r3, r3, #3
 3744 00e4 3A68     		ldr	r2, [r7]
 3745 00e6 1344     		add	r3, r3, r2
 3746 00e8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3747              		.loc 1 749 45 discriminator 3
 3748 00ea DB02     		lsls	r3, r3, #11
 3749              		.loc 1 749 22 discriminator 3
 3750 00ec 1943     		orrs	r1, r1, r3
 3751 00ee FB68     		ldr	r3, [r7, #12]
 3752 00f0 DB00     		lsls	r3, r3, #3
 3753 00f2 5A1C     		adds	r2, r3, #1
 3754 00f4 7B68     		ldr	r3, [r7, #4]
 3755 00f6 43F82210 		str	r1, [r3, r2, lsl #2]
 750:poly.c        ****     r->coeffs[8*i+1] &= 0x1FFF;
 3756              		.loc 1 750 22 discriminator 3
 3757 00fa FB68     		ldr	r3, [r7, #12]
 3758 00fc DB00     		lsls	r3, r3, #3
 3759 00fe 5A1C     		adds	r2, r3, #1
 3760 0100 7B68     		ldr	r3, [r7, #4]
 3761 0102 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3762 0106 FA68     		ldr	r2, [r7, #12]
 3763 0108 D200     		lsls	r2, r2, #3
 3764 010a 0132     		adds	r2, r2, #1
 3765 010c C3F30C01 		ubfx	r1, r3, #0, #13
 3766 0110 7B68     		ldr	r3, [r7, #4]
 3767 0112 43F82210 		str	r1, [r3, r2, lsl #2]
 751:poly.c        **** 
 752:poly.c        ****     r->coeffs[8*i+2]  = a[13*i+3] >> 2;
 3768              		.loc 1 752 29 discriminator 3
 3769 0116 FA68     		ldr	r2, [r7, #12]
 3770 0118 1346     		mov	r3, r2
 3771 011a 5B00     		lsls	r3, r3, #1
 3772 011c 1344     		add	r3, r3, r2
 3773 011e 9B00     		lsls	r3, r3, #2
 3774 0120 1344     		add	r3, r3, r2
 3775              		.loc 1 752 26 discriminator 3
 3776 0122 0333     		adds	r3, r3, #3
 3777 0124 3A68     		ldr	r2, [r7]
 3778 0126 1344     		add	r3, r3, r2
 3779 0128 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3780              		.loc 1 752 35 discriminator 3
 3781 012a 9B08     		lsrs	r3, r3, #2
 3782 012c D9B2     		uxtb	r1, r3
 3783              		.loc 1 752 16 discriminator 3
 3784 012e FB68     		ldr	r3, [r7, #12]
 3785 0130 DB00     		lsls	r3, r3, #3
 3786              		.loc 1 752 18 discriminator 3
 3787 0132 9A1C     		adds	r2, r3, #2
 3788              		.loc 1 752 23 discriminator 3
 3789 0134 7B68     		ldr	r3, [r7, #4]
 3790 0136 43F82210 		str	r1, [r3, r2, lsl #2]
 753:poly.c        ****     r->coeffs[8*i+2] |= (uint32_t)a[13*i+4] << 6;
 3791              		.loc 1 753 22 discriminator 3
 3792 013a FB68     		ldr	r3, [r7, #12]
 3793 013c DB00     		lsls	r3, r3, #3
 3794 013e 9A1C     		adds	r2, r3, #2
 3795 0140 7B68     		ldr	r3, [r7, #4]
 3796 0142 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3797 0146 1946     		mov	r1, r3
 3798              		.loc 1 753 39 discriminator 3
 3799 0148 FA68     		ldr	r2, [r7, #12]
 3800 014a 1346     		mov	r3, r2
 3801 014c 5B00     		lsls	r3, r3, #1
 3802 014e 1344     		add	r3, r3, r2
 3803 0150 9B00     		lsls	r3, r3, #2
 3804 0152 1344     		add	r3, r3, r2
 3805              		.loc 1 753 36 discriminator 3
 3806 0154 0433     		adds	r3, r3, #4
 3807 0156 3A68     		ldr	r2, [r7]
 3808 0158 1344     		add	r3, r3, r2
 3809 015a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3810              		.loc 1 753 45 discriminator 3
 3811 015c 9B01     		lsls	r3, r3, #6
 3812              		.loc 1 753 22 discriminator 3
 3813 015e 1943     		orrs	r1, r1, r3
 3814 0160 FB68     		ldr	r3, [r7, #12]
 3815 0162 DB00     		lsls	r3, r3, #3
 3816 0164 9A1C     		adds	r2, r3, #2
 3817 0166 7B68     		ldr	r3, [r7, #4]
 3818 0168 43F82210 		str	r1, [r3, r2, lsl #2]
 754:poly.c        ****     r->coeffs[8*i+2] &= 0x1FFF;
 3819              		.loc 1 754 22 discriminator 3
 3820 016c FB68     		ldr	r3, [r7, #12]
 3821 016e DB00     		lsls	r3, r3, #3
 3822 0170 9A1C     		adds	r2, r3, #2
 3823 0172 7B68     		ldr	r3, [r7, #4]
 3824 0174 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3825 0178 FA68     		ldr	r2, [r7, #12]
 3826 017a D200     		lsls	r2, r2, #3
 3827 017c 0232     		adds	r2, r2, #2
 3828 017e C3F30C01 		ubfx	r1, r3, #0, #13
 3829 0182 7B68     		ldr	r3, [r7, #4]
 3830 0184 43F82210 		str	r1, [r3, r2, lsl #2]
 755:poly.c        **** 
 756:poly.c        ****     r->coeffs[8*i+3]  = a[13*i+4] >> 7;
 3831              		.loc 1 756 29 discriminator 3
 3832 0188 FA68     		ldr	r2, [r7, #12]
 3833 018a 1346     		mov	r3, r2
 3834 018c 5B00     		lsls	r3, r3, #1
 3835 018e 1344     		add	r3, r3, r2
 3836 0190 9B00     		lsls	r3, r3, #2
 3837 0192 1344     		add	r3, r3, r2
 3838              		.loc 1 756 26 discriminator 3
 3839 0194 0433     		adds	r3, r3, #4
 3840 0196 3A68     		ldr	r2, [r7]
 3841 0198 1344     		add	r3, r3, r2
 3842 019a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3843              		.loc 1 756 35 discriminator 3
 3844 019c DB09     		lsrs	r3, r3, #7
 3845 019e D9B2     		uxtb	r1, r3
 3846              		.loc 1 756 16 discriminator 3
 3847 01a0 FB68     		ldr	r3, [r7, #12]
 3848 01a2 DB00     		lsls	r3, r3, #3
 3849              		.loc 1 756 18 discriminator 3
 3850 01a4 DA1C     		adds	r2, r3, #3
 3851              		.loc 1 756 23 discriminator 3
 3852 01a6 7B68     		ldr	r3, [r7, #4]
 3853 01a8 43F82210 		str	r1, [r3, r2, lsl #2]
 757:poly.c        ****     r->coeffs[8*i+3] |= (uint32_t)a[13*i+5] << 1;
 3854              		.loc 1 757 22 discriminator 3
 3855 01ac FB68     		ldr	r3, [r7, #12]
 3856 01ae DB00     		lsls	r3, r3, #3
 3857 01b0 DA1C     		adds	r2, r3, #3
 3858 01b2 7B68     		ldr	r3, [r7, #4]
 3859 01b4 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3860 01b8 1946     		mov	r1, r3
 3861              		.loc 1 757 39 discriminator 3
 3862 01ba FA68     		ldr	r2, [r7, #12]
 3863 01bc 1346     		mov	r3, r2
 3864 01be 5B00     		lsls	r3, r3, #1
 3865 01c0 1344     		add	r3, r3, r2
 3866 01c2 9B00     		lsls	r3, r3, #2
 3867 01c4 1344     		add	r3, r3, r2
 3868              		.loc 1 757 36 discriminator 3
 3869 01c6 0533     		adds	r3, r3, #5
 3870 01c8 3A68     		ldr	r2, [r7]
 3871 01ca 1344     		add	r3, r3, r2
 3872 01cc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3873              		.loc 1 757 45 discriminator 3
 3874 01ce 5B00     		lsls	r3, r3, #1
 3875              		.loc 1 757 22 discriminator 3
 3876 01d0 1943     		orrs	r1, r1, r3
 3877 01d2 FB68     		ldr	r3, [r7, #12]
 3878 01d4 DB00     		lsls	r3, r3, #3
 3879 01d6 DA1C     		adds	r2, r3, #3
 3880 01d8 7B68     		ldr	r3, [r7, #4]
 3881 01da 43F82210 		str	r1, [r3, r2, lsl #2]
 758:poly.c        ****     r->coeffs[8*i+3] |= (uint32_t)a[13*i+6] << 9;
 3882              		.loc 1 758 22 discriminator 3
 3883 01de FB68     		ldr	r3, [r7, #12]
 3884 01e0 DB00     		lsls	r3, r3, #3
 3885 01e2 DA1C     		adds	r2, r3, #3
 3886 01e4 7B68     		ldr	r3, [r7, #4]
 3887 01e6 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3888 01ea 1946     		mov	r1, r3
 3889              		.loc 1 758 39 discriminator 3
 3890 01ec FA68     		ldr	r2, [r7, #12]
 3891 01ee 1346     		mov	r3, r2
 3892 01f0 5B00     		lsls	r3, r3, #1
 3893 01f2 1344     		add	r3, r3, r2
 3894 01f4 9B00     		lsls	r3, r3, #2
 3895 01f6 1344     		add	r3, r3, r2
 3896              		.loc 1 758 36 discriminator 3
 3897 01f8 0633     		adds	r3, r3, #6
 3898 01fa 3A68     		ldr	r2, [r7]
 3899 01fc 1344     		add	r3, r3, r2
 3900 01fe 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3901              		.loc 1 758 45 discriminator 3
 3902 0200 5B02     		lsls	r3, r3, #9
 3903              		.loc 1 758 22 discriminator 3
 3904 0202 1943     		orrs	r1, r1, r3
 3905 0204 FB68     		ldr	r3, [r7, #12]
 3906 0206 DB00     		lsls	r3, r3, #3
 3907 0208 DA1C     		adds	r2, r3, #3
 3908 020a 7B68     		ldr	r3, [r7, #4]
 3909 020c 43F82210 		str	r1, [r3, r2, lsl #2]
 759:poly.c        ****     r->coeffs[8*i+3] &= 0x1FFF;
 3910              		.loc 1 759 22 discriminator 3
 3911 0210 FB68     		ldr	r3, [r7, #12]
 3912 0212 DB00     		lsls	r3, r3, #3
 3913 0214 DA1C     		adds	r2, r3, #3
 3914 0216 7B68     		ldr	r3, [r7, #4]
 3915 0218 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3916 021c FA68     		ldr	r2, [r7, #12]
 3917 021e D200     		lsls	r2, r2, #3
 3918 0220 0332     		adds	r2, r2, #3
 3919 0222 C3F30C01 		ubfx	r1, r3, #0, #13
 3920 0226 7B68     		ldr	r3, [r7, #4]
 3921 0228 43F82210 		str	r1, [r3, r2, lsl #2]
 760:poly.c        **** 
 761:poly.c        ****     r->coeffs[8*i+4]  = a[13*i+6] >> 4;
 3922              		.loc 1 761 29 discriminator 3
 3923 022c FA68     		ldr	r2, [r7, #12]
 3924 022e 1346     		mov	r3, r2
 3925 0230 5B00     		lsls	r3, r3, #1
 3926 0232 1344     		add	r3, r3, r2
 3927 0234 9B00     		lsls	r3, r3, #2
 3928 0236 1344     		add	r3, r3, r2
 3929              		.loc 1 761 26 discriminator 3
 3930 0238 0633     		adds	r3, r3, #6
 3931 023a 3A68     		ldr	r2, [r7]
 3932 023c 1344     		add	r3, r3, r2
 3933 023e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3934              		.loc 1 761 35 discriminator 3
 3935 0240 1B09     		lsrs	r3, r3, #4
 3936 0242 D9B2     		uxtb	r1, r3
 3937              		.loc 1 761 16 discriminator 3
 3938 0244 FB68     		ldr	r3, [r7, #12]
 3939 0246 DB00     		lsls	r3, r3, #3
 3940              		.loc 1 761 18 discriminator 3
 3941 0248 1A1D     		adds	r2, r3, #4
 3942              		.loc 1 761 23 discriminator 3
 3943 024a 7B68     		ldr	r3, [r7, #4]
 3944 024c 43F82210 		str	r1, [r3, r2, lsl #2]
 762:poly.c        ****     r->coeffs[8*i+4] |= (uint32_t)a[13*i+7] << 4;
 3945              		.loc 1 762 22 discriminator 3
 3946 0250 FB68     		ldr	r3, [r7, #12]
 3947 0252 DB00     		lsls	r3, r3, #3
 3948 0254 1A1D     		adds	r2, r3, #4
 3949 0256 7B68     		ldr	r3, [r7, #4]
 3950 0258 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3951 025c 1946     		mov	r1, r3
 3952              		.loc 1 762 39 discriminator 3
 3953 025e FA68     		ldr	r2, [r7, #12]
 3954 0260 1346     		mov	r3, r2
 3955 0262 5B00     		lsls	r3, r3, #1
 3956 0264 1344     		add	r3, r3, r2
 3957 0266 9B00     		lsls	r3, r3, #2
 3958 0268 1344     		add	r3, r3, r2
 3959              		.loc 1 762 36 discriminator 3
 3960 026a 0733     		adds	r3, r3, #7
 3961 026c 3A68     		ldr	r2, [r7]
 3962 026e 1344     		add	r3, r3, r2
 3963 0270 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3964              		.loc 1 762 45 discriminator 3
 3965 0272 1B01     		lsls	r3, r3, #4
 3966              		.loc 1 762 22 discriminator 3
 3967 0274 1943     		orrs	r1, r1, r3
 3968 0276 FB68     		ldr	r3, [r7, #12]
 3969 0278 DB00     		lsls	r3, r3, #3
 3970 027a 1A1D     		adds	r2, r3, #4
 3971 027c 7B68     		ldr	r3, [r7, #4]
 3972 027e 43F82210 		str	r1, [r3, r2, lsl #2]
 763:poly.c        ****     r->coeffs[8*i+4] |= (uint32_t)a[13*i+8] << 12;
 3973              		.loc 1 763 22 discriminator 3
 3974 0282 FB68     		ldr	r3, [r7, #12]
 3975 0284 DB00     		lsls	r3, r3, #3
 3976 0286 1A1D     		adds	r2, r3, #4
 3977 0288 7B68     		ldr	r3, [r7, #4]
 3978 028a 53F82230 		ldr	r3, [r3, r2, lsl #2]
 3979 028e 1946     		mov	r1, r3
 3980              		.loc 1 763 39 discriminator 3
 3981 0290 FA68     		ldr	r2, [r7, #12]
 3982 0292 1346     		mov	r3, r2
 3983 0294 5B00     		lsls	r3, r3, #1
 3984 0296 1344     		add	r3, r3, r2
 3985 0298 9B00     		lsls	r3, r3, #2
 3986 029a 1344     		add	r3, r3, r2
 3987              		.loc 1 763 36 discriminator 3
 3988 029c 0833     		adds	r3, r3, #8
 3989 029e 3A68     		ldr	r2, [r7]
 3990 02a0 1344     		add	r3, r3, r2
 3991 02a2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3992              		.loc 1 763 45 discriminator 3
 3993 02a4 1B03     		lsls	r3, r3, #12
 3994              		.loc 1 763 22 discriminator 3
 3995 02a6 1943     		orrs	r1, r1, r3
 3996 02a8 FB68     		ldr	r3, [r7, #12]
 3997 02aa DB00     		lsls	r3, r3, #3
 3998 02ac 1A1D     		adds	r2, r3, #4
 3999 02ae 7B68     		ldr	r3, [r7, #4]
 4000 02b0 43F82210 		str	r1, [r3, r2, lsl #2]
 764:poly.c        ****     r->coeffs[8*i+4] &= 0x1FFF;
 4001              		.loc 1 764 22 discriminator 3
 4002 02b4 FB68     		ldr	r3, [r7, #12]
 4003 02b6 DB00     		lsls	r3, r3, #3
 4004 02b8 1A1D     		adds	r2, r3, #4
 4005 02ba 7B68     		ldr	r3, [r7, #4]
 4006 02bc 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4007 02c0 FA68     		ldr	r2, [r7, #12]
 4008 02c2 D200     		lsls	r2, r2, #3
 4009 02c4 0432     		adds	r2, r2, #4
 4010 02c6 C3F30C01 		ubfx	r1, r3, #0, #13
 4011 02ca 7B68     		ldr	r3, [r7, #4]
 4012 02cc 43F82210 		str	r1, [r3, r2, lsl #2]
 765:poly.c        **** 
 766:poly.c        ****     r->coeffs[8*i+5]  = a[13*i+8] >> 1;
 4013              		.loc 1 766 29 discriminator 3
 4014 02d0 FA68     		ldr	r2, [r7, #12]
 4015 02d2 1346     		mov	r3, r2
 4016 02d4 5B00     		lsls	r3, r3, #1
 4017 02d6 1344     		add	r3, r3, r2
 4018 02d8 9B00     		lsls	r3, r3, #2
 4019 02da 1344     		add	r3, r3, r2
 4020              		.loc 1 766 26 discriminator 3
 4021 02dc 0833     		adds	r3, r3, #8
 4022 02de 3A68     		ldr	r2, [r7]
 4023 02e0 1344     		add	r3, r3, r2
 4024 02e2 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4025              		.loc 1 766 35 discriminator 3
 4026 02e4 5B08     		lsrs	r3, r3, #1
 4027 02e6 D9B2     		uxtb	r1, r3
 4028              		.loc 1 766 16 discriminator 3
 4029 02e8 FB68     		ldr	r3, [r7, #12]
 4030 02ea DB00     		lsls	r3, r3, #3
 4031              		.loc 1 766 18 discriminator 3
 4032 02ec 5A1D     		adds	r2, r3, #5
 4033              		.loc 1 766 23 discriminator 3
 4034 02ee 7B68     		ldr	r3, [r7, #4]
 4035 02f0 43F82210 		str	r1, [r3, r2, lsl #2]
 767:poly.c        ****     r->coeffs[8*i+5] |= (uint32_t)a[13*i+9] << 7;
 4036              		.loc 1 767 22 discriminator 3
 4037 02f4 FB68     		ldr	r3, [r7, #12]
 4038 02f6 DB00     		lsls	r3, r3, #3
 4039 02f8 5A1D     		adds	r2, r3, #5
 4040 02fa 7B68     		ldr	r3, [r7, #4]
 4041 02fc 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4042 0300 1946     		mov	r1, r3
 4043              		.loc 1 767 39 discriminator 3
 4044 0302 FA68     		ldr	r2, [r7, #12]
 4045 0304 1346     		mov	r3, r2
 4046 0306 5B00     		lsls	r3, r3, #1
 4047 0308 1344     		add	r3, r3, r2
 4048 030a 9B00     		lsls	r3, r3, #2
 4049 030c 1344     		add	r3, r3, r2
 4050              		.loc 1 767 36 discriminator 3
 4051 030e 0933     		adds	r3, r3, #9
 4052 0310 3A68     		ldr	r2, [r7]
 4053 0312 1344     		add	r3, r3, r2
 4054 0314 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4055              		.loc 1 767 45 discriminator 3
 4056 0316 DB01     		lsls	r3, r3, #7
 4057              		.loc 1 767 22 discriminator 3
 4058 0318 1943     		orrs	r1, r1, r3
 4059 031a FB68     		ldr	r3, [r7, #12]
 4060 031c DB00     		lsls	r3, r3, #3
 4061 031e 5A1D     		adds	r2, r3, #5
 4062 0320 7B68     		ldr	r3, [r7, #4]
 4063 0322 43F82210 		str	r1, [r3, r2, lsl #2]
 768:poly.c        ****     r->coeffs[8*i+5] &= 0x1FFF;
 4064              		.loc 1 768 22 discriminator 3
 4065 0326 FB68     		ldr	r3, [r7, #12]
 4066 0328 DB00     		lsls	r3, r3, #3
 4067 032a 5A1D     		adds	r2, r3, #5
 4068 032c 7B68     		ldr	r3, [r7, #4]
 4069 032e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4070 0332 FA68     		ldr	r2, [r7, #12]
 4071 0334 D200     		lsls	r2, r2, #3
 4072 0336 0532     		adds	r2, r2, #5
 4073 0338 C3F30C01 		ubfx	r1, r3, #0, #13
 4074 033c 7B68     		ldr	r3, [r7, #4]
 4075 033e 43F82210 		str	r1, [r3, r2, lsl #2]
 769:poly.c        **** 
 770:poly.c        ****     r->coeffs[8*i+6]  = a[13*i+9] >> 6;
 4076              		.loc 1 770 29 discriminator 3
 4077 0342 FA68     		ldr	r2, [r7, #12]
 4078 0344 1346     		mov	r3, r2
 4079 0346 5B00     		lsls	r3, r3, #1
 4080 0348 1344     		add	r3, r3, r2
 4081 034a 9B00     		lsls	r3, r3, #2
 4082 034c 1344     		add	r3, r3, r2
 4083              		.loc 1 770 26 discriminator 3
 4084 034e 0933     		adds	r3, r3, #9
 4085 0350 3A68     		ldr	r2, [r7]
 4086 0352 1344     		add	r3, r3, r2
 4087 0354 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4088              		.loc 1 770 35 discriminator 3
 4089 0356 9B09     		lsrs	r3, r3, #6
 4090 0358 D9B2     		uxtb	r1, r3
 4091              		.loc 1 770 16 discriminator 3
 4092 035a FB68     		ldr	r3, [r7, #12]
 4093 035c DB00     		lsls	r3, r3, #3
 4094              		.loc 1 770 18 discriminator 3
 4095 035e 9A1D     		adds	r2, r3, #6
 4096              		.loc 1 770 23 discriminator 3
 4097 0360 7B68     		ldr	r3, [r7, #4]
 4098 0362 43F82210 		str	r1, [r3, r2, lsl #2]
 771:poly.c        ****     r->coeffs[8*i+6] |= (uint32_t)a[13*i+10] << 2;
 4099              		.loc 1 771 22 discriminator 3
 4100 0366 FB68     		ldr	r3, [r7, #12]
 4101 0368 DB00     		lsls	r3, r3, #3
 4102 036a 9A1D     		adds	r2, r3, #6
 4103 036c 7B68     		ldr	r3, [r7, #4]
 4104 036e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4105 0372 1946     		mov	r1, r3
 4106              		.loc 1 771 39 discriminator 3
 4107 0374 FA68     		ldr	r2, [r7, #12]
 4108 0376 1346     		mov	r3, r2
 4109 0378 5B00     		lsls	r3, r3, #1
 4110 037a 1344     		add	r3, r3, r2
 4111 037c 9B00     		lsls	r3, r3, #2
 4112 037e 1344     		add	r3, r3, r2
 4113              		.loc 1 771 36 discriminator 3
 4114 0380 0A33     		adds	r3, r3, #10
 4115 0382 3A68     		ldr	r2, [r7]
 4116 0384 1344     		add	r3, r3, r2
 4117 0386 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4118              		.loc 1 771 46 discriminator 3
 4119 0388 9B00     		lsls	r3, r3, #2
 4120              		.loc 1 771 22 discriminator 3
 4121 038a 1943     		orrs	r1, r1, r3
 4122 038c FB68     		ldr	r3, [r7, #12]
 4123 038e DB00     		lsls	r3, r3, #3
 4124 0390 9A1D     		adds	r2, r3, #6
 4125 0392 7B68     		ldr	r3, [r7, #4]
 4126 0394 43F82210 		str	r1, [r3, r2, lsl #2]
 772:poly.c        ****     r->coeffs[8*i+6] |= (uint32_t)a[13*i+11] << 10;
 4127              		.loc 1 772 22 discriminator 3
 4128 0398 FB68     		ldr	r3, [r7, #12]
 4129 039a DB00     		lsls	r3, r3, #3
 4130 039c 9A1D     		adds	r2, r3, #6
 4131 039e 7B68     		ldr	r3, [r7, #4]
 4132 03a0 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4133 03a4 1946     		mov	r1, r3
 4134              		.loc 1 772 39 discriminator 3
 4135 03a6 FA68     		ldr	r2, [r7, #12]
 4136 03a8 1346     		mov	r3, r2
 4137 03aa 5B00     		lsls	r3, r3, #1
 4138 03ac 1344     		add	r3, r3, r2
 4139 03ae 9B00     		lsls	r3, r3, #2
 4140 03b0 1344     		add	r3, r3, r2
 4141              		.loc 1 772 36 discriminator 3
 4142 03b2 0B33     		adds	r3, r3, #11
 4143 03b4 3A68     		ldr	r2, [r7]
 4144 03b6 1344     		add	r3, r3, r2
 4145 03b8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4146              		.loc 1 772 46 discriminator 3
 4147 03ba 9B02     		lsls	r3, r3, #10
 4148              		.loc 1 772 22 discriminator 3
 4149 03bc 1943     		orrs	r1, r1, r3
 4150 03be FB68     		ldr	r3, [r7, #12]
 4151 03c0 DB00     		lsls	r3, r3, #3
 4152 03c2 9A1D     		adds	r2, r3, #6
 4153 03c4 7B68     		ldr	r3, [r7, #4]
 4154 03c6 43F82210 		str	r1, [r3, r2, lsl #2]
 773:poly.c        ****     r->coeffs[8*i+6] &= 0x1FFF;
 4155              		.loc 1 773 22 discriminator 3
 4156 03ca FB68     		ldr	r3, [r7, #12]
 4157 03cc DB00     		lsls	r3, r3, #3
 4158 03ce 9A1D     		adds	r2, r3, #6
 4159 03d0 7B68     		ldr	r3, [r7, #4]
 4160 03d2 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4161 03d6 FA68     		ldr	r2, [r7, #12]
 4162 03d8 D200     		lsls	r2, r2, #3
 4163 03da 0632     		adds	r2, r2, #6
 4164 03dc C3F30C01 		ubfx	r1, r3, #0, #13
 4165 03e0 7B68     		ldr	r3, [r7, #4]
 4166 03e2 43F82210 		str	r1, [r3, r2, lsl #2]
 774:poly.c        **** 
 775:poly.c        ****     r->coeffs[8*i+7]  = a[13*i+11] >> 3;
 4167              		.loc 1 775 29 discriminator 3
 4168 03e6 FA68     		ldr	r2, [r7, #12]
 4169 03e8 1346     		mov	r3, r2
 4170 03ea 5B00     		lsls	r3, r3, #1
 4171 03ec 1344     		add	r3, r3, r2
 4172 03ee 9B00     		lsls	r3, r3, #2
 4173 03f0 1344     		add	r3, r3, r2
 4174              		.loc 1 775 26 discriminator 3
 4175 03f2 0B33     		adds	r3, r3, #11
 4176 03f4 3A68     		ldr	r2, [r7]
 4177 03f6 1344     		add	r3, r3, r2
 4178 03f8 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4179              		.loc 1 775 36 discriminator 3
 4180 03fa DB08     		lsrs	r3, r3, #3
 4181 03fc D9B2     		uxtb	r1, r3
 4182              		.loc 1 775 16 discriminator 3
 4183 03fe FB68     		ldr	r3, [r7, #12]
 4184 0400 DB00     		lsls	r3, r3, #3
 4185              		.loc 1 775 18 discriminator 3
 4186 0402 DA1D     		adds	r2, r3, #7
 4187              		.loc 1 775 23 discriminator 3
 4188 0404 7B68     		ldr	r3, [r7, #4]
 4189 0406 43F82210 		str	r1, [r3, r2, lsl #2]
 776:poly.c        ****     r->coeffs[8*i+7] |= (uint32_t)a[13*i+12] << 5;
 4190              		.loc 1 776 22 discriminator 3
 4191 040a FB68     		ldr	r3, [r7, #12]
 4192 040c DB00     		lsls	r3, r3, #3
 4193 040e DA1D     		adds	r2, r3, #7
 4194 0410 7B68     		ldr	r3, [r7, #4]
 4195 0412 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4196 0416 1946     		mov	r1, r3
 4197              		.loc 1 776 39 discriminator 3
 4198 0418 FA68     		ldr	r2, [r7, #12]
 4199 041a 1346     		mov	r3, r2
 4200 041c 5B00     		lsls	r3, r3, #1
 4201 041e 1344     		add	r3, r3, r2
 4202 0420 9B00     		lsls	r3, r3, #2
 4203 0422 1344     		add	r3, r3, r2
 4204              		.loc 1 776 36 discriminator 3
 4205 0424 0C33     		adds	r3, r3, #12
 4206 0426 3A68     		ldr	r2, [r7]
 4207 0428 1344     		add	r3, r3, r2
 4208 042a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4209              		.loc 1 776 46 discriminator 3
 4210 042c 5B01     		lsls	r3, r3, #5
 4211              		.loc 1 776 22 discriminator 3
 4212 042e 1943     		orrs	r1, r1, r3
 4213 0430 FB68     		ldr	r3, [r7, #12]
 4214 0432 DB00     		lsls	r3, r3, #3
 4215 0434 DA1D     		adds	r2, r3, #7
 4216 0436 7B68     		ldr	r3, [r7, #4]
 4217 0438 43F82210 		str	r1, [r3, r2, lsl #2]
 777:poly.c        ****     r->coeffs[8*i+7] &= 0x1FFF;
 4218              		.loc 1 777 22 discriminator 3
 4219 043c FB68     		ldr	r3, [r7, #12]
 4220 043e DB00     		lsls	r3, r3, #3
 4221 0440 DA1D     		adds	r2, r3, #7
 4222 0442 7B68     		ldr	r3, [r7, #4]
 4223 0444 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4224 0448 FA68     		ldr	r2, [r7, #12]
 4225 044a D200     		lsls	r2, r2, #3
 4226 044c 0732     		adds	r2, r2, #7
 4227 044e C3F30C01 		ubfx	r1, r3, #0, #13
 4228 0452 7B68     		ldr	r3, [r7, #4]
 4229 0454 43F82210 		str	r1, [r3, r2, lsl #2]
 778:poly.c        **** 
 779:poly.c        ****     r->coeffs[8*i+0] = (1 << (D-1)) - r->coeffs[8*i+0];
 4230              		.loc 1 779 52 discriminator 3
 4231 0458 FB68     		ldr	r3, [r7, #12]
 4232 045a DA00     		lsls	r2, r3, #3
 4233              		.loc 1 779 48 discriminator 3
 4234 045c 7B68     		ldr	r3, [r7, #4]
 4235 045e 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4236              		.loc 1 779 18 discriminator 3
 4237 0462 FA68     		ldr	r2, [r7, #12]
 4238 0464 D200     		lsls	r2, r2, #3
 4239              		.loc 1 779 37 discriminator 3
 4240 0466 C3F58051 		rsb	r1, r3, #4096
 4241              		.loc 1 779 22 discriminator 3
 4242 046a 7B68     		ldr	r3, [r7, #4]
 4243 046c 43F82210 		str	r1, [r3, r2, lsl #2]
 780:poly.c        ****     r->coeffs[8*i+1] = (1 << (D-1)) - r->coeffs[8*i+1];
 4244              		.loc 1 780 50 discriminator 3
 4245 0470 FB68     		ldr	r3, [r7, #12]
 4246 0472 DB00     		lsls	r3, r3, #3
 4247              		.loc 1 780 52 discriminator 3
 4248 0474 5A1C     		adds	r2, r3, #1
 4249              		.loc 1 780 48 discriminator 3
 4250 0476 7B68     		ldr	r3, [r7, #4]
 4251 0478 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4252              		.loc 1 780 16 discriminator 3
 4253 047c FA68     		ldr	r2, [r7, #12]
 4254 047e D200     		lsls	r2, r2, #3
 4255              		.loc 1 780 18 discriminator 3
 4256 0480 0132     		adds	r2, r2, #1
 4257              		.loc 1 780 37 discriminator 3
 4258 0482 C3F58051 		rsb	r1, r3, #4096
 4259              		.loc 1 780 22 discriminator 3
 4260 0486 7B68     		ldr	r3, [r7, #4]
 4261 0488 43F82210 		str	r1, [r3, r2, lsl #2]
 781:poly.c        ****     r->coeffs[8*i+2] = (1 << (D-1)) - r->coeffs[8*i+2];
 4262              		.loc 1 781 50 discriminator 3
 4263 048c FB68     		ldr	r3, [r7, #12]
 4264 048e DB00     		lsls	r3, r3, #3
 4265              		.loc 1 781 52 discriminator 3
 4266 0490 9A1C     		adds	r2, r3, #2
 4267              		.loc 1 781 48 discriminator 3
 4268 0492 7B68     		ldr	r3, [r7, #4]
 4269 0494 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4270              		.loc 1 781 16 discriminator 3
 4271 0498 FA68     		ldr	r2, [r7, #12]
 4272 049a D200     		lsls	r2, r2, #3
 4273              		.loc 1 781 18 discriminator 3
 4274 049c 0232     		adds	r2, r2, #2
 4275              		.loc 1 781 37 discriminator 3
 4276 049e C3F58051 		rsb	r1, r3, #4096
 4277              		.loc 1 781 22 discriminator 3
 4278 04a2 7B68     		ldr	r3, [r7, #4]
 4279 04a4 43F82210 		str	r1, [r3, r2, lsl #2]
 782:poly.c        ****     r->coeffs[8*i+3] = (1 << (D-1)) - r->coeffs[8*i+3];
 4280              		.loc 1 782 50 discriminator 3
 4281 04a8 FB68     		ldr	r3, [r7, #12]
 4282 04aa DB00     		lsls	r3, r3, #3
 4283              		.loc 1 782 52 discriminator 3
 4284 04ac DA1C     		adds	r2, r3, #3
 4285              		.loc 1 782 48 discriminator 3
 4286 04ae 7B68     		ldr	r3, [r7, #4]
 4287 04b0 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4288              		.loc 1 782 16 discriminator 3
 4289 04b4 FA68     		ldr	r2, [r7, #12]
 4290 04b6 D200     		lsls	r2, r2, #3
 4291              		.loc 1 782 18 discriminator 3
 4292 04b8 0332     		adds	r2, r2, #3
 4293              		.loc 1 782 37 discriminator 3
 4294 04ba C3F58051 		rsb	r1, r3, #4096
 4295              		.loc 1 782 22 discriminator 3
 4296 04be 7B68     		ldr	r3, [r7, #4]
 4297 04c0 43F82210 		str	r1, [r3, r2, lsl #2]
 783:poly.c        ****     r->coeffs[8*i+4] = (1 << (D-1)) - r->coeffs[8*i+4];
 4298              		.loc 1 783 50 discriminator 3
 4299 04c4 FB68     		ldr	r3, [r7, #12]
 4300 04c6 DB00     		lsls	r3, r3, #3
 4301              		.loc 1 783 52 discriminator 3
 4302 04c8 1A1D     		adds	r2, r3, #4
 4303              		.loc 1 783 48 discriminator 3
 4304 04ca 7B68     		ldr	r3, [r7, #4]
 4305 04cc 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4306              		.loc 1 783 16 discriminator 3
 4307 04d0 FA68     		ldr	r2, [r7, #12]
 4308 04d2 D200     		lsls	r2, r2, #3
 4309              		.loc 1 783 18 discriminator 3
 4310 04d4 0432     		adds	r2, r2, #4
 4311              		.loc 1 783 37 discriminator 3
 4312 04d6 C3F58051 		rsb	r1, r3, #4096
 4313              		.loc 1 783 22 discriminator 3
 4314 04da 7B68     		ldr	r3, [r7, #4]
 4315 04dc 43F82210 		str	r1, [r3, r2, lsl #2]
 784:poly.c        ****     r->coeffs[8*i+5] = (1 << (D-1)) - r->coeffs[8*i+5];
 4316              		.loc 1 784 50 discriminator 3
 4317 04e0 FB68     		ldr	r3, [r7, #12]
 4318 04e2 DB00     		lsls	r3, r3, #3
 4319              		.loc 1 784 52 discriminator 3
 4320 04e4 5A1D     		adds	r2, r3, #5
 4321              		.loc 1 784 48 discriminator 3
 4322 04e6 7B68     		ldr	r3, [r7, #4]
 4323 04e8 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4324              		.loc 1 784 16 discriminator 3
 4325 04ec FA68     		ldr	r2, [r7, #12]
 4326 04ee D200     		lsls	r2, r2, #3
 4327              		.loc 1 784 18 discriminator 3
 4328 04f0 0532     		adds	r2, r2, #5
 4329              		.loc 1 784 37 discriminator 3
 4330 04f2 C3F58051 		rsb	r1, r3, #4096
 4331              		.loc 1 784 22 discriminator 3
 4332 04f6 7B68     		ldr	r3, [r7, #4]
 4333 04f8 43F82210 		str	r1, [r3, r2, lsl #2]
 785:poly.c        ****     r->coeffs[8*i+6] = (1 << (D-1)) - r->coeffs[8*i+6];
 4334              		.loc 1 785 50 discriminator 3
 4335 04fc FB68     		ldr	r3, [r7, #12]
 4336 04fe DB00     		lsls	r3, r3, #3
 4337              		.loc 1 785 52 discriminator 3
 4338 0500 9A1D     		adds	r2, r3, #6
 4339              		.loc 1 785 48 discriminator 3
 4340 0502 7B68     		ldr	r3, [r7, #4]
 4341 0504 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4342              		.loc 1 785 16 discriminator 3
 4343 0508 FA68     		ldr	r2, [r7, #12]
 4344 050a D200     		lsls	r2, r2, #3
 4345              		.loc 1 785 18 discriminator 3
 4346 050c 0632     		adds	r2, r2, #6
 4347              		.loc 1 785 37 discriminator 3
 4348 050e C3F58051 		rsb	r1, r3, #4096
 4349              		.loc 1 785 22 discriminator 3
 4350 0512 7B68     		ldr	r3, [r7, #4]
 4351 0514 43F82210 		str	r1, [r3, r2, lsl #2]
 786:poly.c        ****     r->coeffs[8*i+7] = (1 << (D-1)) - r->coeffs[8*i+7];
 4352              		.loc 1 786 50 discriminator 3
 4353 0518 FB68     		ldr	r3, [r7, #12]
 4354 051a DB00     		lsls	r3, r3, #3
 4355              		.loc 1 786 52 discriminator 3
 4356 051c DA1D     		adds	r2, r3, #7
 4357              		.loc 1 786 48 discriminator 3
 4358 051e 7B68     		ldr	r3, [r7, #4]
 4359 0520 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4360              		.loc 1 786 16 discriminator 3
 4361 0524 FA68     		ldr	r2, [r7, #12]
 4362 0526 D200     		lsls	r2, r2, #3
 4363              		.loc 1 786 18 discriminator 3
 4364 0528 0732     		adds	r2, r2, #7
 4365              		.loc 1 786 37 discriminator 3
 4366 052a C3F58051 		rsb	r1, r3, #4096
 4367              		.loc 1 786 22 discriminator 3
 4368 052e 7B68     		ldr	r3, [r7, #4]
 4369 0530 43F82210 		str	r1, [r3, r2, lsl #2]
 742:poly.c        ****     r->coeffs[8*i+0]  = a[13*i+0];
 4370              		.loc 1 742 23 discriminator 3
 4371 0534 FB68     		ldr	r3, [r7, #12]
 4372 0536 0133     		adds	r3, r3, #1
 4373 0538 FB60     		str	r3, [r7, #12]
 4374              	.L93:
 742:poly.c        ****     r->coeffs[8*i+0]  = a[13*i+0];
 4375              		.loc 1 742 3 discriminator 1
 4376 053a FB68     		ldr	r3, [r7, #12]
 4377 053c 1F2B     		cmp	r3, #31
 4378 053e 7FF667AD 		bls	.L94
 787:poly.c        ****   }
 788:poly.c        **** 
 789:poly.c        ****   DBENCH_STOP(*tpack);
 790:poly.c        **** }
 4379              		.loc 1 790 1
 4380 0542 00BF     		nop
 4381 0544 00BF     		nop
 4382 0546 1437     		adds	r7, r7, #20
 4383              	.LCFI139:
 4384              		.cfi_def_cfa_offset 4
 4385 0548 BD46     		mov	sp, r7
 4386              	.LCFI140:
 4387              		.cfi_def_cfa_register 13
 4388              		@ sp needed
 4389 054a 80BC     		pop	{r7}
 4390              	.LCFI141:
 4391              		.cfi_restore 7
 4392              		.cfi_def_cfa_offset 0
 4393 054c 7047     		bx	lr
 4394              		.cfi_endproc
 4395              	.LFE25:
 4397              		.section	.text.pqcrystals_dilithium2_ref_polyz_pack,"ax",%progbits
 4398              		.align	1
 4399              		.global	pqcrystals_dilithium2_ref_polyz_pack
 4400              		.syntax unified
 4401              		.thumb
 4402              		.thumb_func
 4403              		.fpu softvfp
 4405              	pqcrystals_dilithium2_ref_polyz_pack:
 4406              	.LFB26:
 791:poly.c        **** 
 792:poly.c        **** /*************************************************
 793:poly.c        **** * Name:        polyz_pack
 794:poly.c        **** *
 795:poly.c        **** * Description: Bit-pack polynomial with coefficients
 796:poly.c        **** *              in [-(GAMMA1 - 1), GAMMA1].
 797:poly.c        **** *
 798:poly.c        **** * Arguments:   - uint8_t *r: pointer to output byte array with at least
 799:poly.c        **** *                            POLYZ_PACKEDBYTES bytes
 800:poly.c        **** *              - const poly *a: pointer to input polynomial
 801:poly.c        **** **************************************************/
 802:poly.c        **** void polyz_pack(uint8_t *r, const poly *a) {
 4407              		.loc 1 802 44
 4408              		.cfi_startproc
 4409              		@ args = 0, pretend = 0, frame = 32
 4410              		@ frame_needed = 1, uses_anonymous_args = 0
 4411              		@ link register save eliminated.
 4412 0000 80B4     		push	{r7}
 4413              	.LCFI142:
 4414              		.cfi_def_cfa_offset 4
 4415              		.cfi_offset 7, -4
 4416 0002 89B0     		sub	sp, sp, #36
 4417              	.LCFI143:
 4418              		.cfi_def_cfa_offset 40
 4419 0004 00AF     		add	r7, sp, #0
 4420              	.LCFI144:
 4421              		.cfi_def_cfa_register 7
 4422 0006 7860     		str	r0, [r7, #4]
 4423 0008 3960     		str	r1, [r7]
 803:poly.c        ****   unsigned int i;
 804:poly.c        ****   uint32_t t[4];
 805:poly.c        ****   DBENCH_START();
 806:poly.c        **** 
 807:poly.c        **** #if GAMMA1 == (1 << 17)
 808:poly.c        ****   for(i = 0; i < N/4; ++i) {
 4424              		.loc 1 808 9
 4425 000a 0023     		movs	r3, #0
 4426 000c FB61     		str	r3, [r7, #28]
 4427              		.loc 1 808 3
 4428 000e CBE0     		b	.L96
 4429              	.L97:
 809:poly.c        ****     t[0] = GAMMA1 - a->coeffs[4*i+0];
 4430              		.loc 1 809 34 discriminator 3
 4431 0010 FB69     		ldr	r3, [r7, #28]
 4432 0012 9A00     		lsls	r2, r3, #2
 4433              		.loc 1 809 30 discriminator 3
 4434 0014 3B68     		ldr	r3, [r7]
 4435 0016 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4436              		.loc 1 809 19 discriminator 3
 4437 001a C3F50033 		rsb	r3, r3, #131072
 4438              		.loc 1 809 10 discriminator 3
 4439 001e FB60     		str	r3, [r7, #12]
 810:poly.c        ****     t[1] = GAMMA1 - a->coeffs[4*i+1];
 4440              		.loc 1 810 32 discriminator 3
 4441 0020 FB69     		ldr	r3, [r7, #28]
 4442 0022 9B00     		lsls	r3, r3, #2
 4443              		.loc 1 810 34 discriminator 3
 4444 0024 5A1C     		adds	r2, r3, #1
 4445              		.loc 1 810 30 discriminator 3
 4446 0026 3B68     		ldr	r3, [r7]
 4447 0028 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4448              		.loc 1 810 19 discriminator 3
 4449 002c C3F50033 		rsb	r3, r3, #131072
 4450              		.loc 1 810 10 discriminator 3
 4451 0030 3B61     		str	r3, [r7, #16]
 811:poly.c        ****     t[2] = GAMMA1 - a->coeffs[4*i+2];
 4452              		.loc 1 811 32 discriminator 3
 4453 0032 FB69     		ldr	r3, [r7, #28]
 4454 0034 9B00     		lsls	r3, r3, #2
 4455              		.loc 1 811 34 discriminator 3
 4456 0036 9A1C     		adds	r2, r3, #2
 4457              		.loc 1 811 30 discriminator 3
 4458 0038 3B68     		ldr	r3, [r7]
 4459 003a 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4460              		.loc 1 811 19 discriminator 3
 4461 003e C3F50033 		rsb	r3, r3, #131072
 4462              		.loc 1 811 10 discriminator 3
 4463 0042 7B61     		str	r3, [r7, #20]
 812:poly.c        ****     t[3] = GAMMA1 - a->coeffs[4*i+3];
 4464              		.loc 1 812 32 discriminator 3
 4465 0044 FB69     		ldr	r3, [r7, #28]
 4466 0046 9B00     		lsls	r3, r3, #2
 4467              		.loc 1 812 34 discriminator 3
 4468 0048 DA1C     		adds	r2, r3, #3
 4469              		.loc 1 812 30 discriminator 3
 4470 004a 3B68     		ldr	r3, [r7]
 4471 004c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4472              		.loc 1 812 19 discriminator 3
 4473 0050 C3F50033 		rsb	r3, r3, #131072
 4474              		.loc 1 812 10 discriminator 3
 4475 0054 BB61     		str	r3, [r7, #24]
 813:poly.c        **** 
 814:poly.c        ****     r[9*i+0]  = t[0];
 4476              		.loc 1 814 18 discriminator 3
 4477 0056 F968     		ldr	r1, [r7, #12]
 4478              		.loc 1 814 8 discriminator 3
 4479 0058 FA69     		ldr	r2, [r7, #28]
 4480 005a 1346     		mov	r3, r2
 4481 005c DB00     		lsls	r3, r3, #3
 4482 005e 1344     		add	r3, r3, r2
 4483              		.loc 1 814 6 discriminator 3
 4484 0060 7A68     		ldr	r2, [r7, #4]
 4485 0062 1344     		add	r3, r3, r2
 4486              		.loc 1 814 15 discriminator 3
 4487 0064 CAB2     		uxtb	r2, r1
 4488 0066 1A70     		strb	r2, [r3]
 815:poly.c        ****     r[9*i+1]  = t[0] >> 8;
 4489              		.loc 1 815 18 discriminator 3
 4490 0068 FB68     		ldr	r3, [r7, #12]
 4491              		.loc 1 815 22 discriminator 3
 4492 006a 190A     		lsrs	r1, r3, #8
 4493              		.loc 1 815 8 discriminator 3
 4494 006c FA69     		ldr	r2, [r7, #28]
 4495 006e 1346     		mov	r3, r2
 4496 0070 DB00     		lsls	r3, r3, #3
 4497 0072 1344     		add	r3, r3, r2
 4498              		.loc 1 815 6 discriminator 3
 4499 0074 0133     		adds	r3, r3, #1
 4500 0076 7A68     		ldr	r2, [r7, #4]
 4501 0078 1344     		add	r3, r3, r2
 4502              		.loc 1 815 15 discriminator 3
 4503 007a CAB2     		uxtb	r2, r1
 4504 007c 1A70     		strb	r2, [r3]
 816:poly.c        ****     r[9*i+2]  = t[0] >> 16;
 4505              		.loc 1 816 18 discriminator 3
 4506 007e FB68     		ldr	r3, [r7, #12]
 4507              		.loc 1 816 22 discriminator 3
 4508 0080 190C     		lsrs	r1, r3, #16
 4509              		.loc 1 816 8 discriminator 3
 4510 0082 FA69     		ldr	r2, [r7, #28]
 4511 0084 1346     		mov	r3, r2
 4512 0086 DB00     		lsls	r3, r3, #3
 4513 0088 1344     		add	r3, r3, r2
 4514              		.loc 1 816 6 discriminator 3
 4515 008a 0233     		adds	r3, r3, #2
 4516 008c 7A68     		ldr	r2, [r7, #4]
 4517 008e 1344     		add	r3, r3, r2
 4518              		.loc 1 816 15 discriminator 3
 4519 0090 CAB2     		uxtb	r2, r1
 4520 0092 1A70     		strb	r2, [r3]
 817:poly.c        ****     r[9*i+2] |= t[1] << 2;
 4521              		.loc 1 817 14 discriminator 3
 4522 0094 FA69     		ldr	r2, [r7, #28]
 4523 0096 1346     		mov	r3, r2
 4524 0098 DB00     		lsls	r3, r3, #3
 4525 009a 1344     		add	r3, r3, r2
 4526 009c 0233     		adds	r3, r3, #2
 4527 009e 7A68     		ldr	r2, [r7, #4]
 4528 00a0 1344     		add	r3, r3, r2
 4529 00a2 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 4530              		.loc 1 817 18 discriminator 3
 4531 00a4 3B69     		ldr	r3, [r7, #16]
 4532              		.loc 1 817 22 discriminator 3
 4533 00a6 DBB2     		uxtb	r3, r3
 4534 00a8 9B00     		lsls	r3, r3, #2
 4535 00aa D9B2     		uxtb	r1, r3
 4536              		.loc 1 817 14 discriminator 3
 4537 00ac FA69     		ldr	r2, [r7, #28]
 4538 00ae 1346     		mov	r3, r2
 4539 00b0 DB00     		lsls	r3, r3, #3
 4540 00b2 1344     		add	r3, r3, r2
 4541 00b4 0233     		adds	r3, r3, #2
 4542 00b6 7A68     		ldr	r2, [r7, #4]
 4543 00b8 1344     		add	r3, r3, r2
 4544 00ba 40EA0102 		orr	r2, r0, r1
 4545 00be D2B2     		uxtb	r2, r2
 4546 00c0 1A70     		strb	r2, [r3]
 818:poly.c        ****     r[9*i+3]  = t[1] >> 6;
 4547              		.loc 1 818 18 discriminator 3
 4548 00c2 3B69     		ldr	r3, [r7, #16]
 4549              		.loc 1 818 22 discriminator 3
 4550 00c4 9909     		lsrs	r1, r3, #6
 4551              		.loc 1 818 8 discriminator 3
 4552 00c6 FA69     		ldr	r2, [r7, #28]
 4553 00c8 1346     		mov	r3, r2
 4554 00ca DB00     		lsls	r3, r3, #3
 4555 00cc 1344     		add	r3, r3, r2
 4556              		.loc 1 818 6 discriminator 3
 4557 00ce 0333     		adds	r3, r3, #3
 4558 00d0 7A68     		ldr	r2, [r7, #4]
 4559 00d2 1344     		add	r3, r3, r2
 4560              		.loc 1 818 15 discriminator 3
 4561 00d4 CAB2     		uxtb	r2, r1
 4562 00d6 1A70     		strb	r2, [r3]
 819:poly.c        ****     r[9*i+4]  = t[1] >> 14;
 4563              		.loc 1 819 18 discriminator 3
 4564 00d8 3B69     		ldr	r3, [r7, #16]
 4565              		.loc 1 819 22 discriminator 3
 4566 00da 990B     		lsrs	r1, r3, #14
 4567              		.loc 1 819 8 discriminator 3
 4568 00dc FA69     		ldr	r2, [r7, #28]
 4569 00de 1346     		mov	r3, r2
 4570 00e0 DB00     		lsls	r3, r3, #3
 4571 00e2 1344     		add	r3, r3, r2
 4572              		.loc 1 819 6 discriminator 3
 4573 00e4 0433     		adds	r3, r3, #4
 4574 00e6 7A68     		ldr	r2, [r7, #4]
 4575 00e8 1344     		add	r3, r3, r2
 4576              		.loc 1 819 15 discriminator 3
 4577 00ea CAB2     		uxtb	r2, r1
 4578 00ec 1A70     		strb	r2, [r3]
 820:poly.c        ****     r[9*i+4] |= t[2] << 4;
 4579              		.loc 1 820 14 discriminator 3
 4580 00ee FA69     		ldr	r2, [r7, #28]
 4581 00f0 1346     		mov	r3, r2
 4582 00f2 DB00     		lsls	r3, r3, #3
 4583 00f4 1344     		add	r3, r3, r2
 4584 00f6 0433     		adds	r3, r3, #4
 4585 00f8 7A68     		ldr	r2, [r7, #4]
 4586 00fa 1344     		add	r3, r3, r2
 4587 00fc 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 4588              		.loc 1 820 18 discriminator 3
 4589 00fe 7B69     		ldr	r3, [r7, #20]
 4590              		.loc 1 820 22 discriminator 3
 4591 0100 DBB2     		uxtb	r3, r3
 4592 0102 1B01     		lsls	r3, r3, #4
 4593 0104 D9B2     		uxtb	r1, r3
 4594              		.loc 1 820 14 discriminator 3
 4595 0106 FA69     		ldr	r2, [r7, #28]
 4596 0108 1346     		mov	r3, r2
 4597 010a DB00     		lsls	r3, r3, #3
 4598 010c 1344     		add	r3, r3, r2
 4599 010e 0433     		adds	r3, r3, #4
 4600 0110 7A68     		ldr	r2, [r7, #4]
 4601 0112 1344     		add	r3, r3, r2
 4602 0114 40EA0102 		orr	r2, r0, r1
 4603 0118 D2B2     		uxtb	r2, r2
 4604 011a 1A70     		strb	r2, [r3]
 821:poly.c        ****     r[9*i+5]  = t[2] >> 4;
 4605              		.loc 1 821 18 discriminator 3
 4606 011c 7B69     		ldr	r3, [r7, #20]
 4607              		.loc 1 821 22 discriminator 3
 4608 011e 1909     		lsrs	r1, r3, #4
 4609              		.loc 1 821 8 discriminator 3
 4610 0120 FA69     		ldr	r2, [r7, #28]
 4611 0122 1346     		mov	r3, r2
 4612 0124 DB00     		lsls	r3, r3, #3
 4613 0126 1344     		add	r3, r3, r2
 4614              		.loc 1 821 6 discriminator 3
 4615 0128 0533     		adds	r3, r3, #5
 4616 012a 7A68     		ldr	r2, [r7, #4]
 4617 012c 1344     		add	r3, r3, r2
 4618              		.loc 1 821 15 discriminator 3
 4619 012e CAB2     		uxtb	r2, r1
 4620 0130 1A70     		strb	r2, [r3]
 822:poly.c        ****     r[9*i+6]  = t[2] >> 12;
 4621              		.loc 1 822 18 discriminator 3
 4622 0132 7B69     		ldr	r3, [r7, #20]
 4623              		.loc 1 822 22 discriminator 3
 4624 0134 190B     		lsrs	r1, r3, #12
 4625              		.loc 1 822 8 discriminator 3
 4626 0136 FA69     		ldr	r2, [r7, #28]
 4627 0138 1346     		mov	r3, r2
 4628 013a DB00     		lsls	r3, r3, #3
 4629 013c 1344     		add	r3, r3, r2
 4630              		.loc 1 822 6 discriminator 3
 4631 013e 0633     		adds	r3, r3, #6
 4632 0140 7A68     		ldr	r2, [r7, #4]
 4633 0142 1344     		add	r3, r3, r2
 4634              		.loc 1 822 15 discriminator 3
 4635 0144 CAB2     		uxtb	r2, r1
 4636 0146 1A70     		strb	r2, [r3]
 823:poly.c        ****     r[9*i+6] |= t[3] << 6;
 4637              		.loc 1 823 14 discriminator 3
 4638 0148 FA69     		ldr	r2, [r7, #28]
 4639 014a 1346     		mov	r3, r2
 4640 014c DB00     		lsls	r3, r3, #3
 4641 014e 1344     		add	r3, r3, r2
 4642 0150 0633     		adds	r3, r3, #6
 4643 0152 7A68     		ldr	r2, [r7, #4]
 4644 0154 1344     		add	r3, r3, r2
 4645 0156 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 4646              		.loc 1 823 18 discriminator 3
 4647 0158 BB69     		ldr	r3, [r7, #24]
 4648              		.loc 1 823 22 discriminator 3
 4649 015a DBB2     		uxtb	r3, r3
 4650 015c 9B01     		lsls	r3, r3, #6
 4651 015e D9B2     		uxtb	r1, r3
 4652              		.loc 1 823 14 discriminator 3
 4653 0160 FA69     		ldr	r2, [r7, #28]
 4654 0162 1346     		mov	r3, r2
 4655 0164 DB00     		lsls	r3, r3, #3
 4656 0166 1344     		add	r3, r3, r2
 4657 0168 0633     		adds	r3, r3, #6
 4658 016a 7A68     		ldr	r2, [r7, #4]
 4659 016c 1344     		add	r3, r3, r2
 4660 016e 40EA0102 		orr	r2, r0, r1
 4661 0172 D2B2     		uxtb	r2, r2
 4662 0174 1A70     		strb	r2, [r3]
 824:poly.c        ****     r[9*i+7]  = t[3] >> 2;
 4663              		.loc 1 824 18 discriminator 3
 4664 0176 BB69     		ldr	r3, [r7, #24]
 4665              		.loc 1 824 22 discriminator 3
 4666 0178 9908     		lsrs	r1, r3, #2
 4667              		.loc 1 824 8 discriminator 3
 4668 017a FA69     		ldr	r2, [r7, #28]
 4669 017c 1346     		mov	r3, r2
 4670 017e DB00     		lsls	r3, r3, #3
 4671 0180 1344     		add	r3, r3, r2
 4672              		.loc 1 824 6 discriminator 3
 4673 0182 0733     		adds	r3, r3, #7
 4674 0184 7A68     		ldr	r2, [r7, #4]
 4675 0186 1344     		add	r3, r3, r2
 4676              		.loc 1 824 15 discriminator 3
 4677 0188 CAB2     		uxtb	r2, r1
 4678 018a 1A70     		strb	r2, [r3]
 825:poly.c        ****     r[9*i+8]  = t[3] >> 10;
 4679              		.loc 1 825 18 discriminator 3
 4680 018c BB69     		ldr	r3, [r7, #24]
 4681              		.loc 1 825 22 discriminator 3
 4682 018e 990A     		lsrs	r1, r3, #10
 4683              		.loc 1 825 8 discriminator 3
 4684 0190 FA69     		ldr	r2, [r7, #28]
 4685 0192 1346     		mov	r3, r2
 4686 0194 DB00     		lsls	r3, r3, #3
 4687 0196 1344     		add	r3, r3, r2
 4688              		.loc 1 825 6 discriminator 3
 4689 0198 0833     		adds	r3, r3, #8
 4690 019a 7A68     		ldr	r2, [r7, #4]
 4691 019c 1344     		add	r3, r3, r2
 4692              		.loc 1 825 15 discriminator 3
 4693 019e CAB2     		uxtb	r2, r1
 4694 01a0 1A70     		strb	r2, [r3]
 808:poly.c        ****     t[0] = GAMMA1 - a->coeffs[4*i+0];
 4695              		.loc 1 808 23 discriminator 3
 4696 01a2 FB69     		ldr	r3, [r7, #28]
 4697 01a4 0133     		adds	r3, r3, #1
 4698 01a6 FB61     		str	r3, [r7, #28]
 4699              	.L96:
 808:poly.c        ****     t[0] = GAMMA1 - a->coeffs[4*i+0];
 4700              		.loc 1 808 3 discriminator 1
 4701 01a8 FB69     		ldr	r3, [r7, #28]
 4702 01aa 3F2B     		cmp	r3, #63
 4703 01ac 7FF630AF 		bls	.L97
 826:poly.c        ****   }
 827:poly.c        **** #elif GAMMA1 == (1 << 19)
 828:poly.c        ****   for(i = 0; i < N/2; ++i) {
 829:poly.c        ****     t[0] = GAMMA1 - a->coeffs[2*i+0];
 830:poly.c        ****     t[1] = GAMMA1 - a->coeffs[2*i+1];
 831:poly.c        **** 
 832:poly.c        ****     r[5*i+0]  = t[0];
 833:poly.c        ****     r[5*i+1]  = t[0] >> 8;
 834:poly.c        ****     r[5*i+2]  = t[0] >> 16;
 835:poly.c        ****     r[5*i+2] |= t[1] << 4;
 836:poly.c        ****     r[5*i+3]  = t[1] >> 4;
 837:poly.c        ****     r[5*i+4]  = t[1] >> 12;
 838:poly.c        ****   }
 839:poly.c        **** #endif
 840:poly.c        **** 
 841:poly.c        ****   DBENCH_STOP(*tpack);
 842:poly.c        **** }
 4704              		.loc 1 842 1
 4705 01b0 00BF     		nop
 4706 01b2 00BF     		nop
 4707 01b4 2437     		adds	r7, r7, #36
 4708              	.LCFI145:
 4709              		.cfi_def_cfa_offset 4
 4710 01b6 BD46     		mov	sp, r7
 4711              	.LCFI146:
 4712              		.cfi_def_cfa_register 13
 4713              		@ sp needed
 4714 01b8 80BC     		pop	{r7}
 4715              	.LCFI147:
 4716              		.cfi_restore 7
 4717              		.cfi_def_cfa_offset 0
 4718 01ba 7047     		bx	lr
 4719              		.cfi_endproc
 4720              	.LFE26:
 4722              		.section	.text.pqcrystals_dilithium2_ref_polyz_unpack,"ax",%progbits
 4723              		.align	1
 4724              		.global	pqcrystals_dilithium2_ref_polyz_unpack
 4725              		.syntax unified
 4726              		.thumb
 4727              		.thumb_func
 4728              		.fpu softvfp
 4730              	pqcrystals_dilithium2_ref_polyz_unpack:
 4731              	.LFB27:
 843:poly.c        **** 
 844:poly.c        **** /*************************************************
 845:poly.c        **** * Name:        polyz_unpack
 846:poly.c        **** *
 847:poly.c        **** * Description: Unpack polynomial z with coefficients
 848:poly.c        **** *              in [-(GAMMA1 - 1), GAMMA1].
 849:poly.c        **** *
 850:poly.c        **** * Arguments:   - poly *r: pointer to output polynomial
 851:poly.c        **** *              - const uint8_t *a: byte array with bit-packed polynomial
 852:poly.c        **** **************************************************/
 853:poly.c        **** void polyz_unpack(poly *r, const uint8_t *a) {
 4732              		.loc 1 853 46
 4733              		.cfi_startproc
 4734              		@ args = 0, pretend = 0, frame = 16
 4735              		@ frame_needed = 1, uses_anonymous_args = 0
 4736 0000 80B5     		push	{r7, lr}
 4737              	.LCFI148:
 4738              		.cfi_def_cfa_offset 8
 4739              		.cfi_offset 7, -8
 4740              		.cfi_offset 14, -4
 4741 0002 84B0     		sub	sp, sp, #16
 4742              	.LCFI149:
 4743              		.cfi_def_cfa_offset 24
 4744 0004 00AF     		add	r7, sp, #0
 4745              	.LCFI150:
 4746              		.cfi_def_cfa_register 7
 4747 0006 7860     		str	r0, [r7, #4]
 4748 0008 3960     		str	r1, [r7]
 854:poly.c        ****   unsigned int i;
 855:poly.c        ****   DBENCH_START();
 856:poly.c        **** 
 857:poly.c        **** #if GAMMA1 == (1 << 17)
 858:poly.c        ****   for(i = 0; i < N/4; ++i) {
 4749              		.loc 1 858 9
 4750 000a 0023     		movs	r3, #0
 4751 000c FB60     		str	r3, [r7, #12]
 4752              		.loc 1 858 3
 4753 000e 72E1     		b	.L99
 4754              	.L100:
 859:poly.c        ****     trigger_high();
 4755              		.loc 1 859 5 discriminator 3
 4756 0010 FFF7FEFF 		bl	trigger_high
 860:poly.c        ****     r->coeffs[4*i+0]  = a[9*i+0];
 4757              		.loc 1 860 28 discriminator 3
 4758 0014 FA68     		ldr	r2, [r7, #12]
 4759 0016 1346     		mov	r3, r2
 4760 0018 DB00     		lsls	r3, r3, #3
 4761 001a 1344     		add	r3, r3, r2
 4762              		.loc 1 860 26 discriminator 3
 4763 001c 3A68     		ldr	r2, [r7]
 4764 001e 1344     		add	r3, r3, r2
 4765 0020 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4766              		.loc 1 860 18 discriminator 3
 4767 0022 FB68     		ldr	r3, [r7, #12]
 4768 0024 9A00     		lsls	r2, r3, #2
 4769              		.loc 1 860 23 discriminator 3
 4770 0026 7B68     		ldr	r3, [r7, #4]
 4771 0028 43F82210 		str	r1, [r3, r2, lsl #2]
 861:poly.c        ****     r->coeffs[4*i+0] |= (uint32_t)a[9*i+1] << 8;
 4772              		.loc 1 861 22 discriminator 3
 4773 002c FB68     		ldr	r3, [r7, #12]
 4774 002e 9A00     		lsls	r2, r3, #2
 4775 0030 7B68     		ldr	r3, [r7, #4]
 4776 0032 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4777 0036 1946     		mov	r1, r3
 4778              		.loc 1 861 38 discriminator 3
 4779 0038 FA68     		ldr	r2, [r7, #12]
 4780 003a 1346     		mov	r3, r2
 4781 003c DB00     		lsls	r3, r3, #3
 4782 003e 1344     		add	r3, r3, r2
 4783              		.loc 1 861 36 discriminator 3
 4784 0040 0133     		adds	r3, r3, #1
 4785 0042 3A68     		ldr	r2, [r7]
 4786 0044 1344     		add	r3, r3, r2
 4787 0046 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4788              		.loc 1 861 44 discriminator 3
 4789 0048 1B02     		lsls	r3, r3, #8
 4790              		.loc 1 861 22 discriminator 3
 4791 004a 1943     		orrs	r1, r1, r3
 4792 004c FB68     		ldr	r3, [r7, #12]
 4793 004e 9A00     		lsls	r2, r3, #2
 4794 0050 7B68     		ldr	r3, [r7, #4]
 4795 0052 43F82210 		str	r1, [r3, r2, lsl #2]
 862:poly.c        ****     r->coeffs[4*i+0] |= (uint32_t)a[9*i+2] << 16;
 4796              		.loc 1 862 22 discriminator 3
 4797 0056 FB68     		ldr	r3, [r7, #12]
 4798 0058 9A00     		lsls	r2, r3, #2
 4799 005a 7B68     		ldr	r3, [r7, #4]
 4800 005c 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4801 0060 1946     		mov	r1, r3
 4802              		.loc 1 862 38 discriminator 3
 4803 0062 FA68     		ldr	r2, [r7, #12]
 4804 0064 1346     		mov	r3, r2
 4805 0066 DB00     		lsls	r3, r3, #3
 4806 0068 1344     		add	r3, r3, r2
 4807              		.loc 1 862 36 discriminator 3
 4808 006a 0233     		adds	r3, r3, #2
 4809 006c 3A68     		ldr	r2, [r7]
 4810 006e 1344     		add	r3, r3, r2
 4811 0070 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4812              		.loc 1 862 44 discriminator 3
 4813 0072 1B04     		lsls	r3, r3, #16
 4814              		.loc 1 862 22 discriminator 3
 4815 0074 1943     		orrs	r1, r1, r3
 4816 0076 FB68     		ldr	r3, [r7, #12]
 4817 0078 9A00     		lsls	r2, r3, #2
 4818 007a 7B68     		ldr	r3, [r7, #4]
 4819 007c 43F82210 		str	r1, [r3, r2, lsl #2]
 863:poly.c        ****     r->coeffs[4*i+0] &= 0x3FFFF;
 4820              		.loc 1 863 22 discriminator 3
 4821 0080 FB68     		ldr	r3, [r7, #12]
 4822 0082 9A00     		lsls	r2, r3, #2
 4823 0084 7B68     		ldr	r3, [r7, #4]
 4824 0086 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4825 008a FA68     		ldr	r2, [r7, #12]
 4826 008c 9200     		lsls	r2, r2, #2
 4827 008e C3F31101 		ubfx	r1, r3, #0, #18
 4828 0092 7B68     		ldr	r3, [r7, #4]
 4829 0094 43F82210 		str	r1, [r3, r2, lsl #2]
 864:poly.c        ****     trigger_low();
 4830              		.loc 1 864 5 discriminator 3
 4831 0098 FFF7FEFF 		bl	trigger_low
 865:poly.c        **** 
 866:poly.c        **** 
 867:poly.c        **** 
 868:poly.c        ****     trigger_high();
 4832              		.loc 1 868 5 discriminator 3
 4833 009c FFF7FEFF 		bl	trigger_high
 869:poly.c        ****     r->coeffs[4*i+1]  = a[9*i+2] >> 2;
 4834              		.loc 1 869 28 discriminator 3
 4835 00a0 FA68     		ldr	r2, [r7, #12]
 4836 00a2 1346     		mov	r3, r2
 4837 00a4 DB00     		lsls	r3, r3, #3
 4838 00a6 1344     		add	r3, r3, r2
 4839              		.loc 1 869 26 discriminator 3
 4840 00a8 0233     		adds	r3, r3, #2
 4841 00aa 3A68     		ldr	r2, [r7]
 4842 00ac 1344     		add	r3, r3, r2
 4843 00ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4844              		.loc 1 869 34 discriminator 3
 4845 00b0 9B08     		lsrs	r3, r3, #2
 4846 00b2 D9B2     		uxtb	r1, r3
 4847              		.loc 1 869 16 discriminator 3
 4848 00b4 FB68     		ldr	r3, [r7, #12]
 4849 00b6 9B00     		lsls	r3, r3, #2
 4850              		.loc 1 869 18 discriminator 3
 4851 00b8 5A1C     		adds	r2, r3, #1
 4852              		.loc 1 869 23 discriminator 3
 4853 00ba 7B68     		ldr	r3, [r7, #4]
 4854 00bc 43F82210 		str	r1, [r3, r2, lsl #2]
 870:poly.c        ****     r->coeffs[4*i+1] |= (uint32_t)a[9*i+3] << 6;
 4855              		.loc 1 870 22 discriminator 3
 4856 00c0 FB68     		ldr	r3, [r7, #12]
 4857 00c2 9B00     		lsls	r3, r3, #2
 4858 00c4 5A1C     		adds	r2, r3, #1
 4859 00c6 7B68     		ldr	r3, [r7, #4]
 4860 00c8 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4861 00cc 1946     		mov	r1, r3
 4862              		.loc 1 870 38 discriminator 3
 4863 00ce FA68     		ldr	r2, [r7, #12]
 4864 00d0 1346     		mov	r3, r2
 4865 00d2 DB00     		lsls	r3, r3, #3
 4866 00d4 1344     		add	r3, r3, r2
 4867              		.loc 1 870 36 discriminator 3
 4868 00d6 0333     		adds	r3, r3, #3
 4869 00d8 3A68     		ldr	r2, [r7]
 4870 00da 1344     		add	r3, r3, r2
 4871 00dc 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4872              		.loc 1 870 44 discriminator 3
 4873 00de 9B01     		lsls	r3, r3, #6
 4874              		.loc 1 870 22 discriminator 3
 4875 00e0 1943     		orrs	r1, r1, r3
 4876 00e2 FB68     		ldr	r3, [r7, #12]
 4877 00e4 9B00     		lsls	r3, r3, #2
 4878 00e6 5A1C     		adds	r2, r3, #1
 4879 00e8 7B68     		ldr	r3, [r7, #4]
 4880 00ea 43F82210 		str	r1, [r3, r2, lsl #2]
 871:poly.c        ****     r->coeffs[4*i+1] |= (uint32_t)a[9*i+4] << 14;
 4881              		.loc 1 871 22 discriminator 3
 4882 00ee FB68     		ldr	r3, [r7, #12]
 4883 00f0 9B00     		lsls	r3, r3, #2
 4884 00f2 5A1C     		adds	r2, r3, #1
 4885 00f4 7B68     		ldr	r3, [r7, #4]
 4886 00f6 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4887 00fa 1946     		mov	r1, r3
 4888              		.loc 1 871 38 discriminator 3
 4889 00fc FA68     		ldr	r2, [r7, #12]
 4890 00fe 1346     		mov	r3, r2
 4891 0100 DB00     		lsls	r3, r3, #3
 4892 0102 1344     		add	r3, r3, r2
 4893              		.loc 1 871 36 discriminator 3
 4894 0104 0433     		adds	r3, r3, #4
 4895 0106 3A68     		ldr	r2, [r7]
 4896 0108 1344     		add	r3, r3, r2
 4897 010a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4898              		.loc 1 871 44 discriminator 3
 4899 010c 9B03     		lsls	r3, r3, #14
 4900              		.loc 1 871 22 discriminator 3
 4901 010e 1943     		orrs	r1, r1, r3
 4902 0110 FB68     		ldr	r3, [r7, #12]
 4903 0112 9B00     		lsls	r3, r3, #2
 4904 0114 5A1C     		adds	r2, r3, #1
 4905 0116 7B68     		ldr	r3, [r7, #4]
 4906 0118 43F82210 		str	r1, [r3, r2, lsl #2]
 872:poly.c        ****     r->coeffs[4*i+1] &= 0x3FFFF;
 4907              		.loc 1 872 22 discriminator 3
 4908 011c FB68     		ldr	r3, [r7, #12]
 4909 011e 9B00     		lsls	r3, r3, #2
 4910 0120 5A1C     		adds	r2, r3, #1
 4911 0122 7B68     		ldr	r3, [r7, #4]
 4912 0124 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4913 0128 FA68     		ldr	r2, [r7, #12]
 4914 012a 9200     		lsls	r2, r2, #2
 4915 012c 0132     		adds	r2, r2, #1
 4916 012e C3F31101 		ubfx	r1, r3, #0, #18
 4917 0132 7B68     		ldr	r3, [r7, #4]
 4918 0134 43F82210 		str	r1, [r3, r2, lsl #2]
 873:poly.c        ****     trigger_low();
 4919              		.loc 1 873 5 discriminator 3
 4920 0138 FFF7FEFF 		bl	trigger_low
 874:poly.c        **** 
 875:poly.c        **** 
 876:poly.c        ****     trigger_high();
 4921              		.loc 1 876 5 discriminator 3
 4922 013c FFF7FEFF 		bl	trigger_high
 877:poly.c        ****     r->coeffs[4*i+2]  = a[9*i+4] >> 4;
 4923              		.loc 1 877 28 discriminator 3
 4924 0140 FA68     		ldr	r2, [r7, #12]
 4925 0142 1346     		mov	r3, r2
 4926 0144 DB00     		lsls	r3, r3, #3
 4927 0146 1344     		add	r3, r3, r2
 4928              		.loc 1 877 26 discriminator 3
 4929 0148 0433     		adds	r3, r3, #4
 4930 014a 3A68     		ldr	r2, [r7]
 4931 014c 1344     		add	r3, r3, r2
 4932 014e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4933              		.loc 1 877 34 discriminator 3
 4934 0150 1B09     		lsrs	r3, r3, #4
 4935 0152 D9B2     		uxtb	r1, r3
 4936              		.loc 1 877 16 discriminator 3
 4937 0154 FB68     		ldr	r3, [r7, #12]
 4938 0156 9B00     		lsls	r3, r3, #2
 4939              		.loc 1 877 18 discriminator 3
 4940 0158 9A1C     		adds	r2, r3, #2
 4941              		.loc 1 877 23 discriminator 3
 4942 015a 7B68     		ldr	r3, [r7, #4]
 4943 015c 43F82210 		str	r1, [r3, r2, lsl #2]
 878:poly.c        ****     r->coeffs[4*i+2] |= (uint32_t)a[9*i+5] << 4;
 4944              		.loc 1 878 22 discriminator 3
 4945 0160 FB68     		ldr	r3, [r7, #12]
 4946 0162 9B00     		lsls	r3, r3, #2
 4947 0164 9A1C     		adds	r2, r3, #2
 4948 0166 7B68     		ldr	r3, [r7, #4]
 4949 0168 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4950 016c 1946     		mov	r1, r3
 4951              		.loc 1 878 38 discriminator 3
 4952 016e FA68     		ldr	r2, [r7, #12]
 4953 0170 1346     		mov	r3, r2
 4954 0172 DB00     		lsls	r3, r3, #3
 4955 0174 1344     		add	r3, r3, r2
 4956              		.loc 1 878 36 discriminator 3
 4957 0176 0533     		adds	r3, r3, #5
 4958 0178 3A68     		ldr	r2, [r7]
 4959 017a 1344     		add	r3, r3, r2
 4960 017c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4961              		.loc 1 878 44 discriminator 3
 4962 017e 1B01     		lsls	r3, r3, #4
 4963              		.loc 1 878 22 discriminator 3
 4964 0180 1943     		orrs	r1, r1, r3
 4965 0182 FB68     		ldr	r3, [r7, #12]
 4966 0184 9B00     		lsls	r3, r3, #2
 4967 0186 9A1C     		adds	r2, r3, #2
 4968 0188 7B68     		ldr	r3, [r7, #4]
 4969 018a 43F82210 		str	r1, [r3, r2, lsl #2]
 879:poly.c        ****     r->coeffs[4*i+2] |= (uint32_t)a[9*i+6] << 12;
 4970              		.loc 1 879 22 discriminator 3
 4971 018e FB68     		ldr	r3, [r7, #12]
 4972 0190 9B00     		lsls	r3, r3, #2
 4973 0192 9A1C     		adds	r2, r3, #2
 4974 0194 7B68     		ldr	r3, [r7, #4]
 4975 0196 53F82230 		ldr	r3, [r3, r2, lsl #2]
 4976 019a 1946     		mov	r1, r3
 4977              		.loc 1 879 38 discriminator 3
 4978 019c FA68     		ldr	r2, [r7, #12]
 4979 019e 1346     		mov	r3, r2
 4980 01a0 DB00     		lsls	r3, r3, #3
 4981 01a2 1344     		add	r3, r3, r2
 4982              		.loc 1 879 36 discriminator 3
 4983 01a4 0633     		adds	r3, r3, #6
 4984 01a6 3A68     		ldr	r2, [r7]
 4985 01a8 1344     		add	r3, r3, r2
 4986 01aa 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 4987              		.loc 1 879 44 discriminator 3
 4988 01ac 1B03     		lsls	r3, r3, #12
 4989              		.loc 1 879 22 discriminator 3
 4990 01ae 1943     		orrs	r1, r1, r3
 4991 01b0 FB68     		ldr	r3, [r7, #12]
 4992 01b2 9B00     		lsls	r3, r3, #2
 4993 01b4 9A1C     		adds	r2, r3, #2
 4994 01b6 7B68     		ldr	r3, [r7, #4]
 4995 01b8 43F82210 		str	r1, [r3, r2, lsl #2]
 880:poly.c        ****     r->coeffs[4*i+2] &= 0x3FFFF;
 4996              		.loc 1 880 22 discriminator 3
 4997 01bc FB68     		ldr	r3, [r7, #12]
 4998 01be 9B00     		lsls	r3, r3, #2
 4999 01c0 9A1C     		adds	r2, r3, #2
 5000 01c2 7B68     		ldr	r3, [r7, #4]
 5001 01c4 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5002 01c8 FA68     		ldr	r2, [r7, #12]
 5003 01ca 9200     		lsls	r2, r2, #2
 5004 01cc 0232     		adds	r2, r2, #2
 5005 01ce C3F31101 		ubfx	r1, r3, #0, #18
 5006 01d2 7B68     		ldr	r3, [r7, #4]
 5007 01d4 43F82210 		str	r1, [r3, r2, lsl #2]
 881:poly.c        ****     trigger_low();
 5008              		.loc 1 881 5 discriminator 3
 5009 01d8 FFF7FEFF 		bl	trigger_low
 882:poly.c        **** 
 883:poly.c        **** 
 884:poly.c        **** 
 885:poly.c        ****     trigger_high();
 5010              		.loc 1 885 5 discriminator 3
 5011 01dc FFF7FEFF 		bl	trigger_high
 886:poly.c        ****     r->coeffs[4*i+3]  = a[9*i+6] >> 6;
 5012              		.loc 1 886 28 discriminator 3
 5013 01e0 FA68     		ldr	r2, [r7, #12]
 5014 01e2 1346     		mov	r3, r2
 5015 01e4 DB00     		lsls	r3, r3, #3
 5016 01e6 1344     		add	r3, r3, r2
 5017              		.loc 1 886 26 discriminator 3
 5018 01e8 0633     		adds	r3, r3, #6
 5019 01ea 3A68     		ldr	r2, [r7]
 5020 01ec 1344     		add	r3, r3, r2
 5021 01ee 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5022              		.loc 1 886 34 discriminator 3
 5023 01f0 9B09     		lsrs	r3, r3, #6
 5024 01f2 D9B2     		uxtb	r1, r3
 5025              		.loc 1 886 16 discriminator 3
 5026 01f4 FB68     		ldr	r3, [r7, #12]
 5027 01f6 9B00     		lsls	r3, r3, #2
 5028              		.loc 1 886 18 discriminator 3
 5029 01f8 DA1C     		adds	r2, r3, #3
 5030              		.loc 1 886 23 discriminator 3
 5031 01fa 7B68     		ldr	r3, [r7, #4]
 5032 01fc 43F82210 		str	r1, [r3, r2, lsl #2]
 887:poly.c        ****     r->coeffs[4*i+3] |= (uint32_t)a[9*i+7] << 2;
 5033              		.loc 1 887 22 discriminator 3
 5034 0200 FB68     		ldr	r3, [r7, #12]
 5035 0202 9B00     		lsls	r3, r3, #2
 5036 0204 DA1C     		adds	r2, r3, #3
 5037 0206 7B68     		ldr	r3, [r7, #4]
 5038 0208 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5039 020c 1946     		mov	r1, r3
 5040              		.loc 1 887 38 discriminator 3
 5041 020e FA68     		ldr	r2, [r7, #12]
 5042 0210 1346     		mov	r3, r2
 5043 0212 DB00     		lsls	r3, r3, #3
 5044 0214 1344     		add	r3, r3, r2
 5045              		.loc 1 887 36 discriminator 3
 5046 0216 0733     		adds	r3, r3, #7
 5047 0218 3A68     		ldr	r2, [r7]
 5048 021a 1344     		add	r3, r3, r2
 5049 021c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5050              		.loc 1 887 44 discriminator 3
 5051 021e 9B00     		lsls	r3, r3, #2
 5052              		.loc 1 887 22 discriminator 3
 5053 0220 1943     		orrs	r1, r1, r3
 5054 0222 FB68     		ldr	r3, [r7, #12]
 5055 0224 9B00     		lsls	r3, r3, #2
 5056 0226 DA1C     		adds	r2, r3, #3
 5057 0228 7B68     		ldr	r3, [r7, #4]
 5058 022a 43F82210 		str	r1, [r3, r2, lsl #2]
 888:poly.c        ****     r->coeffs[4*i+3] |= (uint32_t)a[9*i+8] << 10;
 5059              		.loc 1 888 22 discriminator 3
 5060 022e FB68     		ldr	r3, [r7, #12]
 5061 0230 9B00     		lsls	r3, r3, #2
 5062 0232 DA1C     		adds	r2, r3, #3
 5063 0234 7B68     		ldr	r3, [r7, #4]
 5064 0236 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5065 023a 1946     		mov	r1, r3
 5066              		.loc 1 888 38 discriminator 3
 5067 023c FA68     		ldr	r2, [r7, #12]
 5068 023e 1346     		mov	r3, r2
 5069 0240 DB00     		lsls	r3, r3, #3
 5070 0242 1344     		add	r3, r3, r2
 5071              		.loc 1 888 36 discriminator 3
 5072 0244 0833     		adds	r3, r3, #8
 5073 0246 3A68     		ldr	r2, [r7]
 5074 0248 1344     		add	r3, r3, r2
 5075 024a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5076              		.loc 1 888 44 discriminator 3
 5077 024c 9B02     		lsls	r3, r3, #10
 5078              		.loc 1 888 22 discriminator 3
 5079 024e 1943     		orrs	r1, r1, r3
 5080 0250 FB68     		ldr	r3, [r7, #12]
 5081 0252 9B00     		lsls	r3, r3, #2
 5082 0254 DA1C     		adds	r2, r3, #3
 5083 0256 7B68     		ldr	r3, [r7, #4]
 5084 0258 43F82210 		str	r1, [r3, r2, lsl #2]
 889:poly.c        ****     r->coeffs[4*i+3] &= 0x3FFFF;
 5085              		.loc 1 889 22 discriminator 3
 5086 025c FB68     		ldr	r3, [r7, #12]
 5087 025e 9B00     		lsls	r3, r3, #2
 5088 0260 DA1C     		adds	r2, r3, #3
 5089 0262 7B68     		ldr	r3, [r7, #4]
 5090 0264 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5091 0268 FA68     		ldr	r2, [r7, #12]
 5092 026a 9200     		lsls	r2, r2, #2
 5093 026c 0332     		adds	r2, r2, #3
 5094 026e C3F31101 		ubfx	r1, r3, #0, #18
 5095 0272 7B68     		ldr	r3, [r7, #4]
 5096 0274 43F82210 		str	r1, [r3, r2, lsl #2]
 890:poly.c        ****     trigger_low();
 5097              		.loc 1 890 5 discriminator 3
 5098 0278 FFF7FEFF 		bl	trigger_low
 891:poly.c        **** 
 892:poly.c        **** 
 893:poly.c        **** 
 894:poly.c        ****     trigger_high();
 5099              		.loc 1 894 5 discriminator 3
 5100 027c FFF7FEFF 		bl	trigger_high
 895:poly.c        ****     r->coeffs[4*i+0] = GAMMA1 - r->coeffs[4*i+0];
 5101              		.loc 1 895 46 discriminator 3
 5102 0280 FB68     		ldr	r3, [r7, #12]
 5103 0282 9A00     		lsls	r2, r3, #2
 5104              		.loc 1 895 42 discriminator 3
 5105 0284 7B68     		ldr	r3, [r7, #4]
 5106 0286 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5107              		.loc 1 895 18 discriminator 3
 5108 028a FA68     		ldr	r2, [r7, #12]
 5109 028c 9200     		lsls	r2, r2, #2
 5110              		.loc 1 895 31 discriminator 3
 5111 028e C3F50031 		rsb	r1, r3, #131072
 5112              		.loc 1 895 22 discriminator 3
 5113 0292 7B68     		ldr	r3, [r7, #4]
 5114 0294 43F82210 		str	r1, [r3, r2, lsl #2]
 896:poly.c        ****     r->coeffs[4*i+1] = GAMMA1 - r->coeffs[4*i+1];
 5115              		.loc 1 896 44 discriminator 3
 5116 0298 FB68     		ldr	r3, [r7, #12]
 5117 029a 9B00     		lsls	r3, r3, #2
 5118              		.loc 1 896 46 discriminator 3
 5119 029c 5A1C     		adds	r2, r3, #1
 5120              		.loc 1 896 42 discriminator 3
 5121 029e 7B68     		ldr	r3, [r7, #4]
 5122 02a0 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5123              		.loc 1 896 16 discriminator 3
 5124 02a4 FA68     		ldr	r2, [r7, #12]
 5125 02a6 9200     		lsls	r2, r2, #2
 5126              		.loc 1 896 18 discriminator 3
 5127 02a8 0132     		adds	r2, r2, #1
 5128              		.loc 1 896 31 discriminator 3
 5129 02aa C3F50031 		rsb	r1, r3, #131072
 5130              		.loc 1 896 22 discriminator 3
 5131 02ae 7B68     		ldr	r3, [r7, #4]
 5132 02b0 43F82210 		str	r1, [r3, r2, lsl #2]
 897:poly.c        ****     r->coeffs[4*i+2] = GAMMA1 - r->coeffs[4*i+2];
 5133              		.loc 1 897 44 discriminator 3
 5134 02b4 FB68     		ldr	r3, [r7, #12]
 5135 02b6 9B00     		lsls	r3, r3, #2
 5136              		.loc 1 897 46 discriminator 3
 5137 02b8 9A1C     		adds	r2, r3, #2
 5138              		.loc 1 897 42 discriminator 3
 5139 02ba 7B68     		ldr	r3, [r7, #4]
 5140 02bc 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5141              		.loc 1 897 16 discriminator 3
 5142 02c0 FA68     		ldr	r2, [r7, #12]
 5143 02c2 9200     		lsls	r2, r2, #2
 5144              		.loc 1 897 18 discriminator 3
 5145 02c4 0232     		adds	r2, r2, #2
 5146              		.loc 1 897 31 discriminator 3
 5147 02c6 C3F50031 		rsb	r1, r3, #131072
 5148              		.loc 1 897 22 discriminator 3
 5149 02ca 7B68     		ldr	r3, [r7, #4]
 5150 02cc 43F82210 		str	r1, [r3, r2, lsl #2]
 898:poly.c        ****     r->coeffs[4*i+3] = GAMMA1 - r->coeffs[4*i+3];
 5151              		.loc 1 898 44 discriminator 3
 5152 02d0 FB68     		ldr	r3, [r7, #12]
 5153 02d2 9B00     		lsls	r3, r3, #2
 5154              		.loc 1 898 46 discriminator 3
 5155 02d4 DA1C     		adds	r2, r3, #3
 5156              		.loc 1 898 42 discriminator 3
 5157 02d6 7B68     		ldr	r3, [r7, #4]
 5158 02d8 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5159              		.loc 1 898 16 discriminator 3
 5160 02dc FA68     		ldr	r2, [r7, #12]
 5161 02de 9200     		lsls	r2, r2, #2
 5162              		.loc 1 898 18 discriminator 3
 5163 02e0 0332     		adds	r2, r2, #3
 5164              		.loc 1 898 31 discriminator 3
 5165 02e2 C3F50031 		rsb	r1, r3, #131072
 5166              		.loc 1 898 22 discriminator 3
 5167 02e6 7B68     		ldr	r3, [r7, #4]
 5168 02e8 43F82210 		str	r1, [r3, r2, lsl #2]
 899:poly.c        ****     trigger_low();
 5169              		.loc 1 899 5 discriminator 3
 5170 02ec FFF7FEFF 		bl	trigger_low
 858:poly.c        ****     trigger_high();
 5171              		.loc 1 858 23 discriminator 3
 5172 02f0 FB68     		ldr	r3, [r7, #12]
 5173 02f2 0133     		adds	r3, r3, #1
 5174 02f4 FB60     		str	r3, [r7, #12]
 5175              	.L99:
 858:poly.c        ****     trigger_high();
 5176              		.loc 1 858 3 discriminator 1
 5177 02f6 FB68     		ldr	r3, [r7, #12]
 5178 02f8 3F2B     		cmp	r3, #63
 5179 02fa 7FF689AE 		bls	.L100
 900:poly.c        ****   }
 901:poly.c        **** #elif GAMMA1 == (1 << 19)
 902:poly.c        ****   for(i = 0; i < N/2; ++i) {
 903:poly.c        ****     r->coeffs[2*i+0]  = a[5*i+0];
 904:poly.c        ****     r->coeffs[2*i+0] |= (uint32_t)a[5*i+1] << 8;
 905:poly.c        ****     r->coeffs[2*i+0] |= (uint32_t)a[5*i+2] << 16;
 906:poly.c        ****     r->coeffs[2*i+0] &= 0xFFFFF;
 907:poly.c        **** 
 908:poly.c        ****     r->coeffs[2*i+1]  = a[5*i+2] >> 4;
 909:poly.c        ****     r->coeffs[2*i+1] |= (uint32_t)a[5*i+3] << 4;
 910:poly.c        ****     r->coeffs[2*i+1] |= (uint32_t)a[5*i+4] << 12;
 911:poly.c        ****     r->coeffs[2*i+0] &= 0xFFFFF;
 912:poly.c        **** 
 913:poly.c        ****     r->coeffs[2*i+0] = GAMMA1 - r->coeffs[2*i+0];
 914:poly.c        ****     r->coeffs[2*i+1] = GAMMA1 - r->coeffs[2*i+1];
 915:poly.c        ****   }
 916:poly.c        **** #endif
 917:poly.c        **** 
 918:poly.c        ****   DBENCH_STOP(*tpack);
 919:poly.c        **** }
 5180              		.loc 1 919 1
 5181 02fe 00BF     		nop
 5182 0300 00BF     		nop
 5183 0302 1037     		adds	r7, r7, #16
 5184              	.LCFI151:
 5185              		.cfi_def_cfa_offset 8
 5186 0304 BD46     		mov	sp, r7
 5187              	.LCFI152:
 5188              		.cfi_def_cfa_register 13
 5189              		@ sp needed
 5190 0306 80BD     		pop	{r7, pc}
 5191              		.cfi_endproc
 5192              	.LFE27:
 5194              		.section	.text.pqcrystals_dilithium2_ref_polyw1_pack,"ax",%progbits
 5195              		.align	1
 5196              		.global	pqcrystals_dilithium2_ref_polyw1_pack
 5197              		.syntax unified
 5198              		.thumb
 5199              		.thumb_func
 5200              		.fpu softvfp
 5202              	pqcrystals_dilithium2_ref_polyw1_pack:
 5203              	.LFB28:
 920:poly.c        **** 
 921:poly.c        **** /*************************************************
 922:poly.c        **** * Name:        polyw1_pack
 923:poly.c        **** *
 924:poly.c        **** * Description: Bit-pack polynomial w1 with coefficients in [0,15] or [0,43].
 925:poly.c        **** *              Input coefficients are assumed to be standard representatives.
 926:poly.c        **** *
 927:poly.c        **** * Arguments:   - uint8_t *r: pointer to output byte array with at least
 928:poly.c        **** *                            POLYW1_PACKEDBYTES bytes
 929:poly.c        **** *              - const poly *a: pointer to input polynomial
 930:poly.c        **** **************************************************/
 931:poly.c        **** void polyw1_pack(uint8_t *r, const poly *a) {
 5204              		.loc 1 931 45
 5205              		.cfi_startproc
 5206              		@ args = 0, pretend = 0, frame = 16
 5207              		@ frame_needed = 1, uses_anonymous_args = 0
 5208              		@ link register save eliminated.
 5209 0000 80B4     		push	{r7}
 5210              	.LCFI153:
 5211              		.cfi_def_cfa_offset 4
 5212              		.cfi_offset 7, -4
 5213 0002 85B0     		sub	sp, sp, #20
 5214              	.LCFI154:
 5215              		.cfi_def_cfa_offset 24
 5216 0004 00AF     		add	r7, sp, #0
 5217              	.LCFI155:
 5218              		.cfi_def_cfa_register 7
 5219 0006 7860     		str	r0, [r7, #4]
 5220 0008 3960     		str	r1, [r7]
 932:poly.c        ****   unsigned int i;
 933:poly.c        ****   DBENCH_START();
 934:poly.c        **** 
 935:poly.c        **** #if GAMMA2 == (Q-1)/88
 936:poly.c        ****   for(i = 0; i < N/4; ++i) {
 5221              		.loc 1 936 9
 5222 000a 0023     		movs	r3, #0
 5223 000c FB60     		str	r3, [r7, #12]
 5224              		.loc 1 936 3
 5225 000e 81E0     		b	.L102
 5226              	.L103:
 937:poly.c        ****     r[3*i+0]  = a->coeffs[4*i+0];
 5227              		.loc 1 937 30 discriminator 3
 5228 0010 FB68     		ldr	r3, [r7, #12]
 5229 0012 9A00     		lsls	r2, r3, #2
 5230              		.loc 1 937 26 discriminator 3
 5231 0014 3B68     		ldr	r3, [r7]
 5232 0016 53F82210 		ldr	r1, [r3, r2, lsl #2]
 5233              		.loc 1 937 8 discriminator 3
 5234 001a FA68     		ldr	r2, [r7, #12]
 5235 001c 1346     		mov	r3, r2
 5236 001e 5B00     		lsls	r3, r3, #1
 5237 0020 1344     		add	r3, r3, r2
 5238              		.loc 1 937 6 discriminator 3
 5239 0022 7A68     		ldr	r2, [r7, #4]
 5240 0024 1344     		add	r3, r3, r2
 5241              		.loc 1 937 15 discriminator 3
 5242 0026 CAB2     		uxtb	r2, r1
 5243 0028 1A70     		strb	r2, [r3]
 938:poly.c        ****     r[3*i+0] |= a->coeffs[4*i+1] << 6;
 5244              		.loc 1 938 14 discriminator 3
 5245 002a FA68     		ldr	r2, [r7, #12]
 5246 002c 1346     		mov	r3, r2
 5247 002e 5B00     		lsls	r3, r3, #1
 5248 0030 1344     		add	r3, r3, r2
 5249 0032 7A68     		ldr	r2, [r7, #4]
 5250 0034 1344     		add	r3, r3, r2
 5251 0036 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5252 0038 5AB2     		sxtb	r2, r3
 5253              		.loc 1 938 28 discriminator 3
 5254 003a FB68     		ldr	r3, [r7, #12]
 5255 003c 9B00     		lsls	r3, r3, #2
 5256              		.loc 1 938 30 discriminator 3
 5257 003e 591C     		adds	r1, r3, #1
 5258              		.loc 1 938 26 discriminator 3
 5259 0040 3B68     		ldr	r3, [r7]
 5260 0042 53F82130 		ldr	r3, [r3, r1, lsl #2]
 5261              		.loc 1 938 34 discriminator 3
 5262 0046 9B01     		lsls	r3, r3, #6
 5263              		.loc 1 938 14 discriminator 3
 5264 0048 5BB2     		sxtb	r3, r3
 5265 004a 1343     		orrs	r3, r3, r2
 5266 004c 59B2     		sxtb	r1, r3
 5267 004e FA68     		ldr	r2, [r7, #12]
 5268 0050 1346     		mov	r3, r2
 5269 0052 5B00     		lsls	r3, r3, #1
 5270 0054 1344     		add	r3, r3, r2
 5271 0056 7A68     		ldr	r2, [r7, #4]
 5272 0058 1344     		add	r3, r3, r2
 5273 005a CAB2     		uxtb	r2, r1
 5274 005c 1A70     		strb	r2, [r3]
 939:poly.c        ****     r[3*i+1]  = a->coeffs[4*i+1] >> 2;
 5275              		.loc 1 939 28 discriminator 3
 5276 005e FB68     		ldr	r3, [r7, #12]
 5277 0060 9B00     		lsls	r3, r3, #2
 5278              		.loc 1 939 30 discriminator 3
 5279 0062 5A1C     		adds	r2, r3, #1
 5280              		.loc 1 939 26 discriminator 3
 5281 0064 3B68     		ldr	r3, [r7]
 5282 0066 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5283              		.loc 1 939 34 discriminator 3
 5284 006a 9910     		asrs	r1, r3, #2
 5285              		.loc 1 939 8 discriminator 3
 5286 006c FA68     		ldr	r2, [r7, #12]
 5287 006e 1346     		mov	r3, r2
 5288 0070 5B00     		lsls	r3, r3, #1
 5289 0072 1344     		add	r3, r3, r2
 5290              		.loc 1 939 6 discriminator 3
 5291 0074 0133     		adds	r3, r3, #1
 5292 0076 7A68     		ldr	r2, [r7, #4]
 5293 0078 1344     		add	r3, r3, r2
 5294              		.loc 1 939 15 discriminator 3
 5295 007a CAB2     		uxtb	r2, r1
 5296 007c 1A70     		strb	r2, [r3]
 940:poly.c        ****     r[3*i+1] |= a->coeffs[4*i+2] << 4;
 5297              		.loc 1 940 14 discriminator 3
 5298 007e FA68     		ldr	r2, [r7, #12]
 5299 0080 1346     		mov	r3, r2
 5300 0082 5B00     		lsls	r3, r3, #1
 5301 0084 1344     		add	r3, r3, r2
 5302 0086 0133     		adds	r3, r3, #1
 5303 0088 7A68     		ldr	r2, [r7, #4]
 5304 008a 1344     		add	r3, r3, r2
 5305 008c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5306 008e 5AB2     		sxtb	r2, r3
 5307              		.loc 1 940 28 discriminator 3
 5308 0090 FB68     		ldr	r3, [r7, #12]
 5309 0092 9B00     		lsls	r3, r3, #2
 5310              		.loc 1 940 30 discriminator 3
 5311 0094 991C     		adds	r1, r3, #2
 5312              		.loc 1 940 26 discriminator 3
 5313 0096 3B68     		ldr	r3, [r7]
 5314 0098 53F82130 		ldr	r3, [r3, r1, lsl #2]
 5315              		.loc 1 940 34 discriminator 3
 5316 009c 1B01     		lsls	r3, r3, #4
 5317              		.loc 1 940 14 discriminator 3
 5318 009e 5BB2     		sxtb	r3, r3
 5319 00a0 1343     		orrs	r3, r3, r2
 5320 00a2 59B2     		sxtb	r1, r3
 5321 00a4 FA68     		ldr	r2, [r7, #12]
 5322 00a6 1346     		mov	r3, r2
 5323 00a8 5B00     		lsls	r3, r3, #1
 5324 00aa 1344     		add	r3, r3, r2
 5325 00ac 0133     		adds	r3, r3, #1
 5326 00ae 7A68     		ldr	r2, [r7, #4]
 5327 00b0 1344     		add	r3, r3, r2
 5328 00b2 CAB2     		uxtb	r2, r1
 5329 00b4 1A70     		strb	r2, [r3]
 941:poly.c        ****     r[3*i+2]  = a->coeffs[4*i+2] >> 4;
 5330              		.loc 1 941 28 discriminator 3
 5331 00b6 FB68     		ldr	r3, [r7, #12]
 5332 00b8 9B00     		lsls	r3, r3, #2
 5333              		.loc 1 941 30 discriminator 3
 5334 00ba 9A1C     		adds	r2, r3, #2
 5335              		.loc 1 941 26 discriminator 3
 5336 00bc 3B68     		ldr	r3, [r7]
 5337 00be 53F82230 		ldr	r3, [r3, r2, lsl #2]
 5338              		.loc 1 941 34 discriminator 3
 5339 00c2 1911     		asrs	r1, r3, #4
 5340              		.loc 1 941 8 discriminator 3
 5341 00c4 FA68     		ldr	r2, [r7, #12]
 5342 00c6 1346     		mov	r3, r2
 5343 00c8 5B00     		lsls	r3, r3, #1
 5344 00ca 1344     		add	r3, r3, r2
 5345              		.loc 1 941 6 discriminator 3
 5346 00cc 0233     		adds	r3, r3, #2
 5347 00ce 7A68     		ldr	r2, [r7, #4]
 5348 00d0 1344     		add	r3, r3, r2
 5349              		.loc 1 941 15 discriminator 3
 5350 00d2 CAB2     		uxtb	r2, r1
 5351 00d4 1A70     		strb	r2, [r3]
 942:poly.c        ****     r[3*i+2] |= a->coeffs[4*i+3] << 2;
 5352              		.loc 1 942 14 discriminator 3
 5353 00d6 FA68     		ldr	r2, [r7, #12]
 5354 00d8 1346     		mov	r3, r2
 5355 00da 5B00     		lsls	r3, r3, #1
 5356 00dc 1344     		add	r3, r3, r2
 5357 00de 0233     		adds	r3, r3, #2
 5358 00e0 7A68     		ldr	r2, [r7, #4]
 5359 00e2 1344     		add	r3, r3, r2
 5360 00e4 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 5361 00e6 5AB2     		sxtb	r2, r3
 5362              		.loc 1 942 28 discriminator 3
 5363 00e8 FB68     		ldr	r3, [r7, #12]
 5364 00ea 9B00     		lsls	r3, r3, #2
 5365              		.loc 1 942 30 discriminator 3
 5366 00ec D91C     		adds	r1, r3, #3
 5367              		.loc 1 942 26 discriminator 3
 5368 00ee 3B68     		ldr	r3, [r7]
 5369 00f0 53F82130 		ldr	r3, [r3, r1, lsl #2]
 5370              		.loc 1 942 34 discriminator 3
 5371 00f4 9B00     		lsls	r3, r3, #2
 5372              		.loc 1 942 14 discriminator 3
 5373 00f6 5BB2     		sxtb	r3, r3
 5374 00f8 1343     		orrs	r3, r3, r2
 5375 00fa 59B2     		sxtb	r1, r3
 5376 00fc FA68     		ldr	r2, [r7, #12]
 5377 00fe 1346     		mov	r3, r2
 5378 0100 5B00     		lsls	r3, r3, #1
 5379 0102 1344     		add	r3, r3, r2
 5380 0104 0233     		adds	r3, r3, #2
 5381 0106 7A68     		ldr	r2, [r7, #4]
 5382 0108 1344     		add	r3, r3, r2
 5383 010a CAB2     		uxtb	r2, r1
 5384 010c 1A70     		strb	r2, [r3]
 936:poly.c        ****     r[3*i+0]  = a->coeffs[4*i+0];
 5385              		.loc 1 936 23 discriminator 3
 5386 010e FB68     		ldr	r3, [r7, #12]
 5387 0110 0133     		adds	r3, r3, #1
 5388 0112 FB60     		str	r3, [r7, #12]
 5389              	.L102:
 936:poly.c        ****     r[3*i+0]  = a->coeffs[4*i+0];
 5390              		.loc 1 936 3 discriminator 1
 5391 0114 FB68     		ldr	r3, [r7, #12]
 5392 0116 3F2B     		cmp	r3, #63
 5393 0118 7FF67AAF 		bls	.L103
 943:poly.c        ****   }
 944:poly.c        **** #elif GAMMA2 == (Q-1)/32
 945:poly.c        ****   for(i = 0; i < N/2; ++i)
 946:poly.c        ****     r[i] = a->coeffs[2*i+0] | (a->coeffs[2*i+1] << 4);
 947:poly.c        **** #endif
 948:poly.c        **** 
 949:poly.c        ****   DBENCH_STOP(*tpack);
 950:poly.c        **** }
 5394              		.loc 1 950 1
 5395 011c 00BF     		nop
 5396 011e 00BF     		nop
 5397 0120 1437     		adds	r7, r7, #20
 5398              	.LCFI156:
 5399              		.cfi_def_cfa_offset 4
 5400 0122 BD46     		mov	sp, r7
 5401              	.LCFI157:
 5402              		.cfi_def_cfa_register 13
 5403              		@ sp needed
 5404 0124 80BC     		pop	{r7}
 5405              	.LCFI158:
 5406              		.cfi_restore 7
 5407              		.cfi_def_cfa_offset 0
 5408 0126 7047     		bx	lr
 5409              		.cfi_endproc
 5410              	.LFE28:
 5412              		.text
 5413              	.Letext0:
 5414              		.file 2 "c:\\users\\h3c\\chipwh~1\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\machine\\_d
 5415              		.file 3 "c:\\users\\h3c\\chipwh~1\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\sys\\_stdin
 5416              		.file 4 "poly.h"
 5417              		.file 5 "fips202.h"
 5418              		.file 6 "symmetric.h"
DEFINED SYMBOLS
                            *ABS*:00000000 poly.c
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:16     .text.pqcrystals_dilithium2_ref_poly_reduce:00000000 $t
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:24     .text.pqcrystals_dilithium2_ref_poly_reduce:00000000 pqcrystals_dilithium2_ref_poly_reduce
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:84     .text.pqcrystals_dilithium2_ref_poly_caddq:00000000 $t
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:91     .text.pqcrystals_dilithium2_ref_poly_caddq:00000000 pqcrystals_dilithium2_ref_poly_caddq
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:150    .text.pqcrystals_dilithium2_ref_poly_freeze:00000000 $t
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:157    .text.pqcrystals_dilithium2_ref_poly_freeze:00000000 pqcrystals_dilithium2_ref_poly_freeze
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:216    .text.pqcrystals_dilithium2_ref_poly_add:00000000 $t
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:223    .text.pqcrystals_dilithium2_ref_poly_add:00000000 pqcrystals_dilithium2_ref_poly_add
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:291    .text.pqcrystals_dilithium2_ref_poly_sub:00000000 $t
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:298    .text.pqcrystals_dilithium2_ref_poly_sub:00000000 pqcrystals_dilithium2_ref_poly_sub
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:366    .text.pqcrystals_dilithium2_ref_poly_shiftl:00000000 $t
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:373    .text.pqcrystals_dilithium2_ref_poly_shiftl:00000000 pqcrystals_dilithium2_ref_poly_shiftl
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:433    .text.pqcrystals_dilithium2_ref_poly_ntt:00000000 $t
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:440    .text.pqcrystals_dilithium2_ref_poly_ntt:00000000 pqcrystals_dilithium2_ref_poly_ntt
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:477    .text.pqcrystals_dilithium2_ref_poly_invntt_tomont:00000000 $t
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:484    .text.pqcrystals_dilithium2_ref_poly_invntt_tomont:00000000 pqcrystals_dilithium2_ref_poly_invntt_tomont
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:521    .text.pqcrystals_dilithium2_ref_poly_pointwise_montgomery:00000000 $t
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:528    .text.pqcrystals_dilithium2_ref_poly_pointwise_montgomery:00000000 pqcrystals_dilithium2_ref_poly_pointwise_montgomery
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:614    .text.pqcrystals_dilithium2_ref_poly_power2round:00000000 $t
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:621    .text.pqcrystals_dilithium2_ref_poly_power2round:00000000 pqcrystals_dilithium2_ref_poly_power2round
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:686    .text.pqcrystals_dilithium2_ref_poly_decompose:00000000 $t
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:693    .text.pqcrystals_dilithium2_ref_poly_decompose:00000000 pqcrystals_dilithium2_ref_poly_decompose
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:758    .text.pqcrystals_dilithium2_ref_poly_make_hint:00000000 $t
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:765    .text.pqcrystals_dilithium2_ref_poly_make_hint:00000000 pqcrystals_dilithium2_ref_poly_make_hint
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:843    .text.pqcrystals_dilithium2_ref_poly_use_hint:00000000 $t
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:850    .text.pqcrystals_dilithium2_ref_poly_use_hint:00000000 pqcrystals_dilithium2_ref_poly_use_hint
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:916    .text.pqcrystals_dilithium2_ref_poly_chknorm:00000000 $t
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:923    .text.pqcrystals_dilithium2_ref_poly_chknorm:00000000 pqcrystals_dilithium2_ref_poly_chknorm
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:1018   .text.pqcrystals_dilithium2_ref_poly_chknorm:00000068 $d
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:1023   .text.rej_uniform:00000000 $t
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:1029   .text.rej_uniform:00000000 rej_uniform
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:1150   .text.rej_uniform:0000008c $d
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:1155   .text.pqcrystals_dilithium2_ref_poly_uniform:00000000 $t
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:1162   .text.pqcrystals_dilithium2_ref_poly_uniform:00000000 pqcrystals_dilithium2_ref_poly_uniform
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:1313   .text.pqcrystals_dilithium2_ref_poly_uniform:00000144 $d
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:1318   .text.rej_eta:00000000 $t
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:1324   .text.rej_eta:00000000 rej_eta
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:1479   .text.pqcrystals_dilithium2_ref_poly_uniform_eta:00000000 $t
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:1486   .text.pqcrystals_dilithium2_ref_poly_uniform_eta:00000000 pqcrystals_dilithium2_ref_poly_uniform_eta
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:1588   .text.pqcrystals_dilithium2_ref_poly_uniform_gamma1:00000000 $t
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:1595   .text.pqcrystals_dilithium2_ref_poly_uniform_gamma1:00000000 pqcrystals_dilithium2_ref_poly_uniform_gamma1
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:4730   .text.pqcrystals_dilithium2_ref_polyz_unpack:00000000 pqcrystals_dilithium2_ref_polyz_unpack
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:1657   .text.pqcrystals_dilithium2_ref_poly_challenge:00000000 $t
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:1664   .text.pqcrystals_dilithium2_ref_poly_challenge:00000000 pqcrystals_dilithium2_ref_poly_challenge
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:1876   .text.pqcrystals_dilithium2_ref_polyeta_pack:00000000 $t
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:1883   .text.pqcrystals_dilithium2_ref_polyeta_pack:00000000 pqcrystals_dilithium2_ref_polyeta_pack
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:2155   .text.pqcrystals_dilithium2_ref_polyeta_unpack:00000000 $t
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:2162   .text.pqcrystals_dilithium2_ref_polyeta_unpack:00000000 pqcrystals_dilithium2_ref_polyeta_unpack
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:2568   .text.pqcrystals_dilithium2_ref_polyt1_pack:00000000 $t
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:2575   .text.pqcrystals_dilithium2_ref_polyt1_pack:00000000 pqcrystals_dilithium2_ref_polyt1_pack
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:2782   .text.pqcrystals_dilithium2_ref_polyt1_unpack:00000000 $t
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:2789   .text.pqcrystals_dilithium2_ref_polyt1_unpack:00000000 pqcrystals_dilithium2_ref_polyt1_unpack
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:2997   .text.pqcrystals_dilithium2_ref_polyt0_pack:00000000 $t
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:3004   .text.pqcrystals_dilithium2_ref_polyt0_pack:00000000 pqcrystals_dilithium2_ref_polyt0_pack
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:3592   .text.pqcrystals_dilithium2_ref_polyt0_unpack:00000000 $t
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:3599   .text.pqcrystals_dilithium2_ref_polyt0_unpack:00000000 pqcrystals_dilithium2_ref_polyt0_unpack
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:4398   .text.pqcrystals_dilithium2_ref_polyz_pack:00000000 $t
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:4405   .text.pqcrystals_dilithium2_ref_polyz_pack:00000000 pqcrystals_dilithium2_ref_polyz_pack
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:4723   .text.pqcrystals_dilithium2_ref_polyz_unpack:00000000 $t
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:5195   .text.pqcrystals_dilithium2_ref_polyw1_pack:00000000 $t
C:\Users\H3C\AppData\Local\Temp\cckclC2h.s:5202   .text.pqcrystals_dilithium2_ref_polyw1_pack:00000000 pqcrystals_dilithium2_ref_polyw1_pack

UNDEFINED SYMBOLS
pqcrystals_dilithium2_ref_reduce32
pqcrystals_dilithium2_ref_caddq
pqcrystals_dilithium2_ref_freeze
pqcrystals_dilithium2_ref_ntt
pqcrystals_dilithium2_ref_invntt_tomont
pqcrystals_dilithium2_ref_montgomery_reduce
pqcrystals_dilithium2_ref_power2round
pqcrystals_dilithium2_ref_decompose
pqcrystals_dilithium2_ref_make_hint
pqcrystals_dilithium2_ref_use_hint
pqcrystals_dilithium2_ref_dilithium_shake128_stream_init
pqcrystals_fips202_ref_shake128_squeezeblocks
pqcrystals_dilithium2_ref_dilithium_shake256_stream_init
pqcrystals_fips202_ref_shake256_squeezeblocks
pqcrystals_fips202_ref_shake256_init
pqcrystals_fips202_ref_shake256_absorb
pqcrystals_fips202_ref_shake256_finalize
trigger_high
trigger_low
