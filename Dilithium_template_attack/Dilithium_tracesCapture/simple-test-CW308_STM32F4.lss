
simple-test-CW308_STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005934  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c4  08005ac0  08005ac0  00015ac0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b84  08005b84  0002043c  2**0
                  CONTENTS
  4 .ARM          00000000  08005b84  08005b84  0002043c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b84  08005b84  0002043c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005b84  08005b84  00015b84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b8c  08005b8c  00015b8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000043c  20000000  08005b90  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002860  2000043c  08005fcc  0002043c  2**2
                  ALLOC
 10 ._user_heap_stack 00000404  20002c9c  08005fcc  00022c9c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002043c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005520  00000000  00000000  00020466  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000ef0  00000000  00000000  00025986  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    000024ec  00000000  00000000  00026876  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000450  00000000  00000000  00028d62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000400  00000000  00000000  000291b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004f17  00000000  00000000  000295b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00001ab1  00000000  00000000  0002e4c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000004d  00000000  00000000  0002ff7a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001358  00000000  00000000  0002ffc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         00000144  00000000  00000000  00031320  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      0000006c  00000000  00000000  00031464  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000043c 	.word	0x2000043c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005aa4 	.word	0x08005aa4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000440 	.word	0x20000440
 80001c4:	08005aa4 	.word	0x08005aa4

080001c8 <memcpy>:
 80001c8:	4684      	mov	ip, r0
 80001ca:	ea41 0300 	orr.w	r3, r1, r0
 80001ce:	f013 0303 	ands.w	r3, r3, #3
 80001d2:	d16d      	bne.n	80002b0 <memcpy+0xe8>
 80001d4:	3a40      	subs	r2, #64	; 0x40
 80001d6:	d341      	bcc.n	800025c <memcpy+0x94>
 80001d8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001dc:	f840 3b04 	str.w	r3, [r0], #4
 80001e0:	f851 3b04 	ldr.w	r3, [r1], #4
 80001e4:	f840 3b04 	str.w	r3, [r0], #4
 80001e8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001ec:	f840 3b04 	str.w	r3, [r0], #4
 80001f0:	f851 3b04 	ldr.w	r3, [r1], #4
 80001f4:	f840 3b04 	str.w	r3, [r0], #4
 80001f8:	f851 3b04 	ldr.w	r3, [r1], #4
 80001fc:	f840 3b04 	str.w	r3, [r0], #4
 8000200:	f851 3b04 	ldr.w	r3, [r1], #4
 8000204:	f840 3b04 	str.w	r3, [r0], #4
 8000208:	f851 3b04 	ldr.w	r3, [r1], #4
 800020c:	f840 3b04 	str.w	r3, [r0], #4
 8000210:	f851 3b04 	ldr.w	r3, [r1], #4
 8000214:	f840 3b04 	str.w	r3, [r0], #4
 8000218:	f851 3b04 	ldr.w	r3, [r1], #4
 800021c:	f840 3b04 	str.w	r3, [r0], #4
 8000220:	f851 3b04 	ldr.w	r3, [r1], #4
 8000224:	f840 3b04 	str.w	r3, [r0], #4
 8000228:	f851 3b04 	ldr.w	r3, [r1], #4
 800022c:	f840 3b04 	str.w	r3, [r0], #4
 8000230:	f851 3b04 	ldr.w	r3, [r1], #4
 8000234:	f840 3b04 	str.w	r3, [r0], #4
 8000238:	f851 3b04 	ldr.w	r3, [r1], #4
 800023c:	f840 3b04 	str.w	r3, [r0], #4
 8000240:	f851 3b04 	ldr.w	r3, [r1], #4
 8000244:	f840 3b04 	str.w	r3, [r0], #4
 8000248:	f851 3b04 	ldr.w	r3, [r1], #4
 800024c:	f840 3b04 	str.w	r3, [r0], #4
 8000250:	f851 3b04 	ldr.w	r3, [r1], #4
 8000254:	f840 3b04 	str.w	r3, [r0], #4
 8000258:	3a40      	subs	r2, #64	; 0x40
 800025a:	d2bd      	bcs.n	80001d8 <memcpy+0x10>
 800025c:	3230      	adds	r2, #48	; 0x30
 800025e:	d311      	bcc.n	8000284 <memcpy+0xbc>
 8000260:	f851 3b04 	ldr.w	r3, [r1], #4
 8000264:	f840 3b04 	str.w	r3, [r0], #4
 8000268:	f851 3b04 	ldr.w	r3, [r1], #4
 800026c:	f840 3b04 	str.w	r3, [r0], #4
 8000270:	f851 3b04 	ldr.w	r3, [r1], #4
 8000274:	f840 3b04 	str.w	r3, [r0], #4
 8000278:	f851 3b04 	ldr.w	r3, [r1], #4
 800027c:	f840 3b04 	str.w	r3, [r0], #4
 8000280:	3a10      	subs	r2, #16
 8000282:	d2ed      	bcs.n	8000260 <memcpy+0x98>
 8000284:	320c      	adds	r2, #12
 8000286:	d305      	bcc.n	8000294 <memcpy+0xcc>
 8000288:	f851 3b04 	ldr.w	r3, [r1], #4
 800028c:	f840 3b04 	str.w	r3, [r0], #4
 8000290:	3a04      	subs	r2, #4
 8000292:	d2f9      	bcs.n	8000288 <memcpy+0xc0>
 8000294:	3204      	adds	r2, #4
 8000296:	d008      	beq.n	80002aa <memcpy+0xe2>
 8000298:	07d2      	lsls	r2, r2, #31
 800029a:	bf1c      	itt	ne
 800029c:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002a0:	f800 3b01 	strbne.w	r3, [r0], #1
 80002a4:	d301      	bcc.n	80002aa <memcpy+0xe2>
 80002a6:	880b      	ldrh	r3, [r1, #0]
 80002a8:	8003      	strh	r3, [r0, #0]
 80002aa:	4660      	mov	r0, ip
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	2a08      	cmp	r2, #8
 80002b2:	d313      	bcc.n	80002dc <memcpy+0x114>
 80002b4:	078b      	lsls	r3, r1, #30
 80002b6:	d08d      	beq.n	80001d4 <memcpy+0xc>
 80002b8:	f010 0303 	ands.w	r3, r0, #3
 80002bc:	d08a      	beq.n	80001d4 <memcpy+0xc>
 80002be:	f1c3 0304 	rsb	r3, r3, #4
 80002c2:	1ad2      	subs	r2, r2, r3
 80002c4:	07db      	lsls	r3, r3, #31
 80002c6:	bf1c      	itt	ne
 80002c8:	f811 3b01 	ldrbne.w	r3, [r1], #1
 80002cc:	f800 3b01 	strbne.w	r3, [r0], #1
 80002d0:	d380      	bcc.n	80001d4 <memcpy+0xc>
 80002d2:	f831 3b02 	ldrh.w	r3, [r1], #2
 80002d6:	f820 3b02 	strh.w	r3, [r0], #2
 80002da:	e77b      	b.n	80001d4 <memcpy+0xc>
 80002dc:	3a04      	subs	r2, #4
 80002de:	d3d9      	bcc.n	8000294 <memcpy+0xcc>
 80002e0:	3a01      	subs	r2, #1
 80002e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e6:	f800 3b01 	strb.w	r3, [r0], #1
 80002ea:	d2f9      	bcs.n	80002e0 <memcpy+0x118>
 80002ec:	780b      	ldrb	r3, [r1, #0]
 80002ee:	7003      	strb	r3, [r0, #0]
 80002f0:	784b      	ldrb	r3, [r1, #1]
 80002f2:	7043      	strb	r3, [r0, #1]
 80002f4:	788b      	ldrb	r3, [r1, #2]
 80002f6:	7083      	strb	r3, [r0, #2]
 80002f8:	4660      	mov	r0, ip
 80002fa:	4770      	bx	lr

080002fc <main_func>:

uint8_t dst[8] = {0};
uint8_t rhoprime[CRHBYTES];
poly y;
uint8_t main_func(uint8_t* data, uint8_t dlen)
{
 80002fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002fe:	b085      	sub	sp, #20
 8000300:	af00      	add	r7, sp, #0
 8000302:	6078      	str	r0, [r7, #4]
 8000304:	460b      	mov	r3, r1
 8000306:	70fb      	strb	r3, [r7, #3]
  
  unsigned int i, j;
  int ret;
  size_t mlen, smlen;
  uint16_t nonce=0;
 8000308:	2300      	movs	r3, #0
 800030a:	81fb      	strh	r3, [r7, #14]

  ////////////////////////
  //!!!!!!!!!!!!!!!!!!!!!!!L*nonce + i
  
    //randombytes(m, MLEN); 随机数
    memcpy(rhoprime, data, CRHBYTES);
 800030c:	4a18      	ldr	r2, [pc, #96]	; (8000370 <main_func+0x74>)
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	461c      	mov	r4, r3
 8000312:	4616      	mov	r6, r2
 8000314:	f104 0c30 	add.w	ip, r4, #48	; 0x30
 8000318:	4635      	mov	r5, r6
 800031a:	4623      	mov	r3, r4
 800031c:	6818      	ldr	r0, [r3, #0]
 800031e:	6859      	ldr	r1, [r3, #4]
 8000320:	689a      	ldr	r2, [r3, #8]
 8000322:	68db      	ldr	r3, [r3, #12]
 8000324:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000326:	3410      	adds	r4, #16
 8000328:	3610      	adds	r6, #16
 800032a:	4564      	cmp	r4, ip
 800032c:	d1f4      	bne.n	8000318 <main_func+0x1c>
    memcpy((uint8_t*)&nonce, data+CRHBYTES, 2);
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	3330      	adds	r3, #48	; 0x30
 8000332:	881b      	ldrh	r3, [r3, #0]
 8000334:	b29b      	uxth	r3, r3
 8000336:	81fb      	strh	r3, [r7, #14]

   
    poly_uniform_gamma1(&y, rhoprime, nonce);
 8000338:	89fb      	ldrh	r3, [r7, #14]
 800033a:	461a      	mov	r2, r3
 800033c:	490c      	ldr	r1, [pc, #48]	; (8000370 <main_func+0x74>)
 800033e:	480d      	ldr	r0, [pc, #52]	; (8000374 <main_func+0x78>)
 8000340:	f000 f834 	bl	80003ac <pqcrystals_dilithium2_ref_poly_uniform_gamma1>
 

  	//simpleserial_put('r', 4, (uint8_t*)sm);// 这个没有问题

    
    memcpy(dst, (uint8_t *)y.coeffs, 16);
 8000344:	2210      	movs	r2, #16
 8000346:	490b      	ldr	r1, [pc, #44]	; (8000374 <main_func+0x78>)
 8000348:	480b      	ldr	r0, [pc, #44]	; (8000378 <main_func+0x7c>)
 800034a:	f7ff ff3d 	bl	80001c8 <memcpy>
    memcpy(dst+16, (uint8_t *)y.coeffs + 256 * 4 - 16, 16);
 800034e:	4b0b      	ldr	r3, [pc, #44]	; (800037c <main_func+0x80>)
 8000350:	490b      	ldr	r1, [pc, #44]	; (8000380 <main_func+0x84>)
 8000352:	2210      	movs	r2, #16
 8000354:	4618      	mov	r0, r3
 8000356:	f7ff ff37 	bl	80001c8 <memcpy>
    simpleserial_put('r', 32, (uint8_t *)dst);
 800035a:	4a07      	ldr	r2, [pc, #28]	; (8000378 <main_func+0x7c>)
 800035c:	2120      	movs	r1, #32
 800035e:	2072      	movs	r0, #114	; 0x72
 8000360:	f004 f890 	bl	8004484 <simpleserial_put>
    
  return 0;
 8000364:	2300      	movs	r3, #0
}
 8000366:	4618      	mov	r0, r3
 8000368:	3714      	adds	r7, #20
 800036a:	46bd      	mov	sp, r7
 800036c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800036e:	bf00      	nop
 8000370:	200026c4 	.word	0x200026c4
 8000374:	200026f4 	.word	0x200026f4
 8000378:	200026bc 	.word	0x200026bc
 800037c:	200026cc 	.word	0x200026cc
 8000380:	20002ae4 	.word	0x20002ae4

08000384 <main>:


int main(void)
{	
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
	platform_init();
 8000388:	f004 f8b2 	bl	80044f0 <platform_init>
	init_uart();
 800038c:	f004 f900 	bl	8004590 <init_uart>
	trigger_setup();	
 8000390:	f004 f954 	bl	800463c <trigger_setup>
	simpleserial_init();
 8000394:	f003 ff24 	bl	80041e0 <simpleserial_init>
  
  //59 + 32 = 91
	simpleserial_addcmd('z', 50, main_func);
 8000398:	4a03      	ldr	r2, [pc, #12]	; (80003a8 <main+0x24>)
 800039a:	2132      	movs	r1, #50	; 0x32
 800039c:	207a      	movs	r0, #122	; 0x7a
 800039e:	f003 ff39 	bl	8004214 <simpleserial_addcmd>


//  uint8_t data[2] = {1,0};
// 	test(data);
	while(1)
		simpleserial_get();
 80003a2:	f003 ff8d 	bl	80042c0 <simpleserial_get>
 80003a6:	e7fc      	b.n	80003a2 <main+0x1e>
 80003a8:	080002fd 	.word	0x080002fd

080003ac <pqcrystals_dilithium2_ref_poly_uniform_gamma1>:
#define POLY_UNIFORM_GAMMA1_NBLOCKS ((640 + STREAM256_BLOCKBYTES - 1)/STREAM256_BLOCKBYTES)
#endif
void poly_uniform_gamma1(poly *a,
                         const uint8_t seed[CRHBYTES],
                         uint16_t nonce)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	f5ad 7d62 	sub.w	sp, sp, #904	; 0x388
 80003b2:	af00      	add	r7, sp, #0
 80003b4:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80003b8:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 80003bc:	6018      	str	r0, [r3, #0]
 80003be:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80003c2:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 80003c6:	6019      	str	r1, [r3, #0]
 80003c8:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80003cc:	f2a3 3382 	subw	r3, r3, #898	; 0x382
 80003d0:	801a      	strh	r2, [r3, #0]
  uint8_t buf[POLY_UNIFORM_GAMMA1_NBLOCKS*STREAM256_BLOCKBYTES];
  stream256_state state;

  stream256_init(&state, seed, nonce);
 80003d2:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80003d6:	f2a3 3382 	subw	r3, r3, #898	; 0x382
 80003da:	881a      	ldrh	r2, [r3, #0]
 80003dc:	f507 7362 	add.w	r3, r7, #904	; 0x388
 80003e0:	f5a3 7360 	sub.w	r3, r3, #896	; 0x380
 80003e4:	f107 0010 	add.w	r0, r7, #16
 80003e8:	6819      	ldr	r1, [r3, #0]
 80003ea:	f003 fdb6 	bl	8003f5a <pqcrystals_dilithium2_ref_dilithium_shake256_stream_init>
  stream256_squeezeblocks(buf, POLY_UNIFORM_GAMMA1_NBLOCKS, &state);
 80003ee:	f107 0210 	add.w	r2, r7, #16
 80003f2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80003f6:	2105      	movs	r1, #5
 80003f8:	4618      	mov	r0, r3
 80003fa:	f003 fd9e 	bl	8003f3a <pqcrystals_fips202_ref_shake256_squeezeblocks>
  // trigger_high();
  polyz_unpack(a, buf);
 80003fe:	f107 02e0 	add.w	r2, r7, #224	; 0xe0
 8000402:	f507 7362 	add.w	r3, r7, #904	; 0x388
 8000406:	f5a3 735f 	sub.w	r3, r3, #892	; 0x37c
 800040a:	4611      	mov	r1, r2
 800040c:	6818      	ldr	r0, [r3, #0]
 800040e:	f000 f805 	bl	800041c <pqcrystals_dilithium2_ref_polyz_unpack>
  // trigger_low();
}
 8000412:	bf00      	nop
 8000414:	f507 7762 	add.w	r7, r7, #904	; 0x388
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}

0800041c <pqcrystals_dilithium2_ref_polyz_unpack>:
*              in [-(GAMMA1 - 1), GAMMA1].
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void polyz_unpack(poly *r, const uint8_t *a) {
 800041c:	b580      	push	{r7, lr}
 800041e:	b084      	sub	sp, #16
 8000420:	af00      	add	r7, sp, #0
 8000422:	6078      	str	r0, [r7, #4]
 8000424:	6039      	str	r1, [r7, #0]
  unsigned int i;
  DBENCH_START();

#if GAMMA1 == (1 << 17)
  for(i = 0; i < N/4; ++i) {
 8000426:	2300      	movs	r3, #0
 8000428:	60fb      	str	r3, [r7, #12]
 800042a:	e172      	b.n	8000712 <pqcrystals_dilithium2_ref_polyz_unpack+0x2f6>
    trigger_high();
 800042c:	f004 f92e 	bl	800468c <trigger_high>
    r->coeffs[4*i+0]  = a[9*i+0];
 8000430:	68fa      	ldr	r2, [r7, #12]
 8000432:	4613      	mov	r3, r2
 8000434:	00db      	lsls	r3, r3, #3
 8000436:	4413      	add	r3, r2
 8000438:	683a      	ldr	r2, [r7, #0]
 800043a:	4413      	add	r3, r2
 800043c:	7819      	ldrb	r1, [r3, #0]
 800043e:	68fb      	ldr	r3, [r7, #12]
 8000440:	009a      	lsls	r2, r3, #2
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+0] |= (uint32_t)a[9*i+1] << 8;
 8000448:	68fb      	ldr	r3, [r7, #12]
 800044a:	009a      	lsls	r2, r3, #2
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000452:	4619      	mov	r1, r3
 8000454:	68fa      	ldr	r2, [r7, #12]
 8000456:	4613      	mov	r3, r2
 8000458:	00db      	lsls	r3, r3, #3
 800045a:	4413      	add	r3, r2
 800045c:	3301      	adds	r3, #1
 800045e:	683a      	ldr	r2, [r7, #0]
 8000460:	4413      	add	r3, r2
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	021b      	lsls	r3, r3, #8
 8000466:	4319      	orrs	r1, r3
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	009a      	lsls	r2, r3, #2
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+0] |= (uint32_t)a[9*i+2] << 16;
 8000472:	68fb      	ldr	r3, [r7, #12]
 8000474:	009a      	lsls	r2, r3, #2
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800047c:	4619      	mov	r1, r3
 800047e:	68fa      	ldr	r2, [r7, #12]
 8000480:	4613      	mov	r3, r2
 8000482:	00db      	lsls	r3, r3, #3
 8000484:	4413      	add	r3, r2
 8000486:	3302      	adds	r3, #2
 8000488:	683a      	ldr	r2, [r7, #0]
 800048a:	4413      	add	r3, r2
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	041b      	lsls	r3, r3, #16
 8000490:	4319      	orrs	r1, r3
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	009a      	lsls	r2, r3, #2
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+0] &= 0x3FFFF;
 800049c:	68fb      	ldr	r3, [r7, #12]
 800049e:	009a      	lsls	r2, r3, #2
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004a6:	68fa      	ldr	r2, [r7, #12]
 80004a8:	0092      	lsls	r2, r2, #2
 80004aa:	f3c3 0111 	ubfx	r1, r3, #0, #18
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    trigger_low();
 80004b4:	f004 f8f6 	bl	80046a4 <trigger_low>



    trigger_high();
 80004b8:	f004 f8e8 	bl	800468c <trigger_high>
    r->coeffs[4*i+1]  = a[9*i+2] >> 2;
 80004bc:	68fa      	ldr	r2, [r7, #12]
 80004be:	4613      	mov	r3, r2
 80004c0:	00db      	lsls	r3, r3, #3
 80004c2:	4413      	add	r3, r2
 80004c4:	3302      	adds	r3, #2
 80004c6:	683a      	ldr	r2, [r7, #0]
 80004c8:	4413      	add	r3, r2
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	089b      	lsrs	r3, r3, #2
 80004ce:	b2d9      	uxtb	r1, r3
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	009b      	lsls	r3, r3, #2
 80004d4:	1c5a      	adds	r2, r3, #1
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] |= (uint32_t)a[9*i+3] << 6;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	1c5a      	adds	r2, r3, #1
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004e8:	4619      	mov	r1, r3
 80004ea:	68fa      	ldr	r2, [r7, #12]
 80004ec:	4613      	mov	r3, r2
 80004ee:	00db      	lsls	r3, r3, #3
 80004f0:	4413      	add	r3, r2
 80004f2:	3303      	adds	r3, #3
 80004f4:	683a      	ldr	r2, [r7, #0]
 80004f6:	4413      	add	r3, r2
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	019b      	lsls	r3, r3, #6
 80004fc:	4319      	orrs	r1, r3
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	1c5a      	adds	r2, r3, #1
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] |= (uint32_t)a[9*i+4] << 14;
 800050a:	68fb      	ldr	r3, [r7, #12]
 800050c:	009b      	lsls	r3, r3, #2
 800050e:	1c5a      	adds	r2, r3, #1
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000516:	4619      	mov	r1, r3
 8000518:	68fa      	ldr	r2, [r7, #12]
 800051a:	4613      	mov	r3, r2
 800051c:	00db      	lsls	r3, r3, #3
 800051e:	4413      	add	r3, r2
 8000520:	3304      	adds	r3, #4
 8000522:	683a      	ldr	r2, [r7, #0]
 8000524:	4413      	add	r3, r2
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	039b      	lsls	r3, r3, #14
 800052a:	4319      	orrs	r1, r3
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	1c5a      	adds	r2, r3, #1
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] &= 0x3FFFF;
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	009b      	lsls	r3, r3, #2
 800053c:	1c5a      	adds	r2, r3, #1
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000544:	68fa      	ldr	r2, [r7, #12]
 8000546:	0092      	lsls	r2, r2, #2
 8000548:	3201      	adds	r2, #1
 800054a:	f3c3 0111 	ubfx	r1, r3, #0, #18
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    trigger_low();
 8000554:	f004 f8a6 	bl	80046a4 <trigger_low>


    trigger_high();
 8000558:	f004 f898 	bl	800468c <trigger_high>
    r->coeffs[4*i+2]  = a[9*i+4] >> 4;
 800055c:	68fa      	ldr	r2, [r7, #12]
 800055e:	4613      	mov	r3, r2
 8000560:	00db      	lsls	r3, r3, #3
 8000562:	4413      	add	r3, r2
 8000564:	3304      	adds	r3, #4
 8000566:	683a      	ldr	r2, [r7, #0]
 8000568:	4413      	add	r3, r2
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	091b      	lsrs	r3, r3, #4
 800056e:	b2d9      	uxtb	r1, r3
 8000570:	68fb      	ldr	r3, [r7, #12]
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	1c9a      	adds	r2, r3, #2
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] |= (uint32_t)a[9*i+5] << 4;
 800057c:	68fb      	ldr	r3, [r7, #12]
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	1c9a      	adds	r2, r3, #2
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000588:	4619      	mov	r1, r3
 800058a:	68fa      	ldr	r2, [r7, #12]
 800058c:	4613      	mov	r3, r2
 800058e:	00db      	lsls	r3, r3, #3
 8000590:	4413      	add	r3, r2
 8000592:	3305      	adds	r3, #5
 8000594:	683a      	ldr	r2, [r7, #0]
 8000596:	4413      	add	r3, r2
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	011b      	lsls	r3, r3, #4
 800059c:	4319      	orrs	r1, r3
 800059e:	68fb      	ldr	r3, [r7, #12]
 80005a0:	009b      	lsls	r3, r3, #2
 80005a2:	1c9a      	adds	r2, r3, #2
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] |= (uint32_t)a[9*i+6] << 12;
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	009b      	lsls	r3, r3, #2
 80005ae:	1c9a      	adds	r2, r3, #2
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005b6:	4619      	mov	r1, r3
 80005b8:	68fa      	ldr	r2, [r7, #12]
 80005ba:	4613      	mov	r3, r2
 80005bc:	00db      	lsls	r3, r3, #3
 80005be:	4413      	add	r3, r2
 80005c0:	3306      	adds	r3, #6
 80005c2:	683a      	ldr	r2, [r7, #0]
 80005c4:	4413      	add	r3, r2
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	031b      	lsls	r3, r3, #12
 80005ca:	4319      	orrs	r1, r3
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	009b      	lsls	r3, r3, #2
 80005d0:	1c9a      	adds	r2, r3, #2
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] &= 0x3FFFF;
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	009b      	lsls	r3, r3, #2
 80005dc:	1c9a      	adds	r2, r3, #2
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80005e4:	68fa      	ldr	r2, [r7, #12]
 80005e6:	0092      	lsls	r2, r2, #2
 80005e8:	3202      	adds	r2, #2
 80005ea:	f3c3 0111 	ubfx	r1, r3, #0, #18
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    trigger_low();
 80005f4:	f004 f856 	bl	80046a4 <trigger_low>



    trigger_high();
 80005f8:	f004 f848 	bl	800468c <trigger_high>
    r->coeffs[4*i+3]  = a[9*i+6] >> 6;
 80005fc:	68fa      	ldr	r2, [r7, #12]
 80005fe:	4613      	mov	r3, r2
 8000600:	00db      	lsls	r3, r3, #3
 8000602:	4413      	add	r3, r2
 8000604:	3306      	adds	r3, #6
 8000606:	683a      	ldr	r2, [r7, #0]
 8000608:	4413      	add	r3, r2
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	099b      	lsrs	r3, r3, #6
 800060e:	b2d9      	uxtb	r1, r3
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	009b      	lsls	r3, r3, #2
 8000614:	1cda      	adds	r2, r3, #3
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] |= (uint32_t)a[9*i+7] << 2;
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	009b      	lsls	r3, r3, #2
 8000620:	1cda      	adds	r2, r3, #3
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000628:	4619      	mov	r1, r3
 800062a:	68fa      	ldr	r2, [r7, #12]
 800062c:	4613      	mov	r3, r2
 800062e:	00db      	lsls	r3, r3, #3
 8000630:	4413      	add	r3, r2
 8000632:	3307      	adds	r3, #7
 8000634:	683a      	ldr	r2, [r7, #0]
 8000636:	4413      	add	r3, r2
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	009b      	lsls	r3, r3, #2
 800063c:	4319      	orrs	r1, r3
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	009b      	lsls	r3, r3, #2
 8000642:	1cda      	adds	r2, r3, #3
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] |= (uint32_t)a[9*i+8] << 10;
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	1cda      	adds	r2, r3, #3
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000656:	4619      	mov	r1, r3
 8000658:	68fa      	ldr	r2, [r7, #12]
 800065a:	4613      	mov	r3, r2
 800065c:	00db      	lsls	r3, r3, #3
 800065e:	4413      	add	r3, r2
 8000660:	3308      	adds	r3, #8
 8000662:	683a      	ldr	r2, [r7, #0]
 8000664:	4413      	add	r3, r2
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	029b      	lsls	r3, r3, #10
 800066a:	4319      	orrs	r1, r3
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	1cda      	adds	r2, r3, #3
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] &= 0x3FFFF;
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	1cda      	adds	r2, r3, #3
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000684:	68fa      	ldr	r2, [r7, #12]
 8000686:	0092      	lsls	r2, r2, #2
 8000688:	3203      	adds	r2, #3
 800068a:	f3c3 0111 	ubfx	r1, r3, #0, #18
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    trigger_low();
 8000694:	f004 f806 	bl	80046a4 <trigger_low>



    trigger_high();
 8000698:	f003 fff8 	bl	800468c <trigger_high>
    r->coeffs[4*i+0] = GAMMA1 - r->coeffs[4*i+0];
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	009a      	lsls	r2, r3, #2
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006a6:	68fa      	ldr	r2, [r7, #12]
 80006a8:	0092      	lsls	r2, r2, #2
 80006aa:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+1] = GAMMA1 - r->coeffs[4*i+1];
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	1c5a      	adds	r2, r3, #1
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006c0:	68fa      	ldr	r2, [r7, #12]
 80006c2:	0092      	lsls	r2, r2, #2
 80006c4:	3201      	adds	r2, #1
 80006c6:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+2] = GAMMA1 - r->coeffs[4*i+2];
 80006d0:	68fb      	ldr	r3, [r7, #12]
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	1c9a      	adds	r2, r3, #2
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006dc:	68fa      	ldr	r2, [r7, #12]
 80006de:	0092      	lsls	r2, r2, #2
 80006e0:	3202      	adds	r2, #2
 80006e2:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    r->coeffs[4*i+3] = GAMMA1 - r->coeffs[4*i+3];
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	1cda      	adds	r2, r3, #3
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006f8:	68fa      	ldr	r2, [r7, #12]
 80006fa:	0092      	lsls	r2, r2, #2
 80006fc:	3203      	adds	r2, #3
 80006fe:	f5c3 3100 	rsb	r1, r3, #131072	; 0x20000
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    trigger_low();
 8000708:	f003 ffcc 	bl	80046a4 <trigger_low>
  for(i = 0; i < N/4; ++i) {
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	3301      	adds	r3, #1
 8000710:	60fb      	str	r3, [r7, #12]
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	2b3f      	cmp	r3, #63	; 0x3f
 8000716:	f67f ae89 	bls.w	800042c <pqcrystals_dilithium2_ref_polyz_unpack+0x10>
    r->coeffs[2*i+1] = GAMMA1 - r->coeffs[2*i+1];
  }
#endif

  DBENCH_STOP(*tpack);
}
 800071a:	bf00      	nop
 800071c:	bf00      	nop
 800071e:	3710      	adds	r7, #16
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <load64>:
*
* Arguments:   - const uint8_t *x: pointer to input byte array
*
* Returns the loaded 64-bit unsigned integer
**************************************************/
static uint64_t load64(const uint8_t x[8]) {
 8000724:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000728:	b086      	sub	sp, #24
 800072a:	af00      	add	r7, sp, #0
 800072c:	6078      	str	r0, [r7, #4]
  unsigned int i;
  uint64_t r = 0;
 800072e:	f04f 0000 	mov.w	r0, #0
 8000732:	f04f 0100 	mov.w	r1, #0
 8000736:	e9c7 0102 	strd	r0, r1, [r7, #8]

  for(i=0;i<8;i++)
 800073a:	2100      	movs	r1, #0
 800073c:	6179      	str	r1, [r7, #20]
 800073e:	e022      	b.n	8000786 <load64+0x62>
    r |= (uint64_t)x[i] << 8*i;
 8000740:	6878      	ldr	r0, [r7, #4]
 8000742:	6979      	ldr	r1, [r7, #20]
 8000744:	4401      	add	r1, r0
 8000746:	7809      	ldrb	r1, [r1, #0]
 8000748:	b2c9      	uxtb	r1, r1
 800074a:	2000      	movs	r0, #0
 800074c:	460c      	mov	r4, r1
 800074e:	4605      	mov	r5, r0
 8000750:	6979      	ldr	r1, [r7, #20]
 8000752:	00c9      	lsls	r1, r1, #3
 8000754:	f1a1 0620 	sub.w	r6, r1, #32
 8000758:	f1c1 0020 	rsb	r0, r1, #32
 800075c:	fa05 f301 	lsl.w	r3, r5, r1
 8000760:	fa04 f606 	lsl.w	r6, r4, r6
 8000764:	4333      	orrs	r3, r6
 8000766:	fa24 f000 	lsr.w	r0, r4, r0
 800076a:	4303      	orrs	r3, r0
 800076c:	fa04 f201 	lsl.w	r2, r4, r1
 8000770:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8000774:	ea40 0802 	orr.w	r8, r0, r2
 8000778:	ea41 0903 	orr.w	r9, r1, r3
 800077c:	e9c7 8902 	strd	r8, r9, [r7, #8]
  for(i=0;i<8;i++)
 8000780:	6979      	ldr	r1, [r7, #20]
 8000782:	3101      	adds	r1, #1
 8000784:	6179      	str	r1, [r7, #20]
 8000786:	6979      	ldr	r1, [r7, #20]
 8000788:	2907      	cmp	r1, #7
 800078a:	d9d9      	bls.n	8000740 <load64+0x1c>

  return r;
 800078c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
}
 8000790:	4610      	mov	r0, r2
 8000792:	4619      	mov	r1, r3
 8000794:	3718      	adds	r7, #24
 8000796:	46bd      	mov	sp, r7
 8000798:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 800079c:	4770      	bx	lr

0800079e <store64>:
* Description: Store a 64-bit integer to array of 8 bytes in little-endian order
*
* Arguments:   - uint8_t *x: pointer to the output byte array (allocated)
*              - uint64_t u: input 64-bit unsigned integer
**************************************************/
static void store64(uint8_t x[8], uint64_t u) {
 800079e:	b4f0      	push	{r4, r5, r6, r7}
 80007a0:	b086      	sub	sp, #24
 80007a2:	af00      	add	r7, sp, #0
 80007a4:	60f8      	str	r0, [r7, #12]
 80007a6:	e9c7 2300 	strd	r2, r3, [r7]
  unsigned int i;

  for(i=0;i<8;i++)
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
 80007ae:	e019      	b.n	80007e4 <store64+0x46>
    x[i] = u >> 8*i;
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	00d9      	lsls	r1, r3, #3
 80007b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80007b8:	f1c1 0620 	rsb	r6, r1, #32
 80007bc:	f1a1 0020 	sub.w	r0, r1, #32
 80007c0:	fa22 f401 	lsr.w	r4, r2, r1
 80007c4:	fa03 f606 	lsl.w	r6, r3, r6
 80007c8:	4334      	orrs	r4, r6
 80007ca:	fa23 f000 	lsr.w	r0, r3, r0
 80007ce:	4304      	orrs	r4, r0
 80007d0:	fa23 f501 	lsr.w	r5, r3, r1
 80007d4:	68fa      	ldr	r2, [r7, #12]
 80007d6:	697b      	ldr	r3, [r7, #20]
 80007d8:	4413      	add	r3, r2
 80007da:	b2e2      	uxtb	r2, r4
 80007dc:	701a      	strb	r2, [r3, #0]
  for(i=0;i<8;i++)
 80007de:	697b      	ldr	r3, [r7, #20]
 80007e0:	3301      	adds	r3, #1
 80007e2:	617b      	str	r3, [r7, #20]
 80007e4:	697b      	ldr	r3, [r7, #20]
 80007e6:	2b07      	cmp	r3, #7
 80007e8:	d9e2      	bls.n	80007b0 <store64+0x12>
}
 80007ea:	bf00      	nop
 80007ec:	bf00      	nop
 80007ee:	3718      	adds	r7, #24
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bcf0      	pop	{r4, r5, r6, r7}
 80007f4:	4770      	bx	lr
 80007f6:	0000      	movs	r0, r0

080007f8 <KeccakF1600_StatePermute>:
* Description: The Keccak F1600 Permutation
*
* Arguments:   - uint64_t *state: pointer to input/output Keccak state
**************************************************/
static void KeccakF1600_StatePermute(uint64_t state[25])
{
 80007f8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80007fc:	f6ad 3d8c 	subw	sp, sp, #2956	; 0xb8c
 8000800:	af00      	add	r7, sp, #0
 8000802:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000806:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800080a:	6018      	str	r0, [r3, #0]
        uint64_t Eka, Eke, Eki, Eko, Eku;
        uint64_t Ema, Eme, Emi, Emo, Emu;
        uint64_t Esa, Ese, Esi, Eso, Esu;

        //copyFromState(A, state)
        Aba = state[ 0];
 800080c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000810:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800081a:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 800081e:	e9c1 2300 	strd	r2, r3, [r1]
        Abe = state[ 1];
 8000822:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000826:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000830:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 8000834:	e9c1 2300 	strd	r2, r3, [r1]
        Abi = state[ 2];
 8000838:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800083c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8000846:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 800084a:	e9c1 2300 	strd	r2, r3, [r1]
        Abo = state[ 3];
 800084e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000852:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800085c:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 8000860:	e9c1 2300 	strd	r2, r3, [r1]
        Abu = state[ 4];
 8000864:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000868:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8000872:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 8000876:	e9c1 2300 	strd	r2, r3, [r1]
        Aga = state[ 5];
 800087a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800087e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8000888:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 800088c:	e9c1 2300 	strd	r2, r3, [r1]
        Age = state[ 6];
 8000890:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000894:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 800089e:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 80008a2:	e9c1 2300 	strd	r2, r3, [r1]
        Agi = state[ 7];
 80008a6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80008aa:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80008b4:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 80008b8:	e9c1 2300 	strd	r2, r3, [r1]
        Ago = state[ 8];
 80008bc:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80008c0:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	e9d3 2310 	ldrd	r2, r3, [r3, #64]	; 0x40
 80008ca:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 80008ce:	e9c1 2300 	strd	r2, r3, [r1]
        Agu = state[ 9];
 80008d2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80008d6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 80008e0:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 80008e4:	e9c1 2300 	strd	r2, r3, [r1]
        Aka = state[10];
 80008e8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80008ec:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 80008f6:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 80008fa:	e9c1 2300 	strd	r2, r3, [r1]
        Ake = state[11];
 80008fe:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000902:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800090c:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 8000910:	e9c1 2300 	strd	r2, r3, [r1]
        Aki = state[12];
 8000914:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000918:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	; 0x60
 8000922:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 8000926:	e9c1 2300 	strd	r2, r3, [r1]
        Ako = state[13];
 800092a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800092e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	e9d3 231a 	ldrd	r2, r3, [r3, #104]	; 0x68
 8000938:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 800093c:	e9c1 2300 	strd	r2, r3, [r1]
        Aku = state[14];
 8000940:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000944:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	e9d3 231c 	ldrd	r2, r3, [r3, #112]	; 0x70
 800094e:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 8000952:	e9c1 2300 	strd	r2, r3, [r1]
        Ama = state[15];
 8000956:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800095a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	e9d3 231e 	ldrd	r2, r3, [r3, #120]	; 0x78
 8000964:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 8000968:	e9c1 2300 	strd	r2, r3, [r1]
        Ame = state[16];
 800096c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000970:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	e9d3 2320 	ldrd	r2, r3, [r3, #128]	; 0x80
 800097a:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 800097e:	e9c1 2300 	strd	r2, r3, [r1]
        Ami = state[17];
 8000982:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000986:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	e9d3 2322 	ldrd	r2, r3, [r3, #136]	; 0x88
 8000990:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 8000994:	e9c1 2300 	strd	r2, r3, [r1]
        Amo = state[18];
 8000998:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800099c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	e9d3 2324 	ldrd	r2, r3, [r3, #144]	; 0x90
 80009a6:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 80009aa:	e9c1 2300 	strd	r2, r3, [r1]
        Amu = state[19];
 80009ae:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80009b2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	e9d3 2326 	ldrd	r2, r3, [r3, #152]	; 0x98
 80009bc:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 80009c0:	e9c1 2300 	strd	r2, r3, [r1]
        Asa = state[20];
 80009c4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80009c8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	e9d3 2328 	ldrd	r2, r3, [r3, #160]	; 0xa0
 80009d2:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 80009d6:	e9c1 2300 	strd	r2, r3, [r1]
        Ase = state[21];
 80009da:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80009de:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	e9d3 232a 	ldrd	r2, r3, [r3, #168]	; 0xa8
 80009e8:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 80009ec:	e9c1 2300 	strd	r2, r3, [r1]
        Asi = state[22];
 80009f0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80009f4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	e9d3 232c 	ldrd	r2, r3, [r3, #176]	; 0xb0
 80009fe:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 8000a02:	e9c1 2300 	strd	r2, r3, [r1]
        Aso = state[23];
 8000a06:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000a0a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	e9d3 232e 	ldrd	r2, r3, [r3, #184]	; 0xb8
 8000a14:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 8000a18:	e9c1 2300 	strd	r2, r3, [r1]
        Asu = state[24];
 8000a1c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8000a20:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	e9d3 2330 	ldrd	r2, r3, [r3, #192]	; 0xc0
 8000a2a:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 8000a2e:	e9c1 2300 	strd	r2, r3, [r1]

        for( round = 0; round < NROUNDS; round += 2 )
 8000a32:	2300      	movs	r3, #0
 8000a34:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 8000a38:	f002 bf10 	b.w	800385c <KeccakF1600_StatePermute+0x3064>
        {
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
 8000a3c:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8000a40:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000a44:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8000a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a4c:	ea80 0c02 	eor.w	ip, r0, r2
 8000a50:	f8c7 c990 	str.w	ip, [r7, #2448]	; 0x990
 8000a54:	404b      	eors	r3, r1
 8000a56:	f8c7 3994 	str.w	r3, [r7, #2452]	; 0x994
 8000a5a:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8000a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a62:	f507 6119 	add.w	r1, r7, #2448	; 0x990
 8000a66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000a6a:	4684      	mov	ip, r0
 8000a6c:	ea8c 0c02 	eor.w	ip, ip, r2
 8000a70:	f8c7 c988 	str.w	ip, [r7, #2440]	; 0x988
 8000a74:	404b      	eors	r3, r1
 8000a76:	f8c7 398c 	str.w	r3, [r7, #2444]	; 0x98c
 8000a7a:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8000a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a82:	f607 1188 	addw	r1, r7, #2440	; 0x988
 8000a86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000a8a:	4684      	mov	ip, r0
 8000a8c:	ea8c 0c02 	eor.w	ip, ip, r2
 8000a90:	f8c7 c980 	str.w	ip, [r7, #2432]	; 0x980
 8000a94:	404b      	eors	r3, r1
 8000a96:	f8c7 3984 	str.w	r3, [r7, #2436]	; 0x984
 8000a9a:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8000a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000aa2:	f507 6118 	add.w	r1, r7, #2432	; 0x980
 8000aa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000aaa:	4684      	mov	ip, r0
 8000aac:	ea82 0c0c 	eor.w	ip, r2, ip
 8000ab0:	f8c7 c548 	str.w	ip, [r7, #1352]	; 0x548
 8000ab4:	404b      	eors	r3, r1
 8000ab6:	f8c7 354c 	str.w	r3, [r7, #1356]	; 0x54c
 8000aba:	f507 63a9 	add.w	r3, r7, #1352	; 0x548
 8000abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ac2:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8000ac6:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = Abe^Age^Ake^Ame^Ase;
 8000aca:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 8000ace:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000ad2:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 8000ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ada:	ea80 0c02 	eor.w	ip, r0, r2
 8000ade:	f8c7 c978 	str.w	ip, [r7, #2424]	; 0x978
 8000ae2:	404b      	eors	r3, r1
 8000ae4:	f8c7 397c 	str.w	r3, [r7, #2428]	; 0x97c
 8000ae8:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8000aec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000af0:	f607 1178 	addw	r1, r7, #2424	; 0x978
 8000af4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000af8:	4684      	mov	ip, r0
 8000afa:	ea8c 0c02 	eor.w	ip, ip, r2
 8000afe:	f8c7 c970 	str.w	ip, [r7, #2416]	; 0x970
 8000b02:	404b      	eors	r3, r1
 8000b04:	f8c7 3974 	str.w	r3, [r7, #2420]	; 0x974
 8000b08:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 8000b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b10:	f507 6117 	add.w	r1, r7, #2416	; 0x970
 8000b14:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000b18:	4684      	mov	ip, r0
 8000b1a:	ea8c 0c02 	eor.w	ip, ip, r2
 8000b1e:	f8c7 c968 	str.w	ip, [r7, #2408]	; 0x968
 8000b22:	404b      	eors	r3, r1
 8000b24:	f8c7 396c 	str.w	r3, [r7, #2412]	; 0x96c
 8000b28:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8000b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b30:	f607 1168 	addw	r1, r7, #2408	; 0x968
 8000b34:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000b38:	4684      	mov	ip, r0
 8000b3a:	ea82 0c0c 	eor.w	ip, r2, ip
 8000b3e:	f8c7 c540 	str.w	ip, [r7, #1344]	; 0x540
 8000b42:	404b      	eors	r3, r1
 8000b44:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 8000b48:	f507 63a8 	add.w	r3, r7, #1344	; 0x540
 8000b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b50:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8000b54:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = Abi^Agi^Aki^Ami^Asi;
 8000b58:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 8000b5c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000b60:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 8000b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b68:	ea80 0c02 	eor.w	ip, r0, r2
 8000b6c:	f8c7 c960 	str.w	ip, [r7, #2400]	; 0x960
 8000b70:	404b      	eors	r3, r1
 8000b72:	f8c7 3964 	str.w	r3, [r7, #2404]	; 0x964
 8000b76:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 8000b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b7e:	f507 6116 	add.w	r1, r7, #2400	; 0x960
 8000b82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000b86:	4684      	mov	ip, r0
 8000b88:	ea8c 0c02 	eor.w	ip, ip, r2
 8000b8c:	f8c7 c958 	str.w	ip, [r7, #2392]	; 0x958
 8000b90:	404b      	eors	r3, r1
 8000b92:	f8c7 395c 	str.w	r3, [r7, #2396]	; 0x95c
 8000b96:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8000b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b9e:	f607 1158 	addw	r1, r7, #2392	; 0x958
 8000ba2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ba6:	4684      	mov	ip, r0
 8000ba8:	ea8c 0c02 	eor.w	ip, ip, r2
 8000bac:	f8c7 c950 	str.w	ip, [r7, #2384]	; 0x950
 8000bb0:	404b      	eors	r3, r1
 8000bb2:	f8c7 3954 	str.w	r3, [r7, #2388]	; 0x954
 8000bb6:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 8000bba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bbe:	f507 6115 	add.w	r1, r7, #2384	; 0x950
 8000bc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000bc6:	4684      	mov	ip, r0
 8000bc8:	ea82 0c0c 	eor.w	ip, r2, ip
 8000bcc:	f8c7 c538 	str.w	ip, [r7, #1336]	; 0x538
 8000bd0:	404b      	eors	r3, r1
 8000bd2:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 8000bd6:	f507 63a7 	add.w	r3, r7, #1336	; 0x538
 8000bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bde:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8000be2:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = Abo^Ago^Ako^Amo^Aso;
 8000be6:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8000bea:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000bee:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8000bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf6:	ea80 0c02 	eor.w	ip, r0, r2
 8000bfa:	f8c7 c948 	str.w	ip, [r7, #2376]	; 0x948
 8000bfe:	404b      	eors	r3, r1
 8000c00:	f8c7 394c 	str.w	r3, [r7, #2380]	; 0x94c
 8000c04:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 8000c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c0c:	f607 1148 	addw	r1, r7, #2376	; 0x948
 8000c10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000c14:	4684      	mov	ip, r0
 8000c16:	ea8c 0c02 	eor.w	ip, ip, r2
 8000c1a:	f8c7 c940 	str.w	ip, [r7, #2368]	; 0x940
 8000c1e:	404b      	eors	r3, r1
 8000c20:	f8c7 3944 	str.w	r3, [r7, #2372]	; 0x944
 8000c24:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8000c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c2c:	f507 6114 	add.w	r1, r7, #2368	; 0x940
 8000c30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000c34:	4684      	mov	ip, r0
 8000c36:	ea8c 0c02 	eor.w	ip, ip, r2
 8000c3a:	f8c7 c938 	str.w	ip, [r7, #2360]	; 0x938
 8000c3e:	404b      	eors	r3, r1
 8000c40:	f8c7 393c 	str.w	r3, [r7, #2364]	; 0x93c
 8000c44:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8000c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c4c:	f607 1138 	addw	r1, r7, #2360	; 0x938
 8000c50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000c54:	4684      	mov	ip, r0
 8000c56:	ea82 0c0c 	eor.w	ip, r2, ip
 8000c5a:	f8c7 c530 	str.w	ip, [r7, #1328]	; 0x530
 8000c5e:	404b      	eors	r3, r1
 8000c60:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
 8000c64:	f507 63a6 	add.w	r3, r7, #1328	; 0x530
 8000c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c6c:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8000c70:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = Abu^Agu^Aku^Amu^Asu;
 8000c74:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8000c78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000c7c:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 8000c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c84:	ea80 0c02 	eor.w	ip, r0, r2
 8000c88:	f8c7 c930 	str.w	ip, [r7, #2352]	; 0x930
 8000c8c:	404b      	eors	r3, r1
 8000c8e:	f8c7 3934 	str.w	r3, [r7, #2356]	; 0x934
 8000c92:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8000c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c9a:	f507 6113 	add.w	r1, r7, #2352	; 0x930
 8000c9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ca2:	4684      	mov	ip, r0
 8000ca4:	ea8c 0c02 	eor.w	ip, ip, r2
 8000ca8:	f8c7 c928 	str.w	ip, [r7, #2344]	; 0x928
 8000cac:	404b      	eors	r3, r1
 8000cae:	f8c7 392c 	str.w	r3, [r7, #2348]	; 0x92c
 8000cb2:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8000cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cba:	f607 1128 	addw	r1, r7, #2344	; 0x928
 8000cbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000cc2:	4684      	mov	ip, r0
 8000cc4:	ea8c 0c02 	eor.w	ip, ip, r2
 8000cc8:	f8c7 c920 	str.w	ip, [r7, #2336]	; 0x920
 8000ccc:	404b      	eors	r3, r1
 8000cce:	f8c7 3924 	str.w	r3, [r7, #2340]	; 0x924
 8000cd2:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8000cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cda:	f507 6112 	add.w	r1, r7, #2336	; 0x920
 8000cde:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000ce2:	4684      	mov	ip, r0
 8000ce4:	ea82 0c0c 	eor.w	ip, r2, ip
 8000ce8:	f8c7 c528 	str.w	ip, [r7, #1320]	; 0x528
 8000cec:	404b      	eors	r3, r1
 8000cee:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8000cf2:	f507 63a5 	add.w	r3, r7, #1320	; 0x528
 8000cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cfa:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8000cfe:	e9c1 2300 	strd	r2, r3, [r1]

            //thetaRhoPiChiIotaPrepareTheta(round  , A, E)
            Da = BCu^ROL(BCe, 1);
 8000d02:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 8000d06:	0fda      	lsrs	r2, r3, #31
 8000d08:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	f8c7 391c 	str.w	r3, [r7, #2332]	; 0x91c
 8000d14:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 8000d18:	0fda      	lsrs	r2, r3, #31
 8000d1a:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	4313      	orrs	r3, r2
 8000d22:	f8c7 3918 	str.w	r3, [r7, #2328]	; 0x918
 8000d26:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8000d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2e:	f607 1118 	addw	r1, r7, #2328	; 0x918
 8000d32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000d36:	4684      	mov	ip, r0
 8000d38:	ea82 0c0c 	eor.w	ip, r2, ip
 8000d3c:	f8c7 c520 	str.w	ip, [r7, #1312]	; 0x520
 8000d40:	404b      	eors	r3, r1
 8000d42:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 8000d46:	f507 63a4 	add.w	r3, r7, #1312	; 0x520
 8000d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d4e:	f607 2188 	addw	r1, r7, #2696	; 0xa88
 8000d52:	e9c1 2300 	strd	r2, r3, [r1]
            De = BCa^ROL(BCi, 1);
 8000d56:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 8000d5a:	0fda      	lsrs	r2, r3, #31
 8000d5c:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	4313      	orrs	r3, r2
 8000d64:	f8c7 3914 	str.w	r3, [r7, #2324]	; 0x914
 8000d68:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 8000d6c:	0fda      	lsrs	r2, r3, #31
 8000d6e:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	4313      	orrs	r3, r2
 8000d76:	f8c7 3910 	str.w	r3, [r7, #2320]	; 0x910
 8000d7a:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8000d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d82:	f507 6111 	add.w	r1, r7, #2320	; 0x910
 8000d86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000d8a:	4684      	mov	ip, r0
 8000d8c:	ea82 0c0c 	eor.w	ip, r2, ip
 8000d90:	f8c7 c518 	str.w	ip, [r7, #1304]	; 0x518
 8000d94:	404b      	eors	r3, r1
 8000d96:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
 8000d9a:	f507 63a3 	add.w	r3, r7, #1304	; 0x518
 8000d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000da2:	f507 6128 	add.w	r1, r7, #2688	; 0xa80
 8000da6:	e9c1 2300 	strd	r2, r3, [r1]
            Di = BCe^ROL(BCo, 1);
 8000daa:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 8000dae:	0fda      	lsrs	r2, r3, #31
 8000db0:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 8000db4:	005b      	lsls	r3, r3, #1
 8000db6:	4313      	orrs	r3, r2
 8000db8:	f8c7 390c 	str.w	r3, [r7, #2316]	; 0x90c
 8000dbc:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 8000dc0:	0fda      	lsrs	r2, r3, #31
 8000dc2:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 8000dc6:	005b      	lsls	r3, r3, #1
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	f8c7 3908 	str.w	r3, [r7, #2312]	; 0x908
 8000dce:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8000dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd6:	f607 1108 	addw	r1, r7, #2312	; 0x908
 8000dda:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000dde:	4684      	mov	ip, r0
 8000de0:	ea82 0c0c 	eor.w	ip, r2, ip
 8000de4:	f8c7 c510 	str.w	ip, [r7, #1296]	; 0x510
 8000de8:	404b      	eors	r3, r1
 8000dea:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
 8000dee:	f507 63a2 	add.w	r3, r7, #1296	; 0x510
 8000df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df6:	f607 2178 	addw	r1, r7, #2680	; 0xa78
 8000dfa:	e9c1 2300 	strd	r2, r3, [r1]
            Do = BCi^ROL(BCu, 1);
 8000dfe:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 8000e02:	0fda      	lsrs	r2, r3, #31
 8000e04:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	f8c7 3904 	str.w	r3, [r7, #2308]	; 0x904
 8000e10:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 8000e14:	0fda      	lsrs	r2, r3, #31
 8000e16:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	f8c7 3900 	str.w	r3, [r7, #2304]	; 0x900
 8000e22:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8000e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e2a:	f507 6110 	add.w	r1, r7, #2304	; 0x900
 8000e2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e32:	4684      	mov	ip, r0
 8000e34:	ea82 0c0c 	eor.w	ip, r2, ip
 8000e38:	f8c7 c508 	str.w	ip, [r7, #1288]	; 0x508
 8000e3c:	404b      	eors	r3, r1
 8000e3e:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
 8000e42:	f507 63a1 	add.w	r3, r7, #1288	; 0x508
 8000e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e4a:	f507 6127 	add.w	r1, r7, #2672	; 0xa70
 8000e4e:	e9c1 2300 	strd	r2, r3, [r1]
            Du = BCo^ROL(BCa, 1);
 8000e52:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 8000e56:	0fda      	lsrs	r2, r3, #31
 8000e58:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 8000e5c:	005b      	lsls	r3, r3, #1
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	f8c7 38fc 	str.w	r3, [r7, #2300]	; 0x8fc
 8000e64:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 8000e68:	0fda      	lsrs	r2, r3, #31
 8000e6a:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 8000e6e:	005b      	lsls	r3, r3, #1
 8000e70:	4313      	orrs	r3, r2
 8000e72:	f8c7 38f8 	str.w	r3, [r7, #2296]	; 0x8f8
 8000e76:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8000e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7e:	f607 01f8 	addw	r1, r7, #2296	; 0x8f8
 8000e82:	e9d1 0100 	ldrd	r0, r1, [r1]
 8000e86:	4684      	mov	ip, r0
 8000e88:	ea82 0c0c 	eor.w	ip, r2, ip
 8000e8c:	f8c7 c500 	str.w	ip, [r7, #1280]	; 0x500
 8000e90:	404b      	eors	r3, r1
 8000e92:	f8c7 3504 	str.w	r3, [r7, #1284]	; 0x504
 8000e96:	f507 63a0 	add.w	r3, r7, #1280	; 0x500
 8000e9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e9e:	f607 2168 	addw	r1, r7, #2664	; 0xa68
 8000ea2:	e9c1 2300 	strd	r2, r3, [r1]

            Aba ^= Da;
 8000ea6:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8000eaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000eae:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8000eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eb6:	ea80 0c02 	eor.w	ip, r0, r2
 8000eba:	f8c7 c4f8 	str.w	ip, [r7, #1272]	; 0x4f8
 8000ebe:	404b      	eors	r3, r1
 8000ec0:	f8c7 34fc 	str.w	r3, [r7, #1276]	; 0x4fc
 8000ec4:	f507 639f 	add.w	r3, r7, #1272	; 0x4f8
 8000ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ecc:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 8000ed0:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = Aba;
 8000ed4:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8000ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000edc:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8000ee0:	e9c1 2300 	strd	r2, r3, [r1]
            Age ^= De;
 8000ee4:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 8000ee8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000eec:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8000ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ef4:	ea80 0c02 	eor.w	ip, r0, r2
 8000ef8:	f8c7 c4f0 	str.w	ip, [r7, #1264]	; 0x4f0
 8000efc:	404b      	eors	r3, r1
 8000efe:	f8c7 34f4 	str.w	r3, [r7, #1268]	; 0x4f4
 8000f02:	f507 639e 	add.w	r3, r7, #1264	; 0x4f0
 8000f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f0a:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 8000f0e:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Age, 44);
 8000f12:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 8000f16:	031a      	lsls	r2, r3, #12
 8000f18:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 8000f1c:	0d1b      	lsrs	r3, r3, #20
 8000f1e:	4313      	orrs	r3, r2
 8000f20:	f8c7 34e8 	str.w	r3, [r7, #1256]	; 0x4e8
 8000f24:	f8d7 3b48 	ldr.w	r3, [r7, #2888]	; 0xb48
 8000f28:	031a      	lsls	r2, r3, #12
 8000f2a:	f8d7 3b4c 	ldr.w	r3, [r7, #2892]	; 0xb4c
 8000f2e:	0d1b      	lsrs	r3, r3, #20
 8000f30:	4313      	orrs	r3, r2
 8000f32:	f8c7 34ec 	str.w	r3, [r7, #1260]	; 0x4ec
 8000f36:	f507 639d 	add.w	r3, r7, #1256	; 0x4e8
 8000f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f3e:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8000f42:	e9c1 2300 	strd	r2, r3, [r1]
            Aki ^= Di;
 8000f46:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 8000f4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f4e:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8000f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f56:	ea80 0c02 	eor.w	ip, r0, r2
 8000f5a:	f8c7 c4e0 	str.w	ip, [r7, #1248]	; 0x4e0
 8000f5e:	404b      	eors	r3, r1
 8000f60:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
 8000f64:	f507 639c 	add.w	r3, r7, #1248	; 0x4e0
 8000f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f6c:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 8000f70:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aki, 43);
 8000f74:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8000f78:	02da      	lsls	r2, r3, #11
 8000f7a:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 8000f7e:	0d5b      	lsrs	r3, r3, #21
 8000f80:	4313      	orrs	r3, r2
 8000f82:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 8000f86:	f8d7 3b18 	ldr.w	r3, [r7, #2840]	; 0xb18
 8000f8a:	02da      	lsls	r2, r3, #11
 8000f8c:	f8d7 3b1c 	ldr.w	r3, [r7, #2844]	; 0xb1c
 8000f90:	0d5b      	lsrs	r3, r3, #21
 8000f92:	4313      	orrs	r3, r2
 8000f94:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
 8000f98:	f507 639b 	add.w	r3, r7, #1240	; 0x4d8
 8000f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fa0:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8000fa4:	e9c1 2300 	strd	r2, r3, [r1]
            Amo ^= Do;
 8000fa8:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8000fac:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fb0:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8000fb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fb8:	ea80 0c02 	eor.w	ip, r0, r2
 8000fbc:	f8c7 c4d0 	str.w	ip, [r7, #1232]	; 0x4d0
 8000fc0:	404b      	eors	r3, r1
 8000fc2:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 8000fc6:	f507 639a 	add.w	r3, r7, #1232	; 0x4d0
 8000fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fce:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 8000fd2:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Amo, 21);
 8000fd6:	f8d7 3ae8 	ldr.w	r3, [r7, #2792]	; 0xae8
 8000fda:	0ada      	lsrs	r2, r3, #11
 8000fdc:	f8d7 3aec 	ldr.w	r3, [r7, #2796]	; 0xaec
 8000fe0:	055b      	lsls	r3, r3, #21
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 8000fe8:	f8d7 3aec 	ldr.w	r3, [r7, #2796]	; 0xaec
 8000fec:	0ada      	lsrs	r2, r3, #11
 8000fee:	f8d7 3ae8 	ldr.w	r3, [r7, #2792]	; 0xae8
 8000ff2:	055b      	lsls	r3, r3, #21
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	f8c7 34c8 	str.w	r3, [r7, #1224]	; 0x4c8
 8000ffa:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8000ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001002:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8001006:	e9c1 2300 	strd	r2, r3, [r1]
            Asu ^= Du;
 800100a:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 800100e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001012:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8001016:	e9d3 2300 	ldrd	r2, r3, [r3]
 800101a:	ea80 0c02 	eor.w	ip, r0, r2
 800101e:	f8c7 c4c0 	str.w	ip, [r7, #1216]	; 0x4c0
 8001022:	404b      	eors	r3, r1
 8001024:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
 8001028:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 800102c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001030:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 8001034:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asu, 14);
 8001038:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 800103c:	0c9a      	lsrs	r2, r3, #18
 800103e:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 8001042:	039b      	lsls	r3, r3, #14
 8001044:	4313      	orrs	r3, r2
 8001046:	f8c7 34bc 	str.w	r3, [r7, #1212]	; 0x4bc
 800104a:	f8d7 3abc 	ldr.w	r3, [r7, #2748]	; 0xabc
 800104e:	0c9a      	lsrs	r2, r3, #18
 8001050:	f8d7 3ab8 	ldr.w	r3, [r7, #2744]	; 0xab8
 8001054:	039b      	lsls	r3, r3, #14
 8001056:	4313      	orrs	r3, r2
 8001058:	f8c7 34b8 	str.w	r3, [r7, #1208]	; 0x4b8
 800105c:	f507 6397 	add.w	r3, r7, #1208	; 0x4b8
 8001060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001064:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8001068:	e9c1 2300 	strd	r2, r3, [r1]
            Eba =   BCa ^((~BCe)&  BCi );
 800106c:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8001070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001074:	43d1      	mvns	r1, r2
 8001076:	f8c7 18f0 	str.w	r1, [r7, #2288]	; 0x8f0
 800107a:	43db      	mvns	r3, r3
 800107c:	f8c7 38f4 	str.w	r3, [r7, #2292]	; 0x8f4
 8001080:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	f507 610f 	add.w	r1, r7, #2288	; 0x8f0
 800108c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001090:	4684      	mov	ip, r0
 8001092:	ea0c 0c02 	and.w	ip, ip, r2
 8001096:	f8c7 c8e8 	str.w	ip, [r7, #2280]	; 0x8e8
 800109a:	400b      	ands	r3, r1
 800109c:	f8c7 38ec 	str.w	r3, [r7, #2284]	; 0x8ec
 80010a0:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80010a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a8:	f607 01e8 	addw	r1, r7, #2280	; 0x8e8
 80010ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80010b0:	4684      	mov	ip, r0
 80010b2:	ea82 0c0c 	eor.w	ip, r2, ip
 80010b6:	f8c7 c4b0 	str.w	ip, [r7, #1200]	; 0x4b0
 80010ba:	404b      	eors	r3, r1
 80010bc:	f8c7 34b4 	str.w	r3, [r7, #1204]	; 0x4b4
 80010c0:	f507 6396 	add.w	r3, r7, #1200	; 0x4b0
 80010c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c8:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 80010cc:	e9c1 2300 	strd	r2, r3, [r1]
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 80010d0:	4ac7      	ldr	r2, [pc, #796]	; (80013f0 <KeccakF1600_StatePermute+0xbf8>)
 80010d2:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	4413      	add	r3, r2
 80010da:	e9d3 0100 	ldrd	r0, r1, [r3]
 80010de:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80010e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e6:	ea82 0c00 	eor.w	ip, r2, r0
 80010ea:	f8c7 c4a8 	str.w	ip, [r7, #1192]	; 0x4a8
 80010ee:	404b      	eors	r3, r1
 80010f0:	f8c7 34ac 	str.w	r3, [r7, #1196]	; 0x4ac
 80010f4:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80010f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fc:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 8001100:	e9c1 2300 	strd	r2, r3, [r1]
            Ebe =   BCe ^((~BCi)&  BCo );
 8001104:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8001108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110c:	43d1      	mvns	r1, r2
 800110e:	f8c7 18e0 	str.w	r1, [r7, #2272]	; 0x8e0
 8001112:	43db      	mvns	r3, r3
 8001114:	f8c7 38e4 	str.w	r3, [r7, #2276]	; 0x8e4
 8001118:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001120:	f507 610e 	add.w	r1, r7, #2272	; 0x8e0
 8001124:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001128:	4684      	mov	ip, r0
 800112a:	ea0c 0c02 	and.w	ip, ip, r2
 800112e:	f8c7 c8d8 	str.w	ip, [r7, #2264]	; 0x8d8
 8001132:	400b      	ands	r3, r1
 8001134:	f8c7 38dc 	str.w	r3, [r7, #2268]	; 0x8dc
 8001138:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800113c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001140:	f607 01d8 	addw	r1, r7, #2264	; 0x8d8
 8001144:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001148:	4684      	mov	ip, r0
 800114a:	ea82 0c0c 	eor.w	ip, r2, ip
 800114e:	f8c7 c4a0 	str.w	ip, [r7, #1184]	; 0x4a0
 8001152:	404b      	eors	r3, r1
 8001154:	f8c7 34a4 	str.w	r3, [r7, #1188]	; 0x4a4
 8001158:	f507 6394 	add.w	r3, r7, #1184	; 0x4a0
 800115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001160:	f607 2158 	addw	r1, r7, #2648	; 0xa58
 8001164:	e9c1 2300 	strd	r2, r3, [r1]
            Ebi =   BCi ^((~BCo)&  BCu );
 8001168:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800116c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001170:	43d1      	mvns	r1, r2
 8001172:	f8c7 18d0 	str.w	r1, [r7, #2256]	; 0x8d0
 8001176:	43db      	mvns	r3, r3
 8001178:	f8c7 38d4 	str.w	r3, [r7, #2260]	; 0x8d4
 800117c:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8001180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001184:	f507 610d 	add.w	r1, r7, #2256	; 0x8d0
 8001188:	e9d1 0100 	ldrd	r0, r1, [r1]
 800118c:	4684      	mov	ip, r0
 800118e:	ea0c 0c02 	and.w	ip, ip, r2
 8001192:	f8c7 c8c8 	str.w	ip, [r7, #2248]	; 0x8c8
 8001196:	400b      	ands	r3, r1
 8001198:	f8c7 38cc 	str.w	r3, [r7, #2252]	; 0x8cc
 800119c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80011a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011a4:	f607 01c8 	addw	r1, r7, #2248	; 0x8c8
 80011a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011ac:	4684      	mov	ip, r0
 80011ae:	ea82 0c0c 	eor.w	ip, r2, ip
 80011b2:	f8c7 c498 	str.w	ip, [r7, #1176]	; 0x498
 80011b6:	404b      	eors	r3, r1
 80011b8:	f8c7 349c 	str.w	r3, [r7, #1180]	; 0x49c
 80011bc:	f507 6393 	add.w	r3, r7, #1176	; 0x498
 80011c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011c4:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 80011c8:	e9c1 2300 	strd	r2, r3, [r1]
            Ebo =   BCo ^((~BCu)&  BCa );
 80011cc:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80011d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d4:	43d1      	mvns	r1, r2
 80011d6:	f8c7 18c0 	str.w	r1, [r7, #2240]	; 0x8c0
 80011da:	43db      	mvns	r3, r3
 80011dc:	f8c7 38c4 	str.w	r3, [r7, #2244]	; 0x8c4
 80011e0:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80011e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011e8:	f507 610c 	add.w	r1, r7, #2240	; 0x8c0
 80011ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80011f0:	4684      	mov	ip, r0
 80011f2:	ea0c 0c02 	and.w	ip, ip, r2
 80011f6:	f8c7 c8b8 	str.w	ip, [r7, #2232]	; 0x8b8
 80011fa:	400b      	ands	r3, r1
 80011fc:	f8c7 38bc 	str.w	r3, [r7, #2236]	; 0x8bc
 8001200:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001208:	f607 01b8 	addw	r1, r7, #2232	; 0x8b8
 800120c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001210:	4684      	mov	ip, r0
 8001212:	ea82 0c0c 	eor.w	ip, r2, ip
 8001216:	f8c7 c490 	str.w	ip, [r7, #1168]	; 0x490
 800121a:	404b      	eors	r3, r1
 800121c:	f8c7 3494 	str.w	r3, [r7, #1172]	; 0x494
 8001220:	f507 6392 	add.w	r3, r7, #1168	; 0x490
 8001224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001228:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 800122c:	e9c1 2300 	strd	r2, r3, [r1]
            Ebu =   BCu ^((~BCa)&  BCe );
 8001230:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8001234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001238:	43d1      	mvns	r1, r2
 800123a:	f8c7 18b0 	str.w	r1, [r7, #2224]	; 0x8b0
 800123e:	43db      	mvns	r3, r3
 8001240:	f8c7 38b4 	str.w	r3, [r7, #2228]	; 0x8b4
 8001244:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8001248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800124c:	f507 610b 	add.w	r1, r7, #2224	; 0x8b0
 8001250:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001254:	4684      	mov	ip, r0
 8001256:	ea0c 0c02 	and.w	ip, ip, r2
 800125a:	f8c7 c8a8 	str.w	ip, [r7, #2216]	; 0x8a8
 800125e:	400b      	ands	r3, r1
 8001260:	f8c7 38ac 	str.w	r3, [r7, #2220]	; 0x8ac
 8001264:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8001268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800126c:	f607 01a8 	addw	r1, r7, #2216	; 0x8a8
 8001270:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001274:	4684      	mov	ip, r0
 8001276:	ea82 0c0c 	eor.w	ip, r2, ip
 800127a:	f8c7 c488 	str.w	ip, [r7, #1160]	; 0x488
 800127e:	404b      	eors	r3, r1
 8001280:	f8c7 348c 	str.w	r3, [r7, #1164]	; 0x48c
 8001284:	f507 6391 	add.w	r3, r7, #1160	; 0x488
 8001288:	e9d3 2300 	ldrd	r2, r3, [r3]
 800128c:	f507 6124 	add.w	r1, r7, #2624	; 0xa40
 8001290:	e9c1 2300 	strd	r2, r3, [r1]

            Abo ^= Do;
 8001294:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 8001298:	e9d3 0100 	ldrd	r0, r1, [r3]
 800129c:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 80012a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012a4:	ea80 0c02 	eor.w	ip, r0, r2
 80012a8:	f8c7 c480 	str.w	ip, [r7, #1152]	; 0x480
 80012ac:	404b      	eors	r3, r1
 80012ae:	f8c7 3484 	str.w	r3, [r7, #1156]	; 0x484
 80012b2:	f507 6390 	add.w	r3, r7, #1152	; 0x480
 80012b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ba:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 80012be:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abo, 28);
 80012c2:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	; 0xb60
 80012c6:	091a      	lsrs	r2, r3, #4
 80012c8:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	; 0xb64
 80012cc:	071b      	lsls	r3, r3, #28
 80012ce:	4313      	orrs	r3, r2
 80012d0:	f8c7 347c 	str.w	r3, [r7, #1148]	; 0x47c
 80012d4:	f8d7 3b64 	ldr.w	r3, [r7, #2916]	; 0xb64
 80012d8:	091a      	lsrs	r2, r3, #4
 80012da:	f8d7 3b60 	ldr.w	r3, [r7, #2912]	; 0xb60
 80012de:	071b      	lsls	r3, r3, #28
 80012e0:	4313      	orrs	r3, r2
 80012e2:	f8c7 3478 	str.w	r3, [r7, #1144]	; 0x478
 80012e6:	f507 638f 	add.w	r3, r7, #1144	; 0x478
 80012ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012ee:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 80012f2:	e9c1 2300 	strd	r2, r3, [r1]
            Agu ^= Du;
 80012f6:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 80012fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80012fe:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8001302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001306:	ea80 0c02 	eor.w	ip, r0, r2
 800130a:	f8c7 c470 	str.w	ip, [r7, #1136]	; 0x470
 800130e:	404b      	eors	r3, r1
 8001310:	f8c7 3474 	str.w	r3, [r7, #1140]	; 0x474
 8001314:	f507 638e 	add.w	r3, r7, #1136	; 0x470
 8001318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800131c:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 8001320:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Agu, 20);
 8001324:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	; 0xb30
 8001328:	0b1a      	lsrs	r2, r3, #12
 800132a:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 800132e:	051b      	lsls	r3, r3, #20
 8001330:	4313      	orrs	r3, r2
 8001332:	f8c7 346c 	str.w	r3, [r7, #1132]	; 0x46c
 8001336:	f8d7 3b34 	ldr.w	r3, [r7, #2868]	; 0xb34
 800133a:	0b1a      	lsrs	r2, r3, #12
 800133c:	f8d7 3b30 	ldr.w	r3, [r7, #2864]	; 0xb30
 8001340:	051b      	lsls	r3, r3, #20
 8001342:	4313      	orrs	r3, r2
 8001344:	f8c7 3468 	str.w	r3, [r7, #1128]	; 0x468
 8001348:	f507 638d 	add.w	r3, r7, #1128	; 0x468
 800134c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001350:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8001354:	e9c1 2300 	strd	r2, r3, [r1]
            Aka ^= Da;
 8001358:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 800135c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001360:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8001364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001368:	ea80 0c02 	eor.w	ip, r0, r2
 800136c:	f8c7 c460 	str.w	ip, [r7, #1120]	; 0x460
 8001370:	404b      	eors	r3, r1
 8001372:	f8c7 3464 	str.w	r3, [r7, #1124]	; 0x464
 8001376:	f507 638c 	add.w	r3, r7, #1120	; 0x460
 800137a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137e:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 8001382:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aka,  3);
 8001386:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	; 0xb28
 800138a:	0f5a      	lsrs	r2, r3, #29
 800138c:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	; 0xb2c
 8001390:	00db      	lsls	r3, r3, #3
 8001392:	4313      	orrs	r3, r2
 8001394:	f8c7 345c 	str.w	r3, [r7, #1116]	; 0x45c
 8001398:	f8d7 3b2c 	ldr.w	r3, [r7, #2860]	; 0xb2c
 800139c:	0f5a      	lsrs	r2, r3, #29
 800139e:	f8d7 3b28 	ldr.w	r3, [r7, #2856]	; 0xb28
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	4313      	orrs	r3, r2
 80013a6:	f8c7 3458 	str.w	r3, [r7, #1112]	; 0x458
 80013aa:	f507 638b 	add.w	r3, r7, #1112	; 0x458
 80013ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013b2:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 80013b6:	e9c1 2300 	strd	r2, r3, [r1]
            Ame ^= De;
 80013ba:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 80013be:	e9d3 0100 	ldrd	r0, r1, [r3]
 80013c2:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80013c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013ca:	ea80 0c02 	eor.w	ip, r0, r2
 80013ce:	f8c7 c450 	str.w	ip, [r7, #1104]	; 0x450
 80013d2:	404b      	eors	r3, r1
 80013d4:	f8c7 3454 	str.w	r3, [r7, #1108]	; 0x454
 80013d8:	f507 638a 	add.w	r3, r7, #1104	; 0x450
 80013dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e0:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 80013e4:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ame, 45);
 80013e8:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 80013ec:	035a      	lsls	r2, r3, #13
 80013ee:	e001      	b.n	80013f4 <KeccakF1600_StatePermute+0xbfc>
 80013f0:	08005ac0 	.word	0x08005ac0
 80013f4:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 80013f8:	0cdb      	lsrs	r3, r3, #19
 80013fa:	4313      	orrs	r3, r2
 80013fc:	f8c7 3448 	str.w	r3, [r7, #1096]	; 0x448
 8001400:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8001404:	035a      	lsls	r2, r3, #13
 8001406:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 800140a:	0cdb      	lsrs	r3, r3, #19
 800140c:	4313      	orrs	r3, r2
 800140e:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
 8001412:	f507 6389 	add.w	r3, r7, #1096	; 0x448
 8001416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800141a:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800141e:	e9c1 2300 	strd	r2, r3, [r1]
            Asi ^= Di;
 8001422:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 8001426:	e9d3 0100 	ldrd	r0, r1, [r3]
 800142a:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800142e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001432:	ea80 0c02 	eor.w	ip, r0, r2
 8001436:	f8c7 c440 	str.w	ip, [r7, #1088]	; 0x440
 800143a:	404b      	eors	r3, r1
 800143c:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 8001440:	f507 6388 	add.w	r3, r7, #1088	; 0x440
 8001444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001448:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 800144c:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asi, 61);
 8001450:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 8001454:	075a      	lsls	r2, r3, #29
 8001456:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 800145a:	08db      	lsrs	r3, r3, #3
 800145c:	4313      	orrs	r3, r2
 800145e:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
 8001462:	f8d7 3ac8 	ldr.w	r3, [r7, #2760]	; 0xac8
 8001466:	075a      	lsls	r2, r3, #29
 8001468:	f8d7 3acc 	ldr.w	r3, [r7, #2764]	; 0xacc
 800146c:	08db      	lsrs	r3, r3, #3
 800146e:	4313      	orrs	r3, r2
 8001470:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
 8001474:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 8001478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147c:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8001480:	e9c1 2300 	strd	r2, r3, [r1]
            Ega =   BCa ^((~BCe)&  BCi );
 8001484:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8001488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148c:	43d1      	mvns	r1, r2
 800148e:	f8c7 18a0 	str.w	r1, [r7, #2208]	; 0x8a0
 8001492:	43db      	mvns	r3, r3
 8001494:	f8c7 38a4 	str.w	r3, [r7, #2212]	; 0x8a4
 8001498:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800149c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014a0:	f507 610a 	add.w	r1, r7, #2208	; 0x8a0
 80014a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014a8:	4684      	mov	ip, r0
 80014aa:	ea0c 0c02 	and.w	ip, ip, r2
 80014ae:	f8c7 c898 	str.w	ip, [r7, #2200]	; 0x898
 80014b2:	400b      	ands	r3, r1
 80014b4:	f8c7 389c 	str.w	r3, [r7, #2204]	; 0x89c
 80014b8:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80014bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014c0:	f607 0198 	addw	r1, r7, #2200	; 0x898
 80014c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80014c8:	4684      	mov	ip, r0
 80014ca:	ea82 0c0c 	eor.w	ip, r2, ip
 80014ce:	f8c7 c430 	str.w	ip, [r7, #1072]	; 0x430
 80014d2:	404b      	eors	r3, r1
 80014d4:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 80014d8:	f507 6386 	add.w	r3, r7, #1072	; 0x430
 80014dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e0:	f607 2138 	addw	r1, r7, #2616	; 0xa38
 80014e4:	e9c1 2300 	strd	r2, r3, [r1]
            Ege =   BCe ^((~BCi)&  BCo );
 80014e8:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80014ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014f0:	43d1      	mvns	r1, r2
 80014f2:	f8c7 1890 	str.w	r1, [r7, #2192]	; 0x890
 80014f6:	43db      	mvns	r3, r3
 80014f8:	f8c7 3894 	str.w	r3, [r7, #2196]	; 0x894
 80014fc:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001500:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001504:	f507 6109 	add.w	r1, r7, #2192	; 0x890
 8001508:	e9d1 0100 	ldrd	r0, r1, [r1]
 800150c:	4684      	mov	ip, r0
 800150e:	ea0c 0c02 	and.w	ip, ip, r2
 8001512:	f8c7 c888 	str.w	ip, [r7, #2184]	; 0x888
 8001516:	400b      	ands	r3, r1
 8001518:	f8c7 388c 	str.w	r3, [r7, #2188]	; 0x88c
 800151c:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8001520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001524:	f607 0188 	addw	r1, r7, #2184	; 0x888
 8001528:	e9d1 0100 	ldrd	r0, r1, [r1]
 800152c:	4684      	mov	ip, r0
 800152e:	ea82 0c0c 	eor.w	ip, r2, ip
 8001532:	f8c7 c428 	str.w	ip, [r7, #1064]	; 0x428
 8001536:	404b      	eors	r3, r1
 8001538:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 800153c:	f507 6385 	add.w	r3, r7, #1064	; 0x428
 8001540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001544:	f507 6123 	add.w	r1, r7, #2608	; 0xa30
 8001548:	e9c1 2300 	strd	r2, r3, [r1]
            Egi =   BCi ^((~BCo)&  BCu );
 800154c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001554:	43d1      	mvns	r1, r2
 8001556:	f8c7 1880 	str.w	r1, [r7, #2176]	; 0x880
 800155a:	43db      	mvns	r3, r3
 800155c:	f8c7 3884 	str.w	r3, [r7, #2180]	; 0x884
 8001560:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8001564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001568:	f507 6108 	add.w	r1, r7, #2176	; 0x880
 800156c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001570:	4684      	mov	ip, r0
 8001572:	ea0c 0c02 	and.w	ip, ip, r2
 8001576:	f8c7 c878 	str.w	ip, [r7, #2168]	; 0x878
 800157a:	400b      	ands	r3, r1
 800157c:	f8c7 387c 	str.w	r3, [r7, #2172]	; 0x87c
 8001580:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8001584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001588:	f607 0178 	addw	r1, r7, #2168	; 0x878
 800158c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001590:	4684      	mov	ip, r0
 8001592:	ea82 0c0c 	eor.w	ip, r2, ip
 8001596:	f8c7 c420 	str.w	ip, [r7, #1056]	; 0x420
 800159a:	404b      	eors	r3, r1
 800159c:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
 80015a0:	f507 6384 	add.w	r3, r7, #1056	; 0x420
 80015a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015a8:	f607 2128 	addw	r1, r7, #2600	; 0xa28
 80015ac:	e9c1 2300 	strd	r2, r3, [r1]
            Ego =   BCo ^((~BCu)&  BCa );
 80015b0:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80015b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b8:	43d1      	mvns	r1, r2
 80015ba:	f8c7 1870 	str.w	r1, [r7, #2160]	; 0x870
 80015be:	43db      	mvns	r3, r3
 80015c0:	f8c7 3874 	str.w	r3, [r7, #2164]	; 0x874
 80015c4:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80015c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015cc:	f507 6107 	add.w	r1, r7, #2160	; 0x870
 80015d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015d4:	4684      	mov	ip, r0
 80015d6:	ea0c 0c02 	and.w	ip, ip, r2
 80015da:	f8c7 c868 	str.w	ip, [r7, #2152]	; 0x868
 80015de:	400b      	ands	r3, r1
 80015e0:	f8c7 386c 	str.w	r3, [r7, #2156]	; 0x86c
 80015e4:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80015e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ec:	f607 0168 	addw	r1, r7, #2152	; 0x868
 80015f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80015f4:	4684      	mov	ip, r0
 80015f6:	ea82 0c0c 	eor.w	ip, r2, ip
 80015fa:	f8c7 c418 	str.w	ip, [r7, #1048]	; 0x418
 80015fe:	404b      	eors	r3, r1
 8001600:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 8001604:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8001608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800160c:	f507 6122 	add.w	r1, r7, #2592	; 0xa20
 8001610:	e9c1 2300 	strd	r2, r3, [r1]
            Egu =   BCu ^((~BCa)&  BCe );
 8001614:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8001618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800161c:	43d1      	mvns	r1, r2
 800161e:	f8c7 1860 	str.w	r1, [r7, #2144]	; 0x860
 8001622:	43db      	mvns	r3, r3
 8001624:	f8c7 3864 	str.w	r3, [r7, #2148]	; 0x864
 8001628:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800162c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001630:	f507 6106 	add.w	r1, r7, #2144	; 0x860
 8001634:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001638:	4684      	mov	ip, r0
 800163a:	ea0c 0c02 	and.w	ip, ip, r2
 800163e:	f8c7 c858 	str.w	ip, [r7, #2136]	; 0x858
 8001642:	400b      	ands	r3, r1
 8001644:	f8c7 385c 	str.w	r3, [r7, #2140]	; 0x85c
 8001648:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001650:	f607 0158 	addw	r1, r7, #2136	; 0x858
 8001654:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001658:	4684      	mov	ip, r0
 800165a:	ea82 0c0c 	eor.w	ip, r2, ip
 800165e:	f8c7 c410 	str.w	ip, [r7, #1040]	; 0x410
 8001662:	404b      	eors	r3, r1
 8001664:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
 8001668:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800166c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001670:	f607 2118 	addw	r1, r7, #2584	; 0xa18
 8001674:	e9c1 2300 	strd	r2, r3, [r1]

            Abe ^= De;
 8001678:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 800167c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001680:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001688:	ea80 0c02 	eor.w	ip, r0, r2
 800168c:	f8c7 c408 	str.w	ip, [r7, #1032]	; 0x408
 8001690:	404b      	eors	r3, r1
 8001692:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
 8001696:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800169a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800169e:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 80016a2:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abe,  1);
 80016a6:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	; 0xb70
 80016aa:	0fda      	lsrs	r2, r3, #31
 80016ac:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	; 0xb74
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	4313      	orrs	r3, r2
 80016b4:	f8c7 3404 	str.w	r3, [r7, #1028]	; 0x404
 80016b8:	f8d7 3b74 	ldr.w	r3, [r7, #2932]	; 0xb74
 80016bc:	0fda      	lsrs	r2, r3, #31
 80016be:	f8d7 3b70 	ldr.w	r3, [r7, #2928]	; 0xb70
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	4313      	orrs	r3, r2
 80016c6:	f8c7 3400 	str.w	r3, [r7, #1024]	; 0x400
 80016ca:	f507 6380 	add.w	r3, r7, #1024	; 0x400
 80016ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016d2:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 80016d6:	e9c1 2300 	strd	r2, r3, [r1]
            Agi ^= Di;
 80016da:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 80016de:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016e2:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80016e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ea:	ea80 0c02 	eor.w	ip, r0, r2
 80016ee:	f8c7 c3f8 	str.w	ip, [r7, #1016]	; 0x3f8
 80016f2:	404b      	eors	r3, r1
 80016f4:	f8c7 33fc 	str.w	r3, [r7, #1020]	; 0x3fc
 80016f8:	e9d7 23fe 	ldrd	r2, r3, [r7, #1016]	; 0x3f8
 80016fc:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 8001700:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Agi,  6);
 8001704:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	; 0xb40
 8001708:	0e9a      	lsrs	r2, r3, #26
 800170a:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	; 0xb44
 800170e:	019b      	lsls	r3, r3, #6
 8001710:	4313      	orrs	r3, r2
 8001712:	f8c7 33f4 	str.w	r3, [r7, #1012]	; 0x3f4
 8001716:	f8d7 3b44 	ldr.w	r3, [r7, #2884]	; 0xb44
 800171a:	0e9a      	lsrs	r2, r3, #26
 800171c:	f8d7 3b40 	ldr.w	r3, [r7, #2880]	; 0xb40
 8001720:	019b      	lsls	r3, r3, #6
 8001722:	4313      	orrs	r3, r2
 8001724:	f8c7 33f0 	str.w	r3, [r7, #1008]	; 0x3f0
 8001728:	e9d7 23fc 	ldrd	r2, r3, [r7, #1008]	; 0x3f0
 800172c:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8001730:	e9c1 2300 	strd	r2, r3, [r1]
            Ako ^= Do;
 8001734:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 8001738:	e9d3 0100 	ldrd	r0, r1, [r3]
 800173c:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8001740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001744:	ea80 0c02 	eor.w	ip, r0, r2
 8001748:	f8c7 c3e8 	str.w	ip, [r7, #1000]	; 0x3e8
 800174c:	404b      	eors	r3, r1
 800174e:	f8c7 33ec 	str.w	r3, [r7, #1004]	; 0x3ec
 8001752:	e9d7 23fa 	ldrd	r2, r3, [r7, #1000]	; 0x3e8
 8001756:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 800175a:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Ako, 25);
 800175e:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 8001762:	09da      	lsrs	r2, r3, #7
 8001764:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8001768:	065b      	lsls	r3, r3, #25
 800176a:	4313      	orrs	r3, r2
 800176c:	f8c7 33e4 	str.w	r3, [r7, #996]	; 0x3e4
 8001770:	f8d7 3b14 	ldr.w	r3, [r7, #2836]	; 0xb14
 8001774:	09da      	lsrs	r2, r3, #7
 8001776:	f8d7 3b10 	ldr.w	r3, [r7, #2832]	; 0xb10
 800177a:	065b      	lsls	r3, r3, #25
 800177c:	4313      	orrs	r3, r2
 800177e:	f8c7 33e0 	str.w	r3, [r7, #992]	; 0x3e0
 8001782:	e9d7 23f8 	ldrd	r2, r3, [r7, #992]	; 0x3e0
 8001786:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800178a:	e9c1 2300 	strd	r2, r3, [r1]
            Amu ^= Du;
 800178e:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8001792:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001796:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 800179a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800179e:	ea80 0c02 	eor.w	ip, r0, r2
 80017a2:	f8c7 c3d8 	str.w	ip, [r7, #984]	; 0x3d8
 80017a6:	404b      	eors	r3, r1
 80017a8:	f8c7 33dc 	str.w	r3, [r7, #988]	; 0x3dc
 80017ac:	e9d7 23f6 	ldrd	r2, r3, [r7, #984]	; 0x3d8
 80017b0:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 80017b4:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Amu,  8);
 80017b8:	f8d7 3ae0 	ldr.w	r3, [r7, #2784]	; 0xae0
 80017bc:	0e1a      	lsrs	r2, r3, #24
 80017be:	f8d7 3ae4 	ldr.w	r3, [r7, #2788]	; 0xae4
 80017c2:	021b      	lsls	r3, r3, #8
 80017c4:	4313      	orrs	r3, r2
 80017c6:	f8c7 33d4 	str.w	r3, [r7, #980]	; 0x3d4
 80017ca:	f8d7 3ae4 	ldr.w	r3, [r7, #2788]	; 0xae4
 80017ce:	0e1a      	lsrs	r2, r3, #24
 80017d0:	f8d7 3ae0 	ldr.w	r3, [r7, #2784]	; 0xae0
 80017d4:	021b      	lsls	r3, r3, #8
 80017d6:	4313      	orrs	r3, r2
 80017d8:	f8c7 33d0 	str.w	r3, [r7, #976]	; 0x3d0
 80017dc:	e9d7 23f4 	ldrd	r2, r3, [r7, #976]	; 0x3d0
 80017e0:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 80017e4:	e9c1 2300 	strd	r2, r3, [r1]
            Asa ^= Da;
 80017e8:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 80017ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80017f0:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 80017f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017f8:	ea80 0c02 	eor.w	ip, r0, r2
 80017fc:	f8c7 c3c8 	str.w	ip, [r7, #968]	; 0x3c8
 8001800:	404b      	eors	r3, r1
 8001802:	f8c7 33cc 	str.w	r3, [r7, #972]	; 0x3cc
 8001806:	e9d7 23f2 	ldrd	r2, r3, [r7, #968]	; 0x3c8
 800180a:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 800180e:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Asa, 18);
 8001812:	f8d7 3ad8 	ldr.w	r3, [r7, #2776]	; 0xad8
 8001816:	0b9a      	lsrs	r2, r3, #14
 8001818:	f8d7 3adc 	ldr.w	r3, [r7, #2780]	; 0xadc
 800181c:	049b      	lsls	r3, r3, #18
 800181e:	4313      	orrs	r3, r2
 8001820:	f8c7 33c4 	str.w	r3, [r7, #964]	; 0x3c4
 8001824:	f8d7 3adc 	ldr.w	r3, [r7, #2780]	; 0xadc
 8001828:	0b9a      	lsrs	r2, r3, #14
 800182a:	f8d7 3ad8 	ldr.w	r3, [r7, #2776]	; 0xad8
 800182e:	049b      	lsls	r3, r3, #18
 8001830:	4313      	orrs	r3, r2
 8001832:	f8c7 33c0 	str.w	r3, [r7, #960]	; 0x3c0
 8001836:	e9d7 23f0 	ldrd	r2, r3, [r7, #960]	; 0x3c0
 800183a:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 800183e:	e9c1 2300 	strd	r2, r3, [r1]
            Eka =   BCa ^((~BCe)&  BCi );
 8001842:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8001846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184a:	43d1      	mvns	r1, r2
 800184c:	f8c7 1850 	str.w	r1, [r7, #2128]	; 0x850
 8001850:	43db      	mvns	r3, r3
 8001852:	f8c7 3854 	str.w	r3, [r7, #2132]	; 0x854
 8001856:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800185a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185e:	f507 6105 	add.w	r1, r7, #2128	; 0x850
 8001862:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001866:	4684      	mov	ip, r0
 8001868:	ea0c 0c02 	and.w	ip, ip, r2
 800186c:	f8c7 c848 	str.w	ip, [r7, #2120]	; 0x848
 8001870:	400b      	ands	r3, r1
 8001872:	f8c7 384c 	str.w	r3, [r7, #2124]	; 0x84c
 8001876:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800187a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187e:	f607 0148 	addw	r1, r7, #2120	; 0x848
 8001882:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001886:	4684      	mov	ip, r0
 8001888:	ea82 0c0c 	eor.w	ip, r2, ip
 800188c:	f8c7 c3b8 	str.w	ip, [r7, #952]	; 0x3b8
 8001890:	404b      	eors	r3, r1
 8001892:	f8c7 33bc 	str.w	r3, [r7, #956]	; 0x3bc
 8001896:	e9d7 23ee 	ldrd	r2, r3, [r7, #952]	; 0x3b8
 800189a:	f507 6121 	add.w	r1, r7, #2576	; 0xa10
 800189e:	e9c1 2300 	strd	r2, r3, [r1]
            Eke =   BCe ^((~BCi)&  BCo );
 80018a2:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80018a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018aa:	43d1      	mvns	r1, r2
 80018ac:	f8c7 1840 	str.w	r1, [r7, #2112]	; 0x840
 80018b0:	43db      	mvns	r3, r3
 80018b2:	f8c7 3844 	str.w	r3, [r7, #2116]	; 0x844
 80018b6:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80018ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018be:	f507 6104 	add.w	r1, r7, #2112	; 0x840
 80018c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80018c6:	4684      	mov	ip, r0
 80018c8:	ea0c 0c02 	and.w	ip, ip, r2
 80018cc:	f8c7 c838 	str.w	ip, [r7, #2104]	; 0x838
 80018d0:	400b      	ands	r3, r1
 80018d2:	f8c7 383c 	str.w	r3, [r7, #2108]	; 0x83c
 80018d6:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80018da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018de:	f607 0138 	addw	r1, r7, #2104	; 0x838
 80018e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80018e6:	4684      	mov	ip, r0
 80018e8:	ea82 0c0c 	eor.w	ip, r2, ip
 80018ec:	f8c7 c3b0 	str.w	ip, [r7, #944]	; 0x3b0
 80018f0:	404b      	eors	r3, r1
 80018f2:	f8c7 33b4 	str.w	r3, [r7, #948]	; 0x3b4
 80018f6:	e9d7 23ec 	ldrd	r2, r3, [r7, #944]	; 0x3b0
 80018fa:	f607 2108 	addw	r1, r7, #2568	; 0xa08
 80018fe:	e9c1 2300 	strd	r2, r3, [r1]
            Eki =   BCi ^((~BCo)&  BCu );
 8001902:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190a:	43d1      	mvns	r1, r2
 800190c:	f8c7 1830 	str.w	r1, [r7, #2096]	; 0x830
 8001910:	43db      	mvns	r3, r3
 8001912:	f8c7 3834 	str.w	r3, [r7, #2100]	; 0x834
 8001916:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800191a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191e:	f507 6103 	add.w	r1, r7, #2096	; 0x830
 8001922:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001926:	4684      	mov	ip, r0
 8001928:	ea0c 0c02 	and.w	ip, ip, r2
 800192c:	f8c7 c828 	str.w	ip, [r7, #2088]	; 0x828
 8001930:	400b      	ands	r3, r1
 8001932:	f8c7 382c 	str.w	r3, [r7, #2092]	; 0x82c
 8001936:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193e:	f607 0128 	addw	r1, r7, #2088	; 0x828
 8001942:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001946:	4684      	mov	ip, r0
 8001948:	ea82 0c0c 	eor.w	ip, r2, ip
 800194c:	f8c7 c3a8 	str.w	ip, [r7, #936]	; 0x3a8
 8001950:	404b      	eors	r3, r1
 8001952:	f8c7 33ac 	str.w	r3, [r7, #940]	; 0x3ac
 8001956:	e9d7 23ea 	ldrd	r2, r3, [r7, #936]	; 0x3a8
 800195a:	f507 6120 	add.w	r1, r7, #2560	; 0xa00
 800195e:	e9c1 2300 	strd	r2, r3, [r1]
            Eko =   BCo ^((~BCu)&  BCa );
 8001962:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8001966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800196a:	43d1      	mvns	r1, r2
 800196c:	f8c7 1820 	str.w	r1, [r7, #2080]	; 0x820
 8001970:	43db      	mvns	r3, r3
 8001972:	f8c7 3824 	str.w	r3, [r7, #2084]	; 0x824
 8001976:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800197a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197e:	f507 6102 	add.w	r1, r7, #2080	; 0x820
 8001982:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001986:	4684      	mov	ip, r0
 8001988:	ea0c 0c02 	and.w	ip, ip, r2
 800198c:	f8c7 c818 	str.w	ip, [r7, #2072]	; 0x818
 8001990:	400b      	ands	r3, r1
 8001992:	f8c7 381c 	str.w	r3, [r7, #2076]	; 0x81c
 8001996:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800199a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800199e:	f607 0118 	addw	r1, r7, #2072	; 0x818
 80019a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019a6:	4684      	mov	ip, r0
 80019a8:	ea82 0c0c 	eor.w	ip, r2, ip
 80019ac:	f8c7 c3a0 	str.w	ip, [r7, #928]	; 0x3a0
 80019b0:	404b      	eors	r3, r1
 80019b2:	f8c7 33a4 	str.w	r3, [r7, #932]	; 0x3a4
 80019b6:	e9d7 23e8 	ldrd	r2, r3, [r7, #928]	; 0x3a0
 80019ba:	f607 11f8 	addw	r1, r7, #2552	; 0x9f8
 80019be:	e9c1 2300 	strd	r2, r3, [r1]
            Eku =   BCu ^((~BCa)&  BCe );
 80019c2:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80019c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ca:	43d1      	mvns	r1, r2
 80019cc:	f8c7 1810 	str.w	r1, [r7, #2064]	; 0x810
 80019d0:	43db      	mvns	r3, r3
 80019d2:	f8c7 3814 	str.w	r3, [r7, #2068]	; 0x814
 80019d6:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80019da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019de:	f507 6101 	add.w	r1, r7, #2064	; 0x810
 80019e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019e6:	4684      	mov	ip, r0
 80019e8:	ea0c 0c02 	and.w	ip, ip, r2
 80019ec:	f8c7 c808 	str.w	ip, [r7, #2056]	; 0x808
 80019f0:	400b      	ands	r3, r1
 80019f2:	f8c7 380c 	str.w	r3, [r7, #2060]	; 0x80c
 80019f6:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80019fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019fe:	f607 0108 	addw	r1, r7, #2056	; 0x808
 8001a02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a06:	4684      	mov	ip, r0
 8001a08:	ea82 0c0c 	eor.w	ip, r2, ip
 8001a0c:	f8c7 c398 	str.w	ip, [r7, #920]	; 0x398
 8001a10:	404b      	eors	r3, r1
 8001a12:	f8c7 339c 	str.w	r3, [r7, #924]	; 0x39c
 8001a16:	e9d7 23e6 	ldrd	r2, r3, [r7, #920]	; 0x398
 8001a1a:	f507 611f 	add.w	r1, r7, #2544	; 0x9f0
 8001a1e:	e9c1 2300 	strd	r2, r3, [r1]

            Abu ^= Du;
 8001a22:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 8001a26:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a2a:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8001a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a32:	ea80 0c02 	eor.w	ip, r0, r2
 8001a36:	f8c7 c390 	str.w	ip, [r7, #912]	; 0x390
 8001a3a:	404b      	eors	r3, r1
 8001a3c:	f8c7 3394 	str.w	r3, [r7, #916]	; 0x394
 8001a40:	e9d7 23e4 	ldrd	r2, r3, [r7, #912]	; 0x390
 8001a44:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 8001a48:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abu, 27);
 8001a4c:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	; 0xb58
 8001a50:	095a      	lsrs	r2, r3, #5
 8001a52:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	; 0xb5c
 8001a56:	06db      	lsls	r3, r3, #27
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	f8c7 338c 	str.w	r3, [r7, #908]	; 0x38c
 8001a5e:	f8d7 3b5c 	ldr.w	r3, [r7, #2908]	; 0xb5c
 8001a62:	095a      	lsrs	r2, r3, #5
 8001a64:	f8d7 3b58 	ldr.w	r3, [r7, #2904]	; 0xb58
 8001a68:	06db      	lsls	r3, r3, #27
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	f8c7 3388 	str.w	r3, [r7, #904]	; 0x388
 8001a70:	e9d7 23e2 	ldrd	r2, r3, [r7, #904]	; 0x388
 8001a74:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8001a78:	e9c1 2300 	strd	r2, r3, [r1]
            Aga ^= Da;
 8001a7c:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 8001a80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001a84:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8001a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a8c:	ea80 0c02 	eor.w	ip, r0, r2
 8001a90:	f8c7 c380 	str.w	ip, [r7, #896]	; 0x380
 8001a94:	404b      	eors	r3, r1
 8001a96:	f8c7 3384 	str.w	r3, [r7, #900]	; 0x384
 8001a9a:	e9d7 23e0 	ldrd	r2, r3, [r7, #896]	; 0x380
 8001a9e:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 8001aa2:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Aga, 36);
 8001aa6:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	; 0xb54
 8001aaa:	011a      	lsls	r2, r3, #4
 8001aac:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	; 0xb50
 8001ab0:	0f1b      	lsrs	r3, r3, #28
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	f8c7 3378 	str.w	r3, [r7, #888]	; 0x378
 8001ab8:	f8d7 3b50 	ldr.w	r3, [r7, #2896]	; 0xb50
 8001abc:	011a      	lsls	r2, r3, #4
 8001abe:	f8d7 3b54 	ldr.w	r3, [r7, #2900]	; 0xb54
 8001ac2:	0f1b      	lsrs	r3, r3, #28
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	f8c7 337c 	str.w	r3, [r7, #892]	; 0x37c
 8001aca:	e9d7 23de 	ldrd	r2, r3, [r7, #888]	; 0x378
 8001ace:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8001ad2:	e9c1 2300 	strd	r2, r3, [r1]
            Ake ^= De;
 8001ad6:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8001ada:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001ade:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ae6:	ea80 0c02 	eor.w	ip, r0, r2
 8001aea:	f8c7 c370 	str.w	ip, [r7, #880]	; 0x370
 8001aee:	404b      	eors	r3, r1
 8001af0:	f8c7 3374 	str.w	r3, [r7, #884]	; 0x374
 8001af4:	e9d7 23dc 	ldrd	r2, r3, [r7, #880]	; 0x370
 8001af8:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 8001afc:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Ake, 10);
 8001b00:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	; 0xb20
 8001b04:	0d9a      	lsrs	r2, r3, #22
 8001b06:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8001b0a:	029b      	lsls	r3, r3, #10
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	f8c7 336c 	str.w	r3, [r7, #876]	; 0x36c
 8001b12:	f8d7 3b24 	ldr.w	r3, [r7, #2852]	; 0xb24
 8001b16:	0d9a      	lsrs	r2, r3, #22
 8001b18:	f8d7 3b20 	ldr.w	r3, [r7, #2848]	; 0xb20
 8001b1c:	029b      	lsls	r3, r3, #10
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	f8c7 3368 	str.w	r3, [r7, #872]	; 0x368
 8001b24:	e9d7 23da 	ldrd	r2, r3, [r7, #872]	; 0x368
 8001b28:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8001b2c:	e9c1 2300 	strd	r2, r3, [r1]
            Ami ^= Di;
 8001b30:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8001b34:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b38:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8001b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b40:	ea80 0c02 	eor.w	ip, r0, r2
 8001b44:	f8c7 c360 	str.w	ip, [r7, #864]	; 0x360
 8001b48:	404b      	eors	r3, r1
 8001b4a:	f8c7 3364 	str.w	r3, [r7, #868]	; 0x364
 8001b4e:	e9d7 23d8 	ldrd	r2, r3, [r7, #864]	; 0x360
 8001b52:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 8001b56:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ami, 15);
 8001b5a:	f8d7 3af0 	ldr.w	r3, [r7, #2800]	; 0xaf0
 8001b5e:	0c5a      	lsrs	r2, r3, #17
 8001b60:	f8d7 3af4 	ldr.w	r3, [r7, #2804]	; 0xaf4
 8001b64:	03db      	lsls	r3, r3, #15
 8001b66:	4313      	orrs	r3, r2
 8001b68:	f8c7 335c 	str.w	r3, [r7, #860]	; 0x35c
 8001b6c:	f8d7 3af4 	ldr.w	r3, [r7, #2804]	; 0xaf4
 8001b70:	0c5a      	lsrs	r2, r3, #17
 8001b72:	f8d7 3af0 	ldr.w	r3, [r7, #2800]	; 0xaf0
 8001b76:	03db      	lsls	r3, r3, #15
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	f8c7 3358 	str.w	r3, [r7, #856]	; 0x358
 8001b7e:	e9d7 23d6 	ldrd	r2, r3, [r7, #856]	; 0x358
 8001b82:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8001b86:	e9c1 2300 	strd	r2, r3, [r1]
            Aso ^= Do;
 8001b8a:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8001b8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001b92:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8001b96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b9a:	ea80 0c02 	eor.w	ip, r0, r2
 8001b9e:	f8c7 c350 	str.w	ip, [r7, #848]	; 0x350
 8001ba2:	404b      	eors	r3, r1
 8001ba4:	f8c7 3354 	str.w	r3, [r7, #852]	; 0x354
 8001ba8:	e9d7 23d4 	ldrd	r2, r3, [r7, #848]	; 0x350
 8001bac:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 8001bb0:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Aso, 56);
 8001bb4:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	; 0xac4
 8001bb8:	061a      	lsls	r2, r3, #24
 8001bba:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 8001bbe:	0a1b      	lsrs	r3, r3, #8
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	f8c7 3348 	str.w	r3, [r7, #840]	; 0x348
 8001bc6:	f8d7 3ac0 	ldr.w	r3, [r7, #2752]	; 0xac0
 8001bca:	061a      	lsls	r2, r3, #24
 8001bcc:	f8d7 3ac4 	ldr.w	r3, [r7, #2756]	; 0xac4
 8001bd0:	0a1b      	lsrs	r3, r3, #8
 8001bd2:	4313      	orrs	r3, r2
 8001bd4:	f8c7 334c 	str.w	r3, [r7, #844]	; 0x34c
 8001bd8:	e9d7 23d2 	ldrd	r2, r3, [r7, #840]	; 0x348
 8001bdc:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8001be0:	e9c1 2300 	strd	r2, r3, [r1]
            Ema =   BCa ^((~BCe)&  BCi );
 8001be4:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8001be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bec:	43d1      	mvns	r1, r2
 8001bee:	f8c7 1800 	str.w	r1, [r7, #2048]	; 0x800
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
 8001bf8:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8001bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c00:	f507 6100 	add.w	r1, r7, #2048	; 0x800
 8001c04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c08:	4684      	mov	ip, r0
 8001c0a:	ea0c 0c02 	and.w	ip, ip, r2
 8001c0e:	f8c7 c7f8 	str.w	ip, [r7, #2040]	; 0x7f8
 8001c12:	400b      	ands	r3, r1
 8001c14:	f8c7 37fc 	str.w	r3, [r7, #2044]	; 0x7fc
 8001c18:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8001c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c20:	f507 61ff 	add.w	r1, r7, #2040	; 0x7f8
 8001c24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c28:	4684      	mov	ip, r0
 8001c2a:	ea82 0c0c 	eor.w	ip, r2, ip
 8001c2e:	f8c7 c340 	str.w	ip, [r7, #832]	; 0x340
 8001c32:	404b      	eors	r3, r1
 8001c34:	f8c7 3344 	str.w	r3, [r7, #836]	; 0x344
 8001c38:	e9d7 23d0 	ldrd	r2, r3, [r7, #832]	; 0x340
 8001c3c:	f607 11e8 	addw	r1, r7, #2536	; 0x9e8
 8001c40:	e9c1 2300 	strd	r2, r3, [r1]
            Eme =   BCe ^((~BCi)&  BCo );
 8001c44:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8001c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c4c:	43d1      	mvns	r1, r2
 8001c4e:	f8c7 17f0 	str.w	r1, [r7, #2032]	; 0x7f0
 8001c52:	43db      	mvns	r3, r3
 8001c54:	f8c7 37f4 	str.w	r3, [r7, #2036]	; 0x7f4
 8001c58:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c60:	f507 61fe 	add.w	r1, r7, #2032	; 0x7f0
 8001c64:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c68:	4684      	mov	ip, r0
 8001c6a:	ea0c 0c02 	and.w	ip, ip, r2
 8001c6e:	f8c7 c7e8 	str.w	ip, [r7, #2024]	; 0x7e8
 8001c72:	400b      	ands	r3, r1
 8001c74:	f8c7 37ec 	str.w	r3, [r7, #2028]	; 0x7ec
 8001c78:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8001c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c80:	f507 61fd 	add.w	r1, r7, #2024	; 0x7e8
 8001c84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c88:	4684      	mov	ip, r0
 8001c8a:	ea82 0c0c 	eor.w	ip, r2, ip
 8001c8e:	f8c7 c338 	str.w	ip, [r7, #824]	; 0x338
 8001c92:	404b      	eors	r3, r1
 8001c94:	f8c7 333c 	str.w	r3, [r7, #828]	; 0x33c
 8001c98:	e9d7 23ce 	ldrd	r2, r3, [r7, #824]	; 0x338
 8001c9c:	f507 611e 	add.w	r1, r7, #2528	; 0x9e0
 8001ca0:	e9c1 2300 	strd	r2, r3, [r1]
            Emi =   BCi ^((~BCo)&  BCu );
 8001ca4:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cac:	43d1      	mvns	r1, r2
 8001cae:	f8c7 17e0 	str.w	r1, [r7, #2016]	; 0x7e0
 8001cb2:	43db      	mvns	r3, r3
 8001cb4:	f8c7 37e4 	str.w	r3, [r7, #2020]	; 0x7e4
 8001cb8:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8001cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cc0:	f507 61fc 	add.w	r1, r7, #2016	; 0x7e0
 8001cc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001cc8:	4684      	mov	ip, r0
 8001cca:	ea0c 0c02 	and.w	ip, ip, r2
 8001cce:	f8c7 c7d8 	str.w	ip, [r7, #2008]	; 0x7d8
 8001cd2:	400b      	ands	r3, r1
 8001cd4:	f8c7 37dc 	str.w	r3, [r7, #2012]	; 0x7dc
 8001cd8:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8001cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce0:	f507 61fb 	add.w	r1, r7, #2008	; 0x7d8
 8001ce4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ce8:	4684      	mov	ip, r0
 8001cea:	ea82 0c0c 	eor.w	ip, r2, ip
 8001cee:	f8c7 c330 	str.w	ip, [r7, #816]	; 0x330
 8001cf2:	404b      	eors	r3, r1
 8001cf4:	f8c7 3334 	str.w	r3, [r7, #820]	; 0x334
 8001cf8:	e9d7 23cc 	ldrd	r2, r3, [r7, #816]	; 0x330
 8001cfc:	f607 11d8 	addw	r1, r7, #2520	; 0x9d8
 8001d00:	e9c1 2300 	strd	r2, r3, [r1]
            Emo =   BCo ^((~BCu)&  BCa );
 8001d04:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8001d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d0c:	43d1      	mvns	r1, r2
 8001d0e:	f8c7 17d0 	str.w	r1, [r7, #2000]	; 0x7d0
 8001d12:	43db      	mvns	r3, r3
 8001d14:	f8c7 37d4 	str.w	r3, [r7, #2004]	; 0x7d4
 8001d18:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8001d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d20:	f507 61fa 	add.w	r1, r7, #2000	; 0x7d0
 8001d24:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d28:	4684      	mov	ip, r0
 8001d2a:	ea0c 0c02 	and.w	ip, ip, r2
 8001d2e:	f8c7 c7c8 	str.w	ip, [r7, #1992]	; 0x7c8
 8001d32:	400b      	ands	r3, r1
 8001d34:	f8c7 37cc 	str.w	r3, [r7, #1996]	; 0x7cc
 8001d38:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d40:	f507 61f9 	add.w	r1, r7, #1992	; 0x7c8
 8001d44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d48:	4684      	mov	ip, r0
 8001d4a:	ea82 0c0c 	eor.w	ip, r2, ip
 8001d4e:	f8c7 c328 	str.w	ip, [r7, #808]	; 0x328
 8001d52:	404b      	eors	r3, r1
 8001d54:	f8c7 332c 	str.w	r3, [r7, #812]	; 0x32c
 8001d58:	e9d7 23ca 	ldrd	r2, r3, [r7, #808]	; 0x328
 8001d5c:	f507 611d 	add.w	r1, r7, #2512	; 0x9d0
 8001d60:	e9c1 2300 	strd	r2, r3, [r1]
            Emu =   BCu ^((~BCa)&  BCe );
 8001d64:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8001d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d6c:	43d1      	mvns	r1, r2
 8001d6e:	f8c7 17c0 	str.w	r1, [r7, #1984]	; 0x7c0
 8001d72:	43db      	mvns	r3, r3
 8001d74:	f8c7 37c4 	str.w	r3, [r7, #1988]	; 0x7c4
 8001d78:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8001d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d80:	f507 61f8 	add.w	r1, r7, #1984	; 0x7c0
 8001d84:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001d88:	4684      	mov	ip, r0
 8001d8a:	ea0c 0c02 	and.w	ip, ip, r2
 8001d8e:	f8c7 c7b8 	str.w	ip, [r7, #1976]	; 0x7b8
 8001d92:	400b      	ands	r3, r1
 8001d94:	f8c7 37bc 	str.w	r3, [r7, #1980]	; 0x7bc
 8001d98:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8001d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da0:	f507 61f7 	add.w	r1, r7, #1976	; 0x7b8
 8001da4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001da8:	4684      	mov	ip, r0
 8001daa:	ea82 0c0c 	eor.w	ip, r2, ip
 8001dae:	f8c7 c320 	str.w	ip, [r7, #800]	; 0x320
 8001db2:	404b      	eors	r3, r1
 8001db4:	f8c7 3324 	str.w	r3, [r7, #804]	; 0x324
 8001db8:	e9d7 23c8 	ldrd	r2, r3, [r7, #800]	; 0x320
 8001dbc:	f607 11c8 	addw	r1, r7, #2504	; 0x9c8
 8001dc0:	e9c1 2300 	strd	r2, r3, [r1]

            Abi ^= Di;
 8001dc4:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 8001dc8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dcc:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8001dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd4:	ea80 0c02 	eor.w	ip, r0, r2
 8001dd8:	f8c7 c318 	str.w	ip, [r7, #792]	; 0x318
 8001ddc:	404b      	eors	r3, r1
 8001dde:	f8c7 331c 	str.w	r3, [r7, #796]	; 0x31c
 8001de2:	e9d7 23c6 	ldrd	r2, r3, [r7, #792]	; 0x318
 8001de6:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 8001dea:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Abi, 62);
 8001dee:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	; 0xb6c
 8001df2:	079a      	lsls	r2, r3, #30
 8001df4:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	; 0xb68
 8001df8:	089b      	lsrs	r3, r3, #2
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 8001e00:	f8d7 3b68 	ldr.w	r3, [r7, #2920]	; 0xb68
 8001e04:	079a      	lsls	r2, r3, #30
 8001e06:	f8d7 3b6c 	ldr.w	r3, [r7, #2924]	; 0xb6c
 8001e0a:	089b      	lsrs	r3, r3, #2
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 8001e12:	e9d7 23c4 	ldrd	r2, r3, [r7, #784]	; 0x310
 8001e16:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8001e1a:	e9c1 2300 	strd	r2, r3, [r1]
            Ago ^= Do;
 8001e1e:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8001e22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e26:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8001e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2e:	ea80 0c02 	eor.w	ip, r0, r2
 8001e32:	f8c7 c308 	str.w	ip, [r7, #776]	; 0x308
 8001e36:	404b      	eors	r3, r1
 8001e38:	f8c7 330c 	str.w	r3, [r7, #780]	; 0x30c
 8001e3c:	e9d7 23c2 	ldrd	r2, r3, [r7, #776]	; 0x308
 8001e40:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 8001e44:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ago, 55);
 8001e48:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	; 0xb3c
 8001e4c:	05da      	lsls	r2, r3, #23
 8001e4e:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	; 0xb38
 8001e52:	0a5b      	lsrs	r3, r3, #9
 8001e54:	4313      	orrs	r3, r2
 8001e56:	f8c7 3300 	str.w	r3, [r7, #768]	; 0x300
 8001e5a:	f8d7 3b38 	ldr.w	r3, [r7, #2872]	; 0xb38
 8001e5e:	05da      	lsls	r2, r3, #23
 8001e60:	f8d7 3b3c 	ldr.w	r3, [r7, #2876]	; 0xb3c
 8001e64:	0a5b      	lsrs	r3, r3, #9
 8001e66:	4313      	orrs	r3, r2
 8001e68:	f8c7 3304 	str.w	r3, [r7, #772]	; 0x304
 8001e6c:	e9d7 23c0 	ldrd	r2, r3, [r7, #768]	; 0x300
 8001e70:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8001e74:	e9c1 2300 	strd	r2, r3, [r1]
            Aku ^= Du;
 8001e78:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001e7c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001e80:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8001e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e88:	ea80 0c02 	eor.w	ip, r0, r2
 8001e8c:	f8c7 c2f8 	str.w	ip, [r7, #760]	; 0x2f8
 8001e90:	404b      	eors	r3, r1
 8001e92:	f8c7 32fc 	str.w	r3, [r7, #764]	; 0x2fc
 8001e96:	e9d7 23be 	ldrd	r2, r3, [r7, #760]	; 0x2f8
 8001e9a:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 8001e9e:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Aku, 39);
 8001ea2:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 8001ea6:	01da      	lsls	r2, r3, #7
 8001ea8:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8001eac:	0e5b      	lsrs	r3, r3, #25
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	f8c7 32f0 	str.w	r3, [r7, #752]	; 0x2f0
 8001eb4:	f8d7 3b08 	ldr.w	r3, [r7, #2824]	; 0xb08
 8001eb8:	01da      	lsls	r2, r3, #7
 8001eba:	f8d7 3b0c 	ldr.w	r3, [r7, #2828]	; 0xb0c
 8001ebe:	0e5b      	lsrs	r3, r3, #25
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	f8c7 32f4 	str.w	r3, [r7, #756]	; 0x2f4
 8001ec6:	e9d7 23bc 	ldrd	r2, r3, [r7, #752]	; 0x2f0
 8001eca:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8001ece:	e9c1 2300 	strd	r2, r3, [r1]
            Ama ^= Da;
 8001ed2:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 8001ed6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001eda:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8001ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee2:	ea80 0c02 	eor.w	ip, r0, r2
 8001ee6:	f8c7 c2e8 	str.w	ip, [r7, #744]	; 0x2e8
 8001eea:	404b      	eors	r3, r1
 8001eec:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8001ef0:	e9d7 23ba 	ldrd	r2, r3, [r7, #744]	; 0x2e8
 8001ef4:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 8001ef8:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ama, 41);
 8001efc:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 8001f00:	025a      	lsls	r2, r3, #9
 8001f02:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 8001f06:	0ddb      	lsrs	r3, r3, #23
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
 8001f0e:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 8001f12:	025a      	lsls	r2, r3, #9
 8001f14:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 8001f18:	0ddb      	lsrs	r3, r3, #23
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
 8001f20:	e9d7 23b8 	ldrd	r2, r3, [r7, #736]	; 0x2e0
 8001f24:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8001f28:	e9c1 2300 	strd	r2, r3, [r1]
            Ase ^= De;
 8001f2c:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8001f30:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001f34:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8001f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f3c:	ea80 0c02 	eor.w	ip, r0, r2
 8001f40:	f8c7 c2d8 	str.w	ip, [r7, #728]	; 0x2d8
 8001f44:	404b      	eors	r3, r1
 8001f46:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
 8001f4a:	e9d7 23b6 	ldrd	r2, r3, [r7, #728]	; 0x2d8
 8001f4e:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 8001f52:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Ase,  2);
 8001f56:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 8001f5a:	0f9a      	lsrs	r2, r3, #30
 8001f5c:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4313      	orrs	r3, r2
 8001f64:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
 8001f68:	f8d7 3ad4 	ldr.w	r3, [r7, #2772]	; 0xad4
 8001f6c:	0f9a      	lsrs	r2, r3, #30
 8001f6e:	f8d7 3ad0 	ldr.w	r3, [r7, #2768]	; 0xad0
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4313      	orrs	r3, r2
 8001f76:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
 8001f7a:	e9d7 23b4 	ldrd	r2, r3, [r7, #720]	; 0x2d0
 8001f7e:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8001f82:	e9c1 2300 	strd	r2, r3, [r1]
            Esa =   BCa ^((~BCe)&  BCi );
 8001f86:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8001f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8e:	43d1      	mvns	r1, r2
 8001f90:	f8c7 17b0 	str.w	r1, [r7, #1968]	; 0x7b0
 8001f94:	43db      	mvns	r3, r3
 8001f96:	f8c7 37b4 	str.w	r3, [r7, #1972]	; 0x7b4
 8001f9a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8001f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa2:	f507 61f6 	add.w	r1, r7, #1968	; 0x7b0
 8001fa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001faa:	4684      	mov	ip, r0
 8001fac:	ea0c 0c02 	and.w	ip, ip, r2
 8001fb0:	f8c7 c7a8 	str.w	ip, [r7, #1960]	; 0x7a8
 8001fb4:	400b      	ands	r3, r1
 8001fb6:	f8c7 37ac 	str.w	r3, [r7, #1964]	; 0x7ac
 8001fba:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8001fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc2:	f507 61f5 	add.w	r1, r7, #1960	; 0x7a8
 8001fc6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001fca:	4684      	mov	ip, r0
 8001fcc:	ea82 0c0c 	eor.w	ip, r2, ip
 8001fd0:	f8c7 c2c8 	str.w	ip, [r7, #712]	; 0x2c8
 8001fd4:	404b      	eors	r3, r1
 8001fd6:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
 8001fda:	e9d7 23b2 	ldrd	r2, r3, [r7, #712]	; 0x2c8
 8001fde:	f507 611c 	add.w	r1, r7, #2496	; 0x9c0
 8001fe2:	e9c1 2300 	strd	r2, r3, [r1]
            Ese =   BCe ^((~BCi)&  BCo );
 8001fe6:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8001fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fee:	43d1      	mvns	r1, r2
 8001ff0:	f8c7 17a0 	str.w	r1, [r7, #1952]	; 0x7a0
 8001ff4:	43db      	mvns	r3, r3
 8001ff6:	f8c7 37a4 	str.w	r3, [r7, #1956]	; 0x7a4
 8001ffa:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8001ffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002002:	f507 61f4 	add.w	r1, r7, #1952	; 0x7a0
 8002006:	e9d1 0100 	ldrd	r0, r1, [r1]
 800200a:	4684      	mov	ip, r0
 800200c:	ea0c 0c02 	and.w	ip, ip, r2
 8002010:	f8c7 c798 	str.w	ip, [r7, #1944]	; 0x798
 8002014:	400b      	ands	r3, r1
 8002016:	f8c7 379c 	str.w	r3, [r7, #1948]	; 0x79c
 800201a:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800201e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002022:	f507 61f3 	add.w	r1, r7, #1944	; 0x798
 8002026:	e9d1 0100 	ldrd	r0, r1, [r1]
 800202a:	4684      	mov	ip, r0
 800202c:	ea82 0c0c 	eor.w	ip, r2, ip
 8002030:	f8c7 c2c0 	str.w	ip, [r7, #704]	; 0x2c0
 8002034:	404b      	eors	r3, r1
 8002036:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
 800203a:	e9d7 23b0 	ldrd	r2, r3, [r7, #704]	; 0x2c0
 800203e:	f607 11b8 	addw	r1, r7, #2488	; 0x9b8
 8002042:	e9c1 2300 	strd	r2, r3, [r1]
            Esi =   BCi ^((~BCo)&  BCu );
 8002046:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800204a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800204e:	43d1      	mvns	r1, r2
 8002050:	f8c7 1790 	str.w	r1, [r7, #1936]	; 0x790
 8002054:	43db      	mvns	r3, r3
 8002056:	f8c7 3794 	str.w	r3, [r7, #1940]	; 0x794
 800205a:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800205e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002062:	f507 61f2 	add.w	r1, r7, #1936	; 0x790
 8002066:	e9d1 0100 	ldrd	r0, r1, [r1]
 800206a:	4684      	mov	ip, r0
 800206c:	ea0c 0c02 	and.w	ip, ip, r2
 8002070:	f8c7 c788 	str.w	ip, [r7, #1928]	; 0x788
 8002074:	400b      	ands	r3, r1
 8002076:	f8c7 378c 	str.w	r3, [r7, #1932]	; 0x78c
 800207a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800207e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002082:	f507 61f1 	add.w	r1, r7, #1928	; 0x788
 8002086:	e9d1 0100 	ldrd	r0, r1, [r1]
 800208a:	4684      	mov	ip, r0
 800208c:	ea82 0c0c 	eor.w	ip, r2, ip
 8002090:	f8c7 c2b8 	str.w	ip, [r7, #696]	; 0x2b8
 8002094:	404b      	eors	r3, r1
 8002096:	f8c7 32bc 	str.w	r3, [r7, #700]	; 0x2bc
 800209a:	e9d7 23ae 	ldrd	r2, r3, [r7, #696]	; 0x2b8
 800209e:	f507 611b 	add.w	r1, r7, #2480	; 0x9b0
 80020a2:	e9c1 2300 	strd	r2, r3, [r1]
            Eso =   BCo ^((~BCu)&  BCa );
 80020a6:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80020aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ae:	43d1      	mvns	r1, r2
 80020b0:	f8c7 1780 	str.w	r1, [r7, #1920]	; 0x780
 80020b4:	43db      	mvns	r3, r3
 80020b6:	f8c7 3784 	str.w	r3, [r7, #1924]	; 0x784
 80020ba:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80020be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c2:	f507 61f0 	add.w	r1, r7, #1920	; 0x780
 80020c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80020ca:	4684      	mov	ip, r0
 80020cc:	ea0c 0c02 	and.w	ip, ip, r2
 80020d0:	f8c7 c778 	str.w	ip, [r7, #1912]	; 0x778
 80020d4:	400b      	ands	r3, r1
 80020d6:	f8c7 377c 	str.w	r3, [r7, #1916]	; 0x77c
 80020da:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80020de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020e2:	f507 61ef 	add.w	r1, r7, #1912	; 0x778
 80020e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80020ea:	4684      	mov	ip, r0
 80020ec:	ea82 0c0c 	eor.w	ip, r2, ip
 80020f0:	f8c7 c2b0 	str.w	ip, [r7, #688]	; 0x2b0
 80020f4:	404b      	eors	r3, r1
 80020f6:	f8c7 32b4 	str.w	r3, [r7, #692]	; 0x2b4
 80020fa:	e9d7 23ac 	ldrd	r2, r3, [r7, #688]	; 0x2b0
 80020fe:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 8002102:	e9c1 2300 	strd	r2, r3, [r1]
            Esu =   BCu ^((~BCa)&  BCe );
 8002106:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800210a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800210e:	43d1      	mvns	r1, r2
 8002110:	f8c7 1770 	str.w	r1, [r7, #1904]	; 0x770
 8002114:	43db      	mvns	r3, r3
 8002116:	f8c7 3774 	str.w	r3, [r7, #1908]	; 0x774
 800211a:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800211e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002122:	f507 61ee 	add.w	r1, r7, #1904	; 0x770
 8002126:	e9d1 0100 	ldrd	r0, r1, [r1]
 800212a:	4684      	mov	ip, r0
 800212c:	ea0c 0c02 	and.w	ip, ip, r2
 8002130:	f8c7 c768 	str.w	ip, [r7, #1896]	; 0x768
 8002134:	400b      	ands	r3, r1
 8002136:	f8c7 376c 	str.w	r3, [r7, #1900]	; 0x76c
 800213a:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800213e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002142:	f507 61ed 	add.w	r1, r7, #1896	; 0x768
 8002146:	e9d1 0100 	ldrd	r0, r1, [r1]
 800214a:	4684      	mov	ip, r0
 800214c:	ea82 0c0c 	eor.w	ip, r2, ip
 8002150:	f8c7 c2a8 	str.w	ip, [r7, #680]	; 0x2a8
 8002154:	404b      	eors	r3, r1
 8002156:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
 800215a:	e9d7 23aa 	ldrd	r2, r3, [r7, #680]	; 0x2a8
 800215e:	f507 611a 	add.w	r1, r7, #2464	; 0x9a0
 8002162:	e9c1 2300 	strd	r2, r3, [r1]

            //    prepareTheta
            BCa = Eba^Ega^Eka^Ema^Esa;
 8002166:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 800216a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800216e:	f607 2338 	addw	r3, r7, #2616	; 0xa38
 8002172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002176:	ea80 0c02 	eor.w	ip, r0, r2
 800217a:	f8c7 c760 	str.w	ip, [r7, #1888]	; 0x760
 800217e:	404b      	eors	r3, r1
 8002180:	f8c7 3764 	str.w	r3, [r7, #1892]	; 0x764
 8002184:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8002188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800218c:	f507 61ec 	add.w	r1, r7, #1888	; 0x760
 8002190:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002194:	4684      	mov	ip, r0
 8002196:	ea8c 0c02 	eor.w	ip, ip, r2
 800219a:	f8c7 c758 	str.w	ip, [r7, #1880]	; 0x758
 800219e:	404b      	eors	r3, r1
 80021a0:	f8c7 375c 	str.w	r3, [r7, #1884]	; 0x75c
 80021a4:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 80021a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ac:	f507 61eb 	add.w	r1, r7, #1880	; 0x758
 80021b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021b4:	4684      	mov	ip, r0
 80021b6:	ea8c 0c02 	eor.w	ip, ip, r2
 80021ba:	f8c7 c750 	str.w	ip, [r7, #1872]	; 0x750
 80021be:	404b      	eors	r3, r1
 80021c0:	f8c7 3754 	str.w	r3, [r7, #1876]	; 0x754
 80021c4:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 80021c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021cc:	f507 61ea 	add.w	r1, r7, #1872	; 0x750
 80021d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80021d4:	4684      	mov	ip, r0
 80021d6:	ea82 0c0c 	eor.w	ip, r2, ip
 80021da:	f8c7 c2a0 	str.w	ip, [r7, #672]	; 0x2a0
 80021de:	404b      	eors	r3, r1
 80021e0:	f8c7 32a4 	str.w	r3, [r7, #676]	; 0x2a4
 80021e4:	e9d7 23a8 	ldrd	r2, r3, [r7, #672]	; 0x2a0
 80021e8:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 80021ec:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = Ebe^Ege^Eke^Eme^Ese;
 80021f0:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 80021f4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021f8:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 80021fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002200:	ea80 0c02 	eor.w	ip, r0, r2
 8002204:	f8c7 c748 	str.w	ip, [r7, #1864]	; 0x748
 8002208:	404b      	eors	r3, r1
 800220a:	f8c7 374c 	str.w	r3, [r7, #1868]	; 0x74c
 800220e:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 8002212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002216:	f507 61e9 	add.w	r1, r7, #1864	; 0x748
 800221a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800221e:	4684      	mov	ip, r0
 8002220:	ea8c 0c02 	eor.w	ip, ip, r2
 8002224:	f8c7 c740 	str.w	ip, [r7, #1856]	; 0x740
 8002228:	404b      	eors	r3, r1
 800222a:	f8c7 3744 	str.w	r3, [r7, #1860]	; 0x744
 800222e:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8002232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002236:	f507 61e8 	add.w	r1, r7, #1856	; 0x740
 800223a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800223e:	4684      	mov	ip, r0
 8002240:	ea8c 0c02 	eor.w	ip, ip, r2
 8002244:	f8c7 c738 	str.w	ip, [r7, #1848]	; 0x738
 8002248:	404b      	eors	r3, r1
 800224a:	f8c7 373c 	str.w	r3, [r7, #1852]	; 0x73c
 800224e:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8002252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002256:	f507 61e7 	add.w	r1, r7, #1848	; 0x738
 800225a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800225e:	4684      	mov	ip, r0
 8002260:	ea82 0c0c 	eor.w	ip, r2, ip
 8002264:	f8c7 c298 	str.w	ip, [r7, #664]	; 0x298
 8002268:	404b      	eors	r3, r1
 800226a:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
 800226e:	e9d7 23a6 	ldrd	r2, r3, [r7, #664]	; 0x298
 8002272:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8002276:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = Ebi^Egi^Eki^Emi^Esi;
 800227a:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 800227e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002282:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 8002286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800228a:	ea80 0c02 	eor.w	ip, r0, r2
 800228e:	f8c7 c730 	str.w	ip, [r7, #1840]	; 0x730
 8002292:	404b      	eors	r3, r1
 8002294:	f8c7 3734 	str.w	r3, [r7, #1844]	; 0x734
 8002298:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 800229c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022a0:	f507 61e6 	add.w	r1, r7, #1840	; 0x730
 80022a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022a8:	4684      	mov	ip, r0
 80022aa:	ea8c 0c02 	eor.w	ip, ip, r2
 80022ae:	f8c7 c728 	str.w	ip, [r7, #1832]	; 0x728
 80022b2:	404b      	eors	r3, r1
 80022b4:	f8c7 372c 	str.w	r3, [r7, #1836]	; 0x72c
 80022b8:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 80022bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022c0:	f507 61e5 	add.w	r1, r7, #1832	; 0x728
 80022c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022c8:	4684      	mov	ip, r0
 80022ca:	ea8c 0c02 	eor.w	ip, ip, r2
 80022ce:	f8c7 c720 	str.w	ip, [r7, #1824]	; 0x720
 80022d2:	404b      	eors	r3, r1
 80022d4:	f8c7 3724 	str.w	r3, [r7, #1828]	; 0x724
 80022d8:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 80022dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022e0:	f507 61e4 	add.w	r1, r7, #1824	; 0x720
 80022e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80022e8:	4684      	mov	ip, r0
 80022ea:	ea82 0c0c 	eor.w	ip, r2, ip
 80022ee:	f8c7 c290 	str.w	ip, [r7, #656]	; 0x290
 80022f2:	404b      	eors	r3, r1
 80022f4:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 80022f8:	e9d7 23a4 	ldrd	r2, r3, [r7, #656]	; 0x290
 80022fc:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8002300:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = Ebo^Ego^Eko^Emo^Eso;
 8002304:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002308:	e9d3 0100 	ldrd	r0, r1, [r3]
 800230c:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 8002310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002314:	ea80 0c02 	eor.w	ip, r0, r2
 8002318:	f8c7 c718 	str.w	ip, [r7, #1816]	; 0x718
 800231c:	404b      	eors	r3, r1
 800231e:	f8c7 371c 	str.w	r3, [r7, #1820]	; 0x71c
 8002322:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8002326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800232a:	f507 61e3 	add.w	r1, r7, #1816	; 0x718
 800232e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002332:	4684      	mov	ip, r0
 8002334:	ea8c 0c02 	eor.w	ip, ip, r2
 8002338:	f8c7 c710 	str.w	ip, [r7, #1808]	; 0x710
 800233c:	404b      	eors	r3, r1
 800233e:	f8c7 3714 	str.w	r3, [r7, #1812]	; 0x714
 8002342:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 8002346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800234a:	f507 61e2 	add.w	r1, r7, #1808	; 0x710
 800234e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002352:	4684      	mov	ip, r0
 8002354:	ea8c 0c02 	eor.w	ip, ip, r2
 8002358:	f8c7 c708 	str.w	ip, [r7, #1800]	; 0x708
 800235c:	404b      	eors	r3, r1
 800235e:	f8c7 370c 	str.w	r3, [r7, #1804]	; 0x70c
 8002362:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 8002366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800236a:	f507 61e1 	add.w	r1, r7, #1800	; 0x708
 800236e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002372:	4684      	mov	ip, r0
 8002374:	ea82 0c0c 	eor.w	ip, r2, ip
 8002378:	f8c7 c288 	str.w	ip, [r7, #648]	; 0x288
 800237c:	404b      	eors	r3, r1
 800237e:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8002382:	e9d7 23a2 	ldrd	r2, r3, [r7, #648]	; 0x288
 8002386:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800238a:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = Ebu^Egu^Eku^Emu^Esu;
 800238e:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 8002392:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002396:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 800239a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800239e:	ea80 0c02 	eor.w	ip, r0, r2
 80023a2:	f8c7 c700 	str.w	ip, [r7, #1792]	; 0x700
 80023a6:	404b      	eors	r3, r1
 80023a8:	f8c7 3704 	str.w	r3, [r7, #1796]	; 0x704
 80023ac:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 80023b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023b4:	f507 61e0 	add.w	r1, r7, #1792	; 0x700
 80023b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80023bc:	4684      	mov	ip, r0
 80023be:	ea8c 0c02 	eor.w	ip, ip, r2
 80023c2:	f8c7 c6f8 	str.w	ip, [r7, #1784]	; 0x6f8
 80023c6:	404b      	eors	r3, r1
 80023c8:	f8c7 36fc 	str.w	r3, [r7, #1788]	; 0x6fc
 80023cc:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 80023d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d4:	f507 61df 	add.w	r1, r7, #1784	; 0x6f8
 80023d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80023dc:	4684      	mov	ip, r0
 80023de:	ea8c 0c02 	eor.w	ip, ip, r2
 80023e2:	f8c7 c6f0 	str.w	ip, [r7, #1776]	; 0x6f0
 80023e6:	404b      	eors	r3, r1
 80023e8:	f8c7 36f4 	str.w	r3, [r7, #1780]	; 0x6f4
 80023ec:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 80023f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f4:	f507 61de 	add.w	r1, r7, #1776	; 0x6f0
 80023f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80023fc:	4684      	mov	ip, r0
 80023fe:	ea82 0c0c 	eor.w	ip, r2, ip
 8002402:	f8c7 c280 	str.w	ip, [r7, #640]	; 0x280
 8002406:	404b      	eors	r3, r1
 8002408:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
 800240c:	e9d7 23a0 	ldrd	r2, r3, [r7, #640]	; 0x280
 8002410:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8002414:	e9c1 2300 	strd	r2, r3, [r1]

            //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
            Da = BCu^ROL(BCe, 1);
 8002418:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 800241c:	0fda      	lsrs	r2, r3, #31
 800241e:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 8002422:	005b      	lsls	r3, r3, #1
 8002424:	4313      	orrs	r3, r2
 8002426:	f8c7 36ec 	str.w	r3, [r7, #1772]	; 0x6ec
 800242a:	f8d7 3aac 	ldr.w	r3, [r7, #2732]	; 0xaac
 800242e:	0fda      	lsrs	r2, r3, #31
 8002430:	f8d7 3aa8 	ldr.w	r3, [r7, #2728]	; 0xaa8
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	4313      	orrs	r3, r2
 8002438:	f8c7 36e8 	str.w	r3, [r7, #1768]	; 0x6e8
 800243c:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8002440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002444:	f507 61dd 	add.w	r1, r7, #1768	; 0x6e8
 8002448:	e9d1 0100 	ldrd	r0, r1, [r1]
 800244c:	4684      	mov	ip, r0
 800244e:	ea82 0c0c 	eor.w	ip, r2, ip
 8002452:	f8c7 c278 	str.w	ip, [r7, #632]	; 0x278
 8002456:	404b      	eors	r3, r1
 8002458:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
 800245c:	e9d7 239e 	ldrd	r2, r3, [r7, #632]	; 0x278
 8002460:	f607 2188 	addw	r1, r7, #2696	; 0xa88
 8002464:	e9c1 2300 	strd	r2, r3, [r1]
            De = BCa^ROL(BCi, 1);
 8002468:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 800246c:	0fda      	lsrs	r2, r3, #31
 800246e:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c7 36e4 	str.w	r3, [r7, #1764]	; 0x6e4
 800247a:	f8d7 3aa4 	ldr.w	r3, [r7, #2724]	; 0xaa4
 800247e:	0fda      	lsrs	r2, r3, #31
 8002480:	f8d7 3aa0 	ldr.w	r3, [r7, #2720]	; 0xaa0
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	4313      	orrs	r3, r2
 8002488:	f8c7 36e0 	str.w	r3, [r7, #1760]	; 0x6e0
 800248c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8002490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002494:	f507 61dc 	add.w	r1, r7, #1760	; 0x6e0
 8002498:	e9d1 0100 	ldrd	r0, r1, [r1]
 800249c:	4684      	mov	ip, r0
 800249e:	ea82 0c0c 	eor.w	ip, r2, ip
 80024a2:	f8c7 c270 	str.w	ip, [r7, #624]	; 0x270
 80024a6:	404b      	eors	r3, r1
 80024a8:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 80024ac:	e9d7 239c 	ldrd	r2, r3, [r7, #624]	; 0x270
 80024b0:	f507 6128 	add.w	r1, r7, #2688	; 0xa80
 80024b4:	e9c1 2300 	strd	r2, r3, [r1]
            Di = BCe^ROL(BCo, 1);
 80024b8:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 80024bc:	0fda      	lsrs	r2, r3, #31
 80024be:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	4313      	orrs	r3, r2
 80024c6:	f8c7 36dc 	str.w	r3, [r7, #1756]	; 0x6dc
 80024ca:	f8d7 3a9c 	ldr.w	r3, [r7, #2716]	; 0xa9c
 80024ce:	0fda      	lsrs	r2, r3, #31
 80024d0:	f8d7 3a98 	ldr.w	r3, [r7, #2712]	; 0xa98
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	4313      	orrs	r3, r2
 80024d8:	f8c7 36d8 	str.w	r3, [r7, #1752]	; 0x6d8
 80024dc:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80024e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024e4:	f507 61db 	add.w	r1, r7, #1752	; 0x6d8
 80024e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80024ec:	4684      	mov	ip, r0
 80024ee:	ea82 0c0c 	eor.w	ip, r2, ip
 80024f2:	f8c7 c268 	str.w	ip, [r7, #616]	; 0x268
 80024f6:	404b      	eors	r3, r1
 80024f8:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 80024fc:	e9d7 239a 	ldrd	r2, r3, [r7, #616]	; 0x268
 8002500:	f607 2178 	addw	r1, r7, #2680	; 0xa78
 8002504:	e9c1 2300 	strd	r2, r3, [r1]
            Do = BCi^ROL(BCu, 1);
 8002508:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 800250c:	0fda      	lsrs	r2, r3, #31
 800250e:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	4313      	orrs	r3, r2
 8002516:	f8c7 36d4 	str.w	r3, [r7, #1748]	; 0x6d4
 800251a:	f8d7 3a94 	ldr.w	r3, [r7, #2708]	; 0xa94
 800251e:	0fda      	lsrs	r2, r3, #31
 8002520:	f8d7 3a90 	ldr.w	r3, [r7, #2704]	; 0xa90
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	4313      	orrs	r3, r2
 8002528:	f8c7 36d0 	str.w	r3, [r7, #1744]	; 0x6d0
 800252c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8002530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002534:	f507 61da 	add.w	r1, r7, #1744	; 0x6d0
 8002538:	e9d1 0100 	ldrd	r0, r1, [r1]
 800253c:	4684      	mov	ip, r0
 800253e:	ea82 0c0c 	eor.w	ip, r2, ip
 8002542:	f8c7 c260 	str.w	ip, [r7, #608]	; 0x260
 8002546:	404b      	eors	r3, r1
 8002548:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
 800254c:	e9d7 2398 	ldrd	r2, r3, [r7, #608]	; 0x260
 8002550:	f507 6127 	add.w	r1, r7, #2672	; 0xa70
 8002554:	e9c1 2300 	strd	r2, r3, [r1]
            Du = BCo^ROL(BCa, 1);
 8002558:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 800255c:	0fda      	lsrs	r2, r3, #31
 800255e:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 8002562:	005b      	lsls	r3, r3, #1
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c7 36cc 	str.w	r3, [r7, #1740]	; 0x6cc
 800256a:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 800256e:	0fda      	lsrs	r2, r3, #31
 8002570:	f8d7 3ab0 	ldr.w	r3, [r7, #2736]	; 0xab0
 8002574:	005b      	lsls	r3, r3, #1
 8002576:	4313      	orrs	r3, r2
 8002578:	f8c7 36c8 	str.w	r3, [r7, #1736]	; 0x6c8
 800257c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8002580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002584:	f507 61d9 	add.w	r1, r7, #1736	; 0x6c8
 8002588:	e9d1 0100 	ldrd	r0, r1, [r1]
 800258c:	4684      	mov	ip, r0
 800258e:	ea82 0c0c 	eor.w	ip, r2, ip
 8002592:	f8c7 c258 	str.w	ip, [r7, #600]	; 0x258
 8002596:	404b      	eors	r3, r1
 8002598:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
 800259c:	e9d7 2396 	ldrd	r2, r3, [r7, #600]	; 0x258
 80025a0:	f607 2168 	addw	r1, r7, #2664	; 0xa68
 80025a4:	e9c1 2300 	strd	r2, r3, [r1]

            Eba ^= Da;
 80025a8:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80025ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025b0:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 80025b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b8:	ea80 0c02 	eor.w	ip, r0, r2
 80025bc:	f8c7 c250 	str.w	ip, [r7, #592]	; 0x250
 80025c0:	404b      	eors	r3, r1
 80025c2:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 80025c6:	e9d7 2394 	ldrd	r2, r3, [r7, #592]	; 0x250
 80025ca:	f507 6126 	add.w	r1, r7, #2656	; 0xa60
 80025ce:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = Eba;
 80025d2:	f507 6326 	add.w	r3, r7, #2656	; 0xa60
 80025d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025da:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 80025de:	e9c1 2300 	strd	r2, r3, [r1]
            Ege ^= De;
 80025e2:	f507 6323 	add.w	r3, r7, #2608	; 0xa30
 80025e6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025ea:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80025ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f2:	ea80 0c02 	eor.w	ip, r0, r2
 80025f6:	f8c7 c248 	str.w	ip, [r7, #584]	; 0x248
 80025fa:	404b      	eors	r3, r1
 80025fc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8002600:	e9d7 2392 	ldrd	r2, r3, [r7, #584]	; 0x248
 8002604:	f507 6123 	add.w	r1, r7, #2608	; 0xa30
 8002608:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ege, 44);
 800260c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002610:	f5a3 70aa 	sub.w	r0, r3, #340	; 0x154
 8002614:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002618:	f5a3 71ac 	sub.w	r1, r3, #344	; 0x158
 800261c:	6803      	ldr	r3, [r0, #0]
 800261e:	031a      	lsls	r2, r3, #12
 8002620:	680b      	ldr	r3, [r1, #0]
 8002622:	0d1b      	lsrs	r3, r3, #20
 8002624:	4313      	orrs	r3, r2
 8002626:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 800262a:	680b      	ldr	r3, [r1, #0]
 800262c:	031a      	lsls	r2, r3, #12
 800262e:	6803      	ldr	r3, [r0, #0]
 8002630:	0d1b      	lsrs	r3, r3, #20
 8002632:	4313      	orrs	r3, r2
 8002634:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 8002638:	e9d7 2390 	ldrd	r2, r3, [r7, #576]	; 0x240
 800263c:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8002640:	e9c1 2300 	strd	r2, r3, [r1]
            Eki ^= Di;
 8002644:	f507 6320 	add.w	r3, r7, #2560	; 0xa00
 8002648:	e9d3 0100 	ldrd	r0, r1, [r3]
 800264c:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8002650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002654:	ea80 0c02 	eor.w	ip, r0, r2
 8002658:	f8c7 c238 	str.w	ip, [r7, #568]	; 0x238
 800265c:	404b      	eors	r3, r1
 800265e:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 8002662:	e9d7 238e 	ldrd	r2, r3, [r7, #568]	; 0x238
 8002666:	f507 6120 	add.w	r1, r7, #2560	; 0xa00
 800266a:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eki, 43);
 800266e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002672:	f5a3 70c2 	sub.w	r0, r3, #388	; 0x184
 8002676:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800267a:	f5a3 71c4 	sub.w	r1, r3, #392	; 0x188
 800267e:	6803      	ldr	r3, [r0, #0]
 8002680:	02da      	lsls	r2, r3, #11
 8002682:	680b      	ldr	r3, [r1, #0]
 8002684:	0d5b      	lsrs	r3, r3, #21
 8002686:	4313      	orrs	r3, r2
 8002688:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
 800268c:	680b      	ldr	r3, [r1, #0]
 800268e:	02da      	lsls	r2, r3, #11
 8002690:	6803      	ldr	r3, [r0, #0]
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
 800269a:	e9d7 238c 	ldrd	r2, r3, [r7, #560]	; 0x230
 800269e:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 80026a2:	e9c1 2300 	strd	r2, r3, [r1]
            Emo ^= Do;
 80026a6:	f507 631d 	add.w	r3, r7, #2512	; 0x9d0
 80026aa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026ae:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 80026b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026b6:	ea80 0c02 	eor.w	ip, r0, r2
 80026ba:	f8c7 c228 	str.w	ip, [r7, #552]	; 0x228
 80026be:	404b      	eors	r3, r1
 80026c0:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 80026c4:	e9d7 238a 	ldrd	r2, r3, [r7, #552]	; 0x228
 80026c8:	f507 611d 	add.w	r1, r7, #2512	; 0x9d0
 80026cc:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emo, 21);
 80026d0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80026d4:	f5a3 70dc 	sub.w	r0, r3, #440	; 0x1b8
 80026d8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80026dc:	f5a3 71da 	sub.w	r1, r3, #436	; 0x1b4
 80026e0:	6803      	ldr	r3, [r0, #0]
 80026e2:	0ada      	lsrs	r2, r3, #11
 80026e4:	680b      	ldr	r3, [r1, #0]
 80026e6:	055b      	lsls	r3, r3, #21
 80026e8:	4313      	orrs	r3, r2
 80026ea:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80026ee:	680b      	ldr	r3, [r1, #0]
 80026f0:	0ada      	lsrs	r2, r3, #11
 80026f2:	6803      	ldr	r3, [r0, #0]
 80026f4:	055b      	lsls	r3, r3, #21
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 80026fc:	e9d7 2388 	ldrd	r2, r3, [r7, #544]	; 0x220
 8002700:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8002704:	e9c1 2300 	strd	r2, r3, [r1]
            Esu ^= Du;
 8002708:	f507 631a 	add.w	r3, r7, #2464	; 0x9a0
 800270c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002710:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8002714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002718:	ea80 0c02 	eor.w	ip, r0, r2
 800271c:	f8c7 c218 	str.w	ip, [r7, #536]	; 0x218
 8002720:	404b      	eors	r3, r1
 8002722:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 8002726:	e9d7 2386 	ldrd	r2, r3, [r7, #536]	; 0x218
 800272a:	f507 611a 	add.w	r1, r7, #2464	; 0x9a0
 800272e:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esu, 14);
 8002732:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002736:	f5a3 70f4 	sub.w	r0, r3, #488	; 0x1e8
 800273a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800273e:	f5a3 71f2 	sub.w	r1, r3, #484	; 0x1e4
 8002742:	6803      	ldr	r3, [r0, #0]
 8002744:	0c9a      	lsrs	r2, r3, #18
 8002746:	680b      	ldr	r3, [r1, #0]
 8002748:	039b      	lsls	r3, r3, #14
 800274a:	4313      	orrs	r3, r2
 800274c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
 8002750:	680b      	ldr	r3, [r1, #0]
 8002752:	0c9a      	lsrs	r2, r3, #18
 8002754:	6803      	ldr	r3, [r0, #0]
 8002756:	039b      	lsls	r3, r3, #14
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800275e:	e9d7 2384 	ldrd	r2, r3, [r7, #528]	; 0x210
 8002762:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8002766:	e9c1 2300 	strd	r2, r3, [r1]
            Aba =   BCa ^((~BCe)&  BCi );
 800276a:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800276e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002772:	43d1      	mvns	r1, r2
 8002774:	f8c7 16c0 	str.w	r1, [r7, #1728]	; 0x6c0
 8002778:	43db      	mvns	r3, r3
 800277a:	f8c7 36c4 	str.w	r3, [r7, #1732]	; 0x6c4
 800277e:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8002782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002786:	f507 61d8 	add.w	r1, r7, #1728	; 0x6c0
 800278a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800278e:	4684      	mov	ip, r0
 8002790:	ea0c 0c02 	and.w	ip, ip, r2
 8002794:	f8c7 c6b8 	str.w	ip, [r7, #1720]	; 0x6b8
 8002798:	400b      	ands	r3, r1
 800279a:	f8c7 36bc 	str.w	r3, [r7, #1724]	; 0x6bc
 800279e:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80027a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a6:	f507 61d7 	add.w	r1, r7, #1720	; 0x6b8
 80027aa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80027ae:	4684      	mov	ip, r0
 80027b0:	ea82 0c0c 	eor.w	ip, r2, ip
 80027b4:	f8c7 c208 	str.w	ip, [r7, #520]	; 0x208
 80027b8:	404b      	eors	r3, r1
 80027ba:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80027be:	e9d7 2382 	ldrd	r2, r3, [r7, #520]	; 0x208
 80027c2:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 80027c6:	e9c1 2300 	strd	r2, r3, [r1]
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 80027ca:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 80027ce:	3301      	adds	r3, #1
 80027d0:	4ac1      	ldr	r2, [pc, #772]	; (8002ad8 <KeccakF1600_StatePermute+0x22e0>)
 80027d2:	00db      	lsls	r3, r3, #3
 80027d4:	4413      	add	r3, r2
 80027d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80027da:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 80027de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e2:	ea82 0c00 	eor.w	ip, r2, r0
 80027e6:	f8c7 c200 	str.w	ip, [r7, #512]	; 0x200
 80027ea:	404b      	eors	r3, r1
 80027ec:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80027f0:	e9d7 2380 	ldrd	r2, r3, [r7, #512]	; 0x200
 80027f4:	f607 3178 	addw	r1, r7, #2936	; 0xb78
 80027f8:	e9c1 2300 	strd	r2, r3, [r1]
            Abe =   BCe ^((~BCi)&  BCo );
 80027fc:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8002800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002804:	43d1      	mvns	r1, r2
 8002806:	f8c7 16b0 	str.w	r1, [r7, #1712]	; 0x6b0
 800280a:	43db      	mvns	r3, r3
 800280c:	f8c7 36b4 	str.w	r3, [r7, #1716]	; 0x6b4
 8002810:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8002814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002818:	f507 61d6 	add.w	r1, r7, #1712	; 0x6b0
 800281c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002820:	4684      	mov	ip, r0
 8002822:	ea0c 0c02 	and.w	ip, ip, r2
 8002826:	f8c7 c6a8 	str.w	ip, [r7, #1704]	; 0x6a8
 800282a:	400b      	ands	r3, r1
 800282c:	f8c7 36ac 	str.w	r3, [r7, #1708]	; 0x6ac
 8002830:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8002834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002838:	f507 61d5 	add.w	r1, r7, #1704	; 0x6a8
 800283c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002840:	4684      	mov	ip, r0
 8002842:	ea82 0c0c 	eor.w	ip, r2, ip
 8002846:	f8c7 c1f8 	str.w	ip, [r7, #504]	; 0x1f8
 800284a:	404b      	eors	r3, r1
 800284c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
 8002850:	e9d7 237e 	ldrd	r2, r3, [r7, #504]	; 0x1f8
 8002854:	f507 6137 	add.w	r1, r7, #2928	; 0xb70
 8002858:	e9c1 2300 	strd	r2, r3, [r1]
            Abi =   BCi ^((~BCo)&  BCu );
 800285c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8002860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002864:	43d1      	mvns	r1, r2
 8002866:	f8c7 16a0 	str.w	r1, [r7, #1696]	; 0x6a0
 800286a:	43db      	mvns	r3, r3
 800286c:	f8c7 36a4 	str.w	r3, [r7, #1700]	; 0x6a4
 8002870:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8002874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002878:	f507 61d4 	add.w	r1, r7, #1696	; 0x6a0
 800287c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002880:	4684      	mov	ip, r0
 8002882:	ea0c 0c02 	and.w	ip, ip, r2
 8002886:	f8c7 c698 	str.w	ip, [r7, #1688]	; 0x698
 800288a:	400b      	ands	r3, r1
 800288c:	f8c7 369c 	str.w	r3, [r7, #1692]	; 0x69c
 8002890:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8002894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002898:	f507 61d3 	add.w	r1, r7, #1688	; 0x698
 800289c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80028a0:	4684      	mov	ip, r0
 80028a2:	ea82 0c0c 	eor.w	ip, r2, ip
 80028a6:	f8c7 c1f0 	str.w	ip, [r7, #496]	; 0x1f0
 80028aa:	404b      	eors	r3, r1
 80028ac:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 80028b0:	e9d7 237c 	ldrd	r2, r3, [r7, #496]	; 0x1f0
 80028b4:	f607 3168 	addw	r1, r7, #2920	; 0xb68
 80028b8:	e9c1 2300 	strd	r2, r3, [r1]
            Abo =   BCo ^((~BCu)&  BCa );
 80028bc:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80028c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028c4:	43d1      	mvns	r1, r2
 80028c6:	f8c7 1690 	str.w	r1, [r7, #1680]	; 0x690
 80028ca:	43db      	mvns	r3, r3
 80028cc:	f8c7 3694 	str.w	r3, [r7, #1684]	; 0x694
 80028d0:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80028d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d8:	f507 61d2 	add.w	r1, r7, #1680	; 0x690
 80028dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80028e0:	4684      	mov	ip, r0
 80028e2:	ea0c 0c02 	and.w	ip, ip, r2
 80028e6:	f8c7 c688 	str.w	ip, [r7, #1672]	; 0x688
 80028ea:	400b      	ands	r3, r1
 80028ec:	f8c7 368c 	str.w	r3, [r7, #1676]	; 0x68c
 80028f0:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80028f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f8:	f507 61d1 	add.w	r1, r7, #1672	; 0x688
 80028fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002900:	4684      	mov	ip, r0
 8002902:	ea82 0c0c 	eor.w	ip, r2, ip
 8002906:	f8c7 c1e8 	str.w	ip, [r7, #488]	; 0x1e8
 800290a:	404b      	eors	r3, r1
 800290c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 8002910:	e9d7 237a 	ldrd	r2, r3, [r7, #488]	; 0x1e8
 8002914:	f507 6136 	add.w	r1, r7, #2912	; 0xb60
 8002918:	e9c1 2300 	strd	r2, r3, [r1]
            Abu =   BCu ^((~BCa)&  BCe );
 800291c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8002920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002924:	43d1      	mvns	r1, r2
 8002926:	f8c7 1680 	str.w	r1, [r7, #1664]	; 0x680
 800292a:	43db      	mvns	r3, r3
 800292c:	f8c7 3684 	str.w	r3, [r7, #1668]	; 0x684
 8002930:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8002934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002938:	f507 61d0 	add.w	r1, r7, #1664	; 0x680
 800293c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002940:	4684      	mov	ip, r0
 8002942:	ea0c 0c02 	and.w	ip, ip, r2
 8002946:	f8c7 c678 	str.w	ip, [r7, #1656]	; 0x678
 800294a:	400b      	ands	r3, r1
 800294c:	f8c7 367c 	str.w	r3, [r7, #1660]	; 0x67c
 8002950:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8002954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002958:	f507 61cf 	add.w	r1, r7, #1656	; 0x678
 800295c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002960:	4684      	mov	ip, r0
 8002962:	ea82 0c0c 	eor.w	ip, r2, ip
 8002966:	f8c7 c1e0 	str.w	ip, [r7, #480]	; 0x1e0
 800296a:	404b      	eors	r3, r1
 800296c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002970:	e9d7 2378 	ldrd	r2, r3, [r7, #480]	; 0x1e0
 8002974:	f607 3158 	addw	r1, r7, #2904	; 0xb58
 8002978:	e9c1 2300 	strd	r2, r3, [r1]

            Ebo ^= Do;
 800297c:	f607 2348 	addw	r3, r7, #2632	; 0xa48
 8002980:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002984:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8002988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298c:	ea80 0c02 	eor.w	ip, r0, r2
 8002990:	f8c7 c1d8 	str.w	ip, [r7, #472]	; 0x1d8
 8002994:	404b      	eors	r3, r1
 8002996:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800299a:	e9d7 2376 	ldrd	r2, r3, [r7, #472]	; 0x1d8
 800299e:	f607 2148 	addw	r1, r7, #2632	; 0xa48
 80029a2:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebo, 28);
 80029a6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80029aa:	f5a3 70a0 	sub.w	r0, r3, #320	; 0x140
 80029ae:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80029b2:	f5a3 719e 	sub.w	r1, r3, #316	; 0x13c
 80029b6:	6803      	ldr	r3, [r0, #0]
 80029b8:	091a      	lsrs	r2, r3, #4
 80029ba:	680b      	ldr	r3, [r1, #0]
 80029bc:	071b      	lsls	r3, r3, #28
 80029be:	4313      	orrs	r3, r2
 80029c0:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
 80029c4:	680b      	ldr	r3, [r1, #0]
 80029c6:	091a      	lsrs	r2, r3, #4
 80029c8:	6803      	ldr	r3, [r0, #0]
 80029ca:	071b      	lsls	r3, r3, #28
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
 80029d2:	e9d7 2374 	ldrd	r2, r3, [r7, #464]	; 0x1d0
 80029d6:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 80029da:	e9c1 2300 	strd	r2, r3, [r1]
            Egu ^= Du;
 80029de:	f607 2318 	addw	r3, r7, #2584	; 0xa18
 80029e2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80029e6:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 80029ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ee:	ea80 0c02 	eor.w	ip, r0, r2
 80029f2:	f8c7 c1c8 	str.w	ip, [r7, #456]	; 0x1c8
 80029f6:	404b      	eors	r3, r1
 80029f8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
 80029fc:	e9d7 2372 	ldrd	r2, r3, [r7, #456]	; 0x1c8
 8002a00:	f607 2118 	addw	r1, r7, #2584	; 0xa18
 8002a04:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Egu, 20);
 8002a08:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002a0c:	f5a3 70b8 	sub.w	r0, r3, #368	; 0x170
 8002a10:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002a14:	f5a3 71b6 	sub.w	r1, r3, #364	; 0x16c
 8002a18:	6803      	ldr	r3, [r0, #0]
 8002a1a:	0b1a      	lsrs	r2, r3, #12
 8002a1c:	680b      	ldr	r3, [r1, #0]
 8002a1e:	051b      	lsls	r3, r3, #20
 8002a20:	4313      	orrs	r3, r2
 8002a22:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002a26:	680b      	ldr	r3, [r1, #0]
 8002a28:	0b1a      	lsrs	r2, r3, #12
 8002a2a:	6803      	ldr	r3, [r0, #0]
 8002a2c:	051b      	lsls	r3, r3, #20
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002a34:	e9d7 2370 	ldrd	r2, r3, [r7, #448]	; 0x1c0
 8002a38:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8002a3c:	e9c1 2300 	strd	r2, r3, [r1]
            Eka ^= Da;
 8002a40:	f507 6321 	add.w	r3, r7, #2576	; 0xa10
 8002a44:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002a48:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8002a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a50:	ea80 0c02 	eor.w	ip, r0, r2
 8002a54:	f8c7 c1b8 	str.w	ip, [r7, #440]	; 0x1b8
 8002a58:	404b      	eors	r3, r1
 8002a5a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8002a5e:	e9d7 236e 	ldrd	r2, r3, [r7, #440]	; 0x1b8
 8002a62:	f507 6121 	add.w	r1, r7, #2576	; 0xa10
 8002a66:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eka, 3);
 8002a6a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002a6e:	f5a3 70bc 	sub.w	r0, r3, #376	; 0x178
 8002a72:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002a76:	f5a3 71ba 	sub.w	r1, r3, #372	; 0x174
 8002a7a:	6803      	ldr	r3, [r0, #0]
 8002a7c:	0f5a      	lsrs	r2, r3, #29
 8002a7e:	680b      	ldr	r3, [r1, #0]
 8002a80:	00db      	lsls	r3, r3, #3
 8002a82:	4313      	orrs	r3, r2
 8002a84:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 8002a88:	680b      	ldr	r3, [r1, #0]
 8002a8a:	0f5a      	lsrs	r2, r3, #29
 8002a8c:	6803      	ldr	r3, [r0, #0]
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	4313      	orrs	r3, r2
 8002a92:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 8002a96:	e9d7 236c 	ldrd	r2, r3, [r7, #432]	; 0x1b0
 8002a9a:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8002a9e:	e9c1 2300 	strd	r2, r3, [r1]
            Eme ^= De;
 8002aa2:	f507 631e 	add.w	r3, r7, #2528	; 0x9e0
 8002aa6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002aaa:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8002aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab2:	ea80 0c02 	eor.w	ip, r0, r2
 8002ab6:	f8c7 c1a8 	str.w	ip, [r7, #424]	; 0x1a8
 8002aba:	404b      	eors	r3, r1
 8002abc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 8002ac0:	e9d7 236a 	ldrd	r2, r3, [r7, #424]	; 0x1a8
 8002ac4:	f507 611e 	add.w	r1, r7, #2528	; 0x9e0
 8002ac8:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Eme, 45);
 8002acc:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002ad0:	f5a3 70d2 	sub.w	r0, r3, #420	; 0x1a4
 8002ad4:	e002      	b.n	8002adc <KeccakF1600_StatePermute+0x22e4>
 8002ad6:	bf00      	nop
 8002ad8:	08005ac0 	.word	0x08005ac0
 8002adc:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002ae0:	f5a3 71d4 	sub.w	r1, r3, #424	; 0x1a8
 8002ae4:	6803      	ldr	r3, [r0, #0]
 8002ae6:	035a      	lsls	r2, r3, #13
 8002ae8:	680b      	ldr	r3, [r1, #0]
 8002aea:	0cdb      	lsrs	r3, r3, #19
 8002aec:	4313      	orrs	r3, r2
 8002aee:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002af2:	680b      	ldr	r3, [r1, #0]
 8002af4:	035a      	lsls	r2, r3, #13
 8002af6:	6803      	ldr	r3, [r0, #0]
 8002af8:	0cdb      	lsrs	r3, r3, #19
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8002b00:	e9d7 2368 	ldrd	r2, r3, [r7, #416]	; 0x1a0
 8002b04:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8002b08:	e9c1 2300 	strd	r2, r3, [r1]
            Esi ^= Di;
 8002b0c:	f507 631b 	add.w	r3, r7, #2480	; 0x9b0
 8002b10:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002b14:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8002b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b1c:	ea80 0c02 	eor.w	ip, r0, r2
 8002b20:	f8c7 c198 	str.w	ip, [r7, #408]	; 0x198
 8002b24:	404b      	eors	r3, r1
 8002b26:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8002b2a:	e9d7 2366 	ldrd	r2, r3, [r7, #408]	; 0x198
 8002b2e:	f507 611b 	add.w	r1, r7, #2480	; 0x9b0
 8002b32:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esi, 61);
 8002b36:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002b3a:	f5a3 70ea 	sub.w	r0, r3, #468	; 0x1d4
 8002b3e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002b42:	f5a3 71ec 	sub.w	r1, r3, #472	; 0x1d8
 8002b46:	6803      	ldr	r3, [r0, #0]
 8002b48:	075a      	lsls	r2, r3, #29
 8002b4a:	680b      	ldr	r3, [r1, #0]
 8002b4c:	08db      	lsrs	r3, r3, #3
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
 8002b54:	680b      	ldr	r3, [r1, #0]
 8002b56:	075a      	lsls	r2, r3, #29
 8002b58:	6803      	ldr	r3, [r0, #0]
 8002b5a:	08db      	lsrs	r3, r3, #3
 8002b5c:	4313      	orrs	r3, r2
 8002b5e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
 8002b62:	e9d7 2364 	ldrd	r2, r3, [r7, #400]	; 0x190
 8002b66:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8002b6a:	e9c1 2300 	strd	r2, r3, [r1]
            Aga =   BCa ^((~BCe)&  BCi );
 8002b6e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8002b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b76:	43d1      	mvns	r1, r2
 8002b78:	f8c7 1670 	str.w	r1, [r7, #1648]	; 0x670
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	f8c7 3674 	str.w	r3, [r7, #1652]	; 0x674
 8002b82:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8002b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8a:	f507 61ce 	add.w	r1, r7, #1648	; 0x670
 8002b8e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002b92:	4684      	mov	ip, r0
 8002b94:	ea0c 0c02 	and.w	ip, ip, r2
 8002b98:	f8c7 c668 	str.w	ip, [r7, #1640]	; 0x668
 8002b9c:	400b      	ands	r3, r1
 8002b9e:	f8c7 366c 	str.w	r3, [r7, #1644]	; 0x66c
 8002ba2:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8002ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002baa:	f507 61cd 	add.w	r1, r7, #1640	; 0x668
 8002bae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002bb2:	4684      	mov	ip, r0
 8002bb4:	ea82 0c0c 	eor.w	ip, r2, ip
 8002bb8:	f8c7 c188 	str.w	ip, [r7, #392]	; 0x188
 8002bbc:	404b      	eors	r3, r1
 8002bbe:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
 8002bc2:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8002bc6:	f507 6135 	add.w	r1, r7, #2896	; 0xb50
 8002bca:	e9c1 2300 	strd	r2, r3, [r1]
            Age =   BCe ^((~BCi)&  BCo );
 8002bce:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8002bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd6:	43d1      	mvns	r1, r2
 8002bd8:	f8c7 1660 	str.w	r1, [r7, #1632]	; 0x660
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	f8c7 3664 	str.w	r3, [r7, #1636]	; 0x664
 8002be2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8002be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bea:	f507 61cc 	add.w	r1, r7, #1632	; 0x660
 8002bee:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002bf2:	4684      	mov	ip, r0
 8002bf4:	ea0c 0c02 	and.w	ip, ip, r2
 8002bf8:	f8c7 c658 	str.w	ip, [r7, #1624]	; 0x658
 8002bfc:	400b      	ands	r3, r1
 8002bfe:	f8c7 365c 	str.w	r3, [r7, #1628]	; 0x65c
 8002c02:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8002c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c0a:	f507 61cb 	add.w	r1, r7, #1624	; 0x658
 8002c0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c12:	4684      	mov	ip, r0
 8002c14:	ea82 0c0c 	eor.w	ip, r2, ip
 8002c18:	f8c7 c180 	str.w	ip, [r7, #384]	; 0x180
 8002c1c:	404b      	eors	r3, r1
 8002c1e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002c22:	e9d7 2360 	ldrd	r2, r3, [r7, #384]	; 0x180
 8002c26:	f607 3148 	addw	r1, r7, #2888	; 0xb48
 8002c2a:	e9c1 2300 	strd	r2, r3, [r1]
            Agi =   BCi ^((~BCo)&  BCu );
 8002c2e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8002c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c36:	43d1      	mvns	r1, r2
 8002c38:	f8c7 1650 	str.w	r1, [r7, #1616]	; 0x650
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	f8c7 3654 	str.w	r3, [r7, #1620]	; 0x654
 8002c42:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8002c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4a:	f507 61ca 	add.w	r1, r7, #1616	; 0x650
 8002c4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c52:	4684      	mov	ip, r0
 8002c54:	ea0c 0c02 	and.w	ip, ip, r2
 8002c58:	f8c7 c648 	str.w	ip, [r7, #1608]	; 0x648
 8002c5c:	400b      	ands	r3, r1
 8002c5e:	f8c7 364c 	str.w	r3, [r7, #1612]	; 0x64c
 8002c62:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8002c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6a:	f507 61c9 	add.w	r1, r7, #1608	; 0x648
 8002c6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c72:	4684      	mov	ip, r0
 8002c74:	ea82 0c0c 	eor.w	ip, r2, ip
 8002c78:	f8c7 c178 	str.w	ip, [r7, #376]	; 0x178
 8002c7c:	404b      	eors	r3, r1
 8002c7e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002c82:	e9d7 235e 	ldrd	r2, r3, [r7, #376]	; 0x178
 8002c86:	f507 6134 	add.w	r1, r7, #2880	; 0xb40
 8002c8a:	e9c1 2300 	strd	r2, r3, [r1]
            Ago =   BCo ^((~BCu)&  BCa );
 8002c8e:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8002c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c96:	43d1      	mvns	r1, r2
 8002c98:	f8c7 1640 	str.w	r1, [r7, #1600]	; 0x640
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	f8c7 3644 	str.w	r3, [r7, #1604]	; 0x644
 8002ca2:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8002ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002caa:	f507 61c8 	add.w	r1, r7, #1600	; 0x640
 8002cae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cb2:	4684      	mov	ip, r0
 8002cb4:	ea0c 0c02 	and.w	ip, ip, r2
 8002cb8:	f8c7 c638 	str.w	ip, [r7, #1592]	; 0x638
 8002cbc:	400b      	ands	r3, r1
 8002cbe:	f8c7 363c 	str.w	r3, [r7, #1596]	; 0x63c
 8002cc2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8002cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cca:	f507 61c7 	add.w	r1, r7, #1592	; 0x638
 8002cce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002cd2:	4684      	mov	ip, r0
 8002cd4:	ea82 0c0c 	eor.w	ip, r2, ip
 8002cd8:	f8c7 c170 	str.w	ip, [r7, #368]	; 0x170
 8002cdc:	404b      	eors	r3, r1
 8002cde:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8002ce2:	e9d7 235c 	ldrd	r2, r3, [r7, #368]	; 0x170
 8002ce6:	f607 3138 	addw	r1, r7, #2872	; 0xb38
 8002cea:	e9c1 2300 	strd	r2, r3, [r1]
            Agu =   BCu ^((~BCa)&  BCe );
 8002cee:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8002cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf6:	43d1      	mvns	r1, r2
 8002cf8:	f8c7 1630 	str.w	r1, [r7, #1584]	; 0x630
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	f8c7 3634 	str.w	r3, [r7, #1588]	; 0x634
 8002d02:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8002d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d0a:	f507 61c6 	add.w	r1, r7, #1584	; 0x630
 8002d0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d12:	4684      	mov	ip, r0
 8002d14:	ea0c 0c02 	and.w	ip, ip, r2
 8002d18:	f8c7 c628 	str.w	ip, [r7, #1576]	; 0x628
 8002d1c:	400b      	ands	r3, r1
 8002d1e:	f8c7 362c 	str.w	r3, [r7, #1580]	; 0x62c
 8002d22:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8002d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2a:	f507 61c5 	add.w	r1, r7, #1576	; 0x628
 8002d2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002d32:	4684      	mov	ip, r0
 8002d34:	ea82 0c0c 	eor.w	ip, r2, ip
 8002d38:	f8c7 c168 	str.w	ip, [r7, #360]	; 0x168
 8002d3c:	404b      	eors	r3, r1
 8002d3e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 8002d42:	e9d7 235a 	ldrd	r2, r3, [r7, #360]	; 0x168
 8002d46:	f507 6133 	add.w	r1, r7, #2864	; 0xb30
 8002d4a:	e9c1 2300 	strd	r2, r3, [r1]

            Ebe ^= De;
 8002d4e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 8002d52:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002d56:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 8002d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5e:	ea80 0c02 	eor.w	ip, r0, r2
 8002d62:	f8c7 c160 	str.w	ip, [r7, #352]	; 0x160
 8002d66:	404b      	eors	r3, r1
 8002d68:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
 8002d6c:	e9d7 2358 	ldrd	r2, r3, [r7, #352]	; 0x160
 8002d70:	f607 2158 	addw	r1, r7, #2648	; 0xa58
 8002d74:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebe, 1);
 8002d78:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002d7c:	f5a3 7098 	sub.w	r0, r3, #304	; 0x130
 8002d80:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002d84:	f5a3 7196 	sub.w	r1, r3, #300	; 0x12c
 8002d88:	6803      	ldr	r3, [r0, #0]
 8002d8a:	0fda      	lsrs	r2, r3, #31
 8002d8c:	680b      	ldr	r3, [r1, #0]
 8002d8e:	005b      	lsls	r3, r3, #1
 8002d90:	4313      	orrs	r3, r2
 8002d92:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8002d96:	680b      	ldr	r3, [r1, #0]
 8002d98:	0fda      	lsrs	r2, r3, #31
 8002d9a:	6803      	ldr	r3, [r0, #0]
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8002da4:	e9d7 2356 	ldrd	r2, r3, [r7, #344]	; 0x158
 8002da8:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8002dac:	e9c1 2300 	strd	r2, r3, [r1]
            Egi ^= Di;
 8002db0:	f607 2328 	addw	r3, r7, #2600	; 0xa28
 8002db4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002db8:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 8002dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc0:	ea80 0c02 	eor.w	ip, r0, r2
 8002dc4:	f8c7 c150 	str.w	ip, [r7, #336]	; 0x150
 8002dc8:	404b      	eors	r3, r1
 8002dca:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002dce:	e9d7 2354 	ldrd	r2, r3, [r7, #336]	; 0x150
 8002dd2:	f607 2128 	addw	r1, r7, #2600	; 0xa28
 8002dd6:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Egi, 6);
 8002dda:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002dde:	f5a3 70b0 	sub.w	r0, r3, #352	; 0x160
 8002de2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002de6:	f5a3 71ae 	sub.w	r1, r3, #348	; 0x15c
 8002dea:	6803      	ldr	r3, [r0, #0]
 8002dec:	0e9a      	lsrs	r2, r3, #26
 8002dee:	680b      	ldr	r3, [r1, #0]
 8002df0:	019b      	lsls	r3, r3, #6
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8002df8:	680b      	ldr	r3, [r1, #0]
 8002dfa:	0e9a      	lsrs	r2, r3, #26
 8002dfc:	6803      	ldr	r3, [r0, #0]
 8002dfe:	019b      	lsls	r3, r3, #6
 8002e00:	4313      	orrs	r3, r2
 8002e02:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8002e06:	e9d7 2352 	ldrd	r2, r3, [r7, #328]	; 0x148
 8002e0a:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8002e0e:	e9c1 2300 	strd	r2, r3, [r1]
            Eko ^= Do;
 8002e12:	f607 13f8 	addw	r3, r7, #2552	; 0x9f8
 8002e16:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e1a:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8002e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e22:	ea80 0c02 	eor.w	ip, r0, r2
 8002e26:	f8c7 c140 	str.w	ip, [r7, #320]	; 0x140
 8002e2a:	404b      	eors	r3, r1
 8002e2c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8002e30:	e9d7 2350 	ldrd	r2, r3, [r7, #320]	; 0x140
 8002e34:	f607 11f8 	addw	r1, r7, #2552	; 0x9f8
 8002e38:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eko, 25);
 8002e3c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002e40:	f5a3 70c8 	sub.w	r0, r3, #400	; 0x190
 8002e44:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002e48:	f5a3 71c6 	sub.w	r1, r3, #396	; 0x18c
 8002e4c:	6803      	ldr	r3, [r0, #0]
 8002e4e:	09da      	lsrs	r2, r3, #7
 8002e50:	680b      	ldr	r3, [r1, #0]
 8002e52:	065b      	lsls	r3, r3, #25
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8002e5a:	680b      	ldr	r3, [r1, #0]
 8002e5c:	09da      	lsrs	r2, r3, #7
 8002e5e:	6803      	ldr	r3, [r0, #0]
 8002e60:	065b      	lsls	r3, r3, #25
 8002e62:	4313      	orrs	r3, r2
 8002e64:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8002e68:	e9d7 234e 	ldrd	r2, r3, [r7, #312]	; 0x138
 8002e6c:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 8002e70:	e9c1 2300 	strd	r2, r3, [r1]
            Emu ^= Du;
 8002e74:	f607 13c8 	addw	r3, r7, #2504	; 0x9c8
 8002e78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002e7c:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8002e80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e84:	ea80 0c02 	eor.w	ip, r0, r2
 8002e88:	f8c7 c130 	str.w	ip, [r7, #304]	; 0x130
 8002e8c:	404b      	eors	r3, r1
 8002e8e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8002e92:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	; 0x130
 8002e96:	f607 11c8 	addw	r1, r7, #2504	; 0x9c8
 8002e9a:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emu, 8);
 8002e9e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002ea2:	f5a3 70e0 	sub.w	r0, r3, #448	; 0x1c0
 8002ea6:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002eaa:	f5a3 71de 	sub.w	r1, r3, #444	; 0x1bc
 8002eae:	6803      	ldr	r3, [r0, #0]
 8002eb0:	0e1a      	lsrs	r2, r3, #24
 8002eb2:	680b      	ldr	r3, [r1, #0]
 8002eb4:	021b      	lsls	r3, r3, #8
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8002ebc:	680b      	ldr	r3, [r1, #0]
 8002ebe:	0e1a      	lsrs	r2, r3, #24
 8002ec0:	6803      	ldr	r3, [r0, #0]
 8002ec2:	021b      	lsls	r3, r3, #8
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002eca:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8002ece:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 8002ed2:	e9c1 2300 	strd	r2, r3, [r1]
            Esa ^= Da;
 8002ed6:	f507 631c 	add.w	r3, r7, #2496	; 0x9c0
 8002eda:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ede:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8002ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee6:	ea80 0c02 	eor.w	ip, r0, r2
 8002eea:	f8c7 c120 	str.w	ip, [r7, #288]	; 0x120
 8002eee:	404b      	eors	r3, r1
 8002ef0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002ef4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	; 0x120
 8002ef8:	f507 611c 	add.w	r1, r7, #2496	; 0x9c0
 8002efc:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Esa, 18);
 8002f00:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002f04:	f5a3 70e4 	sub.w	r0, r3, #456	; 0x1c8
 8002f08:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8002f0c:	f5a3 71e2 	sub.w	r1, r3, #452	; 0x1c4
 8002f10:	6803      	ldr	r3, [r0, #0]
 8002f12:	0b9a      	lsrs	r2, r3, #14
 8002f14:	680b      	ldr	r3, [r1, #0]
 8002f16:	049b      	lsls	r3, r3, #18
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002f1e:	680b      	ldr	r3, [r1, #0]
 8002f20:	0b9a      	lsrs	r2, r3, #14
 8002f22:	6803      	ldr	r3, [r0, #0]
 8002f24:	049b      	lsls	r3, r3, #18
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8002f2c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	; 0x118
 8002f30:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 8002f34:	e9c1 2300 	strd	r2, r3, [r1]
            Aka =   BCa ^((~BCe)&  BCi );
 8002f38:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8002f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f40:	43d1      	mvns	r1, r2
 8002f42:	f8c7 1620 	str.w	r1, [r7, #1568]	; 0x620
 8002f46:	43db      	mvns	r3, r3
 8002f48:	f8c7 3624 	str.w	r3, [r7, #1572]	; 0x624
 8002f4c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8002f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f54:	f507 61c4 	add.w	r1, r7, #1568	; 0x620
 8002f58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f5c:	4684      	mov	ip, r0
 8002f5e:	ea0c 0c02 	and.w	ip, ip, r2
 8002f62:	f8c7 c618 	str.w	ip, [r7, #1560]	; 0x618
 8002f66:	400b      	ands	r3, r1
 8002f68:	f8c7 361c 	str.w	r3, [r7, #1564]	; 0x61c
 8002f6c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8002f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f74:	f507 61c3 	add.w	r1, r7, #1560	; 0x618
 8002f78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f7c:	4684      	mov	ip, r0
 8002f7e:	ea82 0c0c 	eor.w	ip, r2, ip
 8002f82:	f8c7 c110 	str.w	ip, [r7, #272]	; 0x110
 8002f86:	404b      	eors	r3, r1
 8002f88:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8002f8c:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8002f90:	f607 3128 	addw	r1, r7, #2856	; 0xb28
 8002f94:	e9c1 2300 	strd	r2, r3, [r1]
            Ake =   BCe ^((~BCi)&  BCo );
 8002f98:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8002f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa0:	43d1      	mvns	r1, r2
 8002fa2:	f8c7 1610 	str.w	r1, [r7, #1552]	; 0x610
 8002fa6:	43db      	mvns	r3, r3
 8002fa8:	f8c7 3614 	str.w	r3, [r7, #1556]	; 0x614
 8002fac:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8002fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb4:	f507 61c2 	add.w	r1, r7, #1552	; 0x610
 8002fb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002fbc:	4684      	mov	ip, r0
 8002fbe:	ea0c 0c02 	and.w	ip, ip, r2
 8002fc2:	f8c7 c608 	str.w	ip, [r7, #1544]	; 0x608
 8002fc6:	400b      	ands	r3, r1
 8002fc8:	f8c7 360c 	str.w	r3, [r7, #1548]	; 0x60c
 8002fcc:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8002fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd4:	f507 61c1 	add.w	r1, r7, #1544	; 0x608
 8002fd8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002fdc:	4684      	mov	ip, r0
 8002fde:	ea82 0c0c 	eor.w	ip, r2, ip
 8002fe2:	f8c7 c108 	str.w	ip, [r7, #264]	; 0x108
 8002fe6:	404b      	eors	r3, r1
 8002fe8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002fec:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	; 0x108
 8002ff0:	f507 6132 	add.w	r1, r7, #2848	; 0xb20
 8002ff4:	e9c1 2300 	strd	r2, r3, [r1]
            Aki =   BCi ^((~BCo)&  BCu );
 8002ff8:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8002ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003000:	43d1      	mvns	r1, r2
 8003002:	f8c7 1600 	str.w	r1, [r7, #1536]	; 0x600
 8003006:	43db      	mvns	r3, r3
 8003008:	f8c7 3604 	str.w	r3, [r7, #1540]	; 0x604
 800300c:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8003010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003014:	f507 61c0 	add.w	r1, r7, #1536	; 0x600
 8003018:	e9d1 0100 	ldrd	r0, r1, [r1]
 800301c:	4684      	mov	ip, r0
 800301e:	ea0c 0c02 	and.w	ip, ip, r2
 8003022:	f8c7 c5f8 	str.w	ip, [r7, #1528]	; 0x5f8
 8003026:	400b      	ands	r3, r1
 8003028:	f8c7 35fc 	str.w	r3, [r7, #1532]	; 0x5fc
 800302c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8003030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003034:	f507 61bf 	add.w	r1, r7, #1528	; 0x5f8
 8003038:	e9d1 0100 	ldrd	r0, r1, [r1]
 800303c:	4684      	mov	ip, r0
 800303e:	ea82 0c0c 	eor.w	ip, r2, ip
 8003042:	f8c7 c100 	str.w	ip, [r7, #256]	; 0x100
 8003046:	404b      	eors	r3, r1
 8003048:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800304c:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	; 0x100
 8003050:	f607 3118 	addw	r1, r7, #2840	; 0xb18
 8003054:	e9c1 2300 	strd	r2, r3, [r1]
            Ako =   BCo ^((~BCu)&  BCa );
 8003058:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 800305c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003060:	43d1      	mvns	r1, r2
 8003062:	f8c7 15f0 	str.w	r1, [r7, #1520]	; 0x5f0
 8003066:	43db      	mvns	r3, r3
 8003068:	f8c7 35f4 	str.w	r3, [r7, #1524]	; 0x5f4
 800306c:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8003070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003074:	f507 61be 	add.w	r1, r7, #1520	; 0x5f0
 8003078:	e9d1 0100 	ldrd	r0, r1, [r1]
 800307c:	4684      	mov	ip, r0
 800307e:	ea0c 0c02 	and.w	ip, ip, r2
 8003082:	f8c7 c5e8 	str.w	ip, [r7, #1512]	; 0x5e8
 8003086:	400b      	ands	r3, r1
 8003088:	f8c7 35ec 	str.w	r3, [r7, #1516]	; 0x5ec
 800308c:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8003090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003094:	f507 61bd 	add.w	r1, r7, #1512	; 0x5e8
 8003098:	e9d1 0100 	ldrd	r0, r1, [r1]
 800309c:	4684      	mov	ip, r0
 800309e:	ea82 0c0c 	eor.w	ip, r2, ip
 80030a2:	f8c7 c0f8 	str.w	ip, [r7, #248]	; 0xf8
 80030a6:	404b      	eors	r3, r1
 80030a8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80030ac:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 80030b0:	f507 6131 	add.w	r1, r7, #2832	; 0xb10
 80030b4:	e9c1 2300 	strd	r2, r3, [r1]
            Aku =   BCu ^((~BCa)&  BCe );
 80030b8:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80030bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030c0:	43d1      	mvns	r1, r2
 80030c2:	f8c7 15e0 	str.w	r1, [r7, #1504]	; 0x5e0
 80030c6:	43db      	mvns	r3, r3
 80030c8:	f8c7 35e4 	str.w	r3, [r7, #1508]	; 0x5e4
 80030cc:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80030d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d4:	f507 61bc 	add.w	r1, r7, #1504	; 0x5e0
 80030d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030dc:	4684      	mov	ip, r0
 80030de:	ea0c 0c02 	and.w	ip, ip, r2
 80030e2:	f8c7 c5d8 	str.w	ip, [r7, #1496]	; 0x5d8
 80030e6:	400b      	ands	r3, r1
 80030e8:	f8c7 35dc 	str.w	r3, [r7, #1500]	; 0x5dc
 80030ec:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80030f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f4:	f507 61bb 	add.w	r1, r7, #1496	; 0x5d8
 80030f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80030fc:	4684      	mov	ip, r0
 80030fe:	ea82 0c0c 	eor.w	ip, r2, ip
 8003102:	f8c7 c0f0 	str.w	ip, [r7, #240]	; 0xf0
 8003106:	404b      	eors	r3, r1
 8003108:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800310c:	e9d7 233c 	ldrd	r2, r3, [r7, #240]	; 0xf0
 8003110:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 8003114:	e9c1 2300 	strd	r2, r3, [r1]

            Ebu ^= Du;
 8003118:	f507 6324 	add.w	r3, r7, #2624	; 0xa40
 800311c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003120:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 8003124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003128:	ea80 0c02 	eor.w	ip, r0, r2
 800312c:	f8c7 c0e8 	str.w	ip, [r7, #232]	; 0xe8
 8003130:	404b      	eors	r3, r1
 8003132:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003136:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 800313a:	f507 6124 	add.w	r1, r7, #2624	; 0xa40
 800313e:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebu, 27);
 8003142:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003146:	f5a3 70a4 	sub.w	r0, r3, #328	; 0x148
 800314a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800314e:	f5a3 71a2 	sub.w	r1, r3, #324	; 0x144
 8003152:	6803      	ldr	r3, [r0, #0]
 8003154:	095a      	lsrs	r2, r3, #5
 8003156:	680b      	ldr	r3, [r1, #0]
 8003158:	06db      	lsls	r3, r3, #27
 800315a:	4313      	orrs	r3, r2
 800315c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003160:	680b      	ldr	r3, [r1, #0]
 8003162:	095a      	lsrs	r2, r3, #5
 8003164:	6803      	ldr	r3, [r0, #0]
 8003166:	06db      	lsls	r3, r3, #27
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800316e:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	; 0xe0
 8003172:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8003176:	e9c1 2300 	strd	r2, r3, [r1]
            Ega ^= Da;
 800317a:	f607 2338 	addw	r3, r7, #2616	; 0xa38
 800317e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003182:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8003186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800318a:	ea80 0c02 	eor.w	ip, r0, r2
 800318e:	f8c7 c0d8 	str.w	ip, [r7, #216]	; 0xd8
 8003192:	404b      	eors	r3, r1
 8003194:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003198:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 800319c:	f607 2138 	addw	r1, r7, #2616	; 0xa38
 80031a0:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ega, 36);
 80031a4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80031a8:	f5a3 70a6 	sub.w	r0, r3, #332	; 0x14c
 80031ac:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80031b0:	f5a3 71a8 	sub.w	r1, r3, #336	; 0x150
 80031b4:	6803      	ldr	r3, [r0, #0]
 80031b6:	011a      	lsls	r2, r3, #4
 80031b8:	680b      	ldr	r3, [r1, #0]
 80031ba:	0f1b      	lsrs	r3, r3, #28
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80031c2:	680b      	ldr	r3, [r1, #0]
 80031c4:	011a      	lsls	r2, r3, #4
 80031c6:	6803      	ldr	r3, [r0, #0]
 80031c8:	0f1b      	lsrs	r3, r3, #28
 80031ca:	4313      	orrs	r3, r2
 80031cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80031d0:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 80031d4:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 80031d8:	e9c1 2300 	strd	r2, r3, [r1]
            Eke ^= De;
 80031dc:	f607 2308 	addw	r3, r7, #2568	; 0xa08
 80031e0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80031e4:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 80031e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ec:	ea80 0c02 	eor.w	ip, r0, r2
 80031f0:	f8c7 c0c8 	str.w	ip, [r7, #200]	; 0xc8
 80031f4:	404b      	eors	r3, r1
 80031f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80031fa:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80031fe:	f607 2108 	addw	r1, r7, #2568	; 0xa08
 8003202:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eke, 10);
 8003206:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800320a:	f5a3 70c0 	sub.w	r0, r3, #384	; 0x180
 800320e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003212:	f5a3 71be 	sub.w	r1, r3, #380	; 0x17c
 8003216:	6803      	ldr	r3, [r0, #0]
 8003218:	0d9a      	lsrs	r2, r3, #22
 800321a:	680b      	ldr	r3, [r1, #0]
 800321c:	029b      	lsls	r3, r3, #10
 800321e:	4313      	orrs	r3, r2
 8003220:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003224:	680b      	ldr	r3, [r1, #0]
 8003226:	0d9a      	lsrs	r2, r3, #22
 8003228:	6803      	ldr	r3, [r0, #0]
 800322a:	029b      	lsls	r3, r3, #10
 800322c:	4313      	orrs	r3, r2
 800322e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003232:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8003236:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 800323a:	e9c1 2300 	strd	r2, r3, [r1]
            Emi ^= Di;
 800323e:	f607 13d8 	addw	r3, r7, #2520	; 0x9d8
 8003242:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003246:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 800324a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800324e:	ea80 0c02 	eor.w	ip, r0, r2
 8003252:	f8c7 c0b8 	str.w	ip, [r7, #184]	; 0xb8
 8003256:	404b      	eors	r3, r1
 8003258:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800325c:	e9d7 232e 	ldrd	r2, r3, [r7, #184]	; 0xb8
 8003260:	f607 11d8 	addw	r1, r7, #2520	; 0x9d8
 8003264:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Emi, 15);
 8003268:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800326c:	f5a3 70d8 	sub.w	r0, r3, #432	; 0x1b0
 8003270:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003274:	f5a3 71d6 	sub.w	r1, r3, #428	; 0x1ac
 8003278:	6803      	ldr	r3, [r0, #0]
 800327a:	0c5a      	lsrs	r2, r3, #17
 800327c:	680b      	ldr	r3, [r1, #0]
 800327e:	03db      	lsls	r3, r3, #15
 8003280:	4313      	orrs	r3, r2
 8003282:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003286:	680b      	ldr	r3, [r1, #0]
 8003288:	0c5a      	lsrs	r2, r3, #17
 800328a:	6803      	ldr	r3, [r0, #0]
 800328c:	03db      	lsls	r3, r3, #15
 800328e:	4313      	orrs	r3, r2
 8003290:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003294:	e9d7 232c 	ldrd	r2, r3, [r7, #176]	; 0xb0
 8003298:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800329c:	e9c1 2300 	strd	r2, r3, [r1]
            Eso ^= Do;
 80032a0:	f607 13a8 	addw	r3, r7, #2472	; 0x9a8
 80032a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80032a8:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 80032ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b0:	ea80 0c02 	eor.w	ip, r0, r2
 80032b4:	f8c7 c0a8 	str.w	ip, [r7, #168]	; 0xa8
 80032b8:	404b      	eors	r3, r1
 80032ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032be:	e9d7 232a 	ldrd	r2, r3, [r7, #168]	; 0xa8
 80032c2:	f607 11a8 	addw	r1, r7, #2472	; 0x9a8
 80032c6:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Eso, 56);
 80032ca:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80032ce:	f5a3 70ee 	sub.w	r0, r3, #476	; 0x1dc
 80032d2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80032d6:	f5a3 71f0 	sub.w	r1, r3, #480	; 0x1e0
 80032da:	6803      	ldr	r3, [r0, #0]
 80032dc:	061a      	lsls	r2, r3, #24
 80032de:	680b      	ldr	r3, [r1, #0]
 80032e0:	0a1b      	lsrs	r3, r3, #8
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80032e8:	680b      	ldr	r3, [r1, #0]
 80032ea:	061a      	lsls	r2, r3, #24
 80032ec:	6803      	ldr	r3, [r0, #0]
 80032ee:	0a1b      	lsrs	r3, r3, #8
 80032f0:	4313      	orrs	r3, r2
 80032f2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80032f6:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 80032fa:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 80032fe:	e9c1 2300 	strd	r2, r3, [r1]
            Ama =   BCa ^((~BCe)&  BCi );
 8003302:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8003306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800330a:	43d1      	mvns	r1, r2
 800330c:	f8c7 15d0 	str.w	r1, [r7, #1488]	; 0x5d0
 8003310:	43db      	mvns	r3, r3
 8003312:	f8c7 35d4 	str.w	r3, [r7, #1492]	; 0x5d4
 8003316:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800331a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800331e:	f507 61ba 	add.w	r1, r7, #1488	; 0x5d0
 8003322:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003326:	4684      	mov	ip, r0
 8003328:	ea0c 0c02 	and.w	ip, ip, r2
 800332c:	f8c7 c5c8 	str.w	ip, [r7, #1480]	; 0x5c8
 8003330:	400b      	ands	r3, r1
 8003332:	f8c7 35cc 	str.w	r3, [r7, #1484]	; 0x5cc
 8003336:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800333a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333e:	f507 61b9 	add.w	r1, r7, #1480	; 0x5c8
 8003342:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003346:	4684      	mov	ip, r0
 8003348:	ea82 0c0c 	eor.w	ip, r2, ip
 800334c:	f8c7 c098 	str.w	ip, [r7, #152]	; 0x98
 8003350:	404b      	eors	r3, r1
 8003352:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003356:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	; 0x98
 800335a:	f507 6130 	add.w	r1, r7, #2816	; 0xb00
 800335e:	e9c1 2300 	strd	r2, r3, [r1]
            Ame =   BCe ^((~BCi)&  BCo );
 8003362:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 8003366:	e9d3 2300 	ldrd	r2, r3, [r3]
 800336a:	43d1      	mvns	r1, r2
 800336c:	f8c7 15c0 	str.w	r1, [r7, #1472]	; 0x5c0
 8003370:	43db      	mvns	r3, r3
 8003372:	f8c7 35c4 	str.w	r3, [r7, #1476]	; 0x5c4
 8003376:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800337a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337e:	f507 61b8 	add.w	r1, r7, #1472	; 0x5c0
 8003382:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003386:	4684      	mov	ip, r0
 8003388:	ea0c 0c02 	and.w	ip, ip, r2
 800338c:	f8c7 c5b8 	str.w	ip, [r7, #1464]	; 0x5b8
 8003390:	400b      	ands	r3, r1
 8003392:	f8c7 35bc 	str.w	r3, [r7, #1468]	; 0x5bc
 8003396:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800339a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339e:	f507 61b7 	add.w	r1, r7, #1464	; 0x5b8
 80033a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033a6:	4684      	mov	ip, r0
 80033a8:	ea82 0c0c 	eor.w	ip, r2, ip
 80033ac:	f8c7 c090 	str.w	ip, [r7, #144]	; 0x90
 80033b0:	404b      	eors	r3, r1
 80033b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80033b6:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	; 0x90
 80033ba:	f607 21f8 	addw	r1, r7, #2808	; 0xaf8
 80033be:	e9c1 2300 	strd	r2, r3, [r1]
            Ami =   BCi ^((~BCo)&  BCu );
 80033c2:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80033c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ca:	43d1      	mvns	r1, r2
 80033cc:	f8c7 15b0 	str.w	r1, [r7, #1456]	; 0x5b0
 80033d0:	43db      	mvns	r3, r3
 80033d2:	f8c7 35b4 	str.w	r3, [r7, #1460]	; 0x5b4
 80033d6:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80033da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033de:	f507 61b6 	add.w	r1, r7, #1456	; 0x5b0
 80033e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033e6:	4684      	mov	ip, r0
 80033e8:	ea0c 0c02 	and.w	ip, ip, r2
 80033ec:	f8c7 c5a8 	str.w	ip, [r7, #1448]	; 0x5a8
 80033f0:	400b      	ands	r3, r1
 80033f2:	f8c7 35ac 	str.w	r3, [r7, #1452]	; 0x5ac
 80033f6:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80033fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033fe:	f507 61b5 	add.w	r1, r7, #1448	; 0x5a8
 8003402:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003406:	4684      	mov	ip, r0
 8003408:	ea82 0c0c 	eor.w	ip, r2, ip
 800340c:	f8c7 c088 	str.w	ip, [r7, #136]	; 0x88
 8003410:	404b      	eors	r3, r1
 8003412:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003416:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800341a:	f507 612f 	add.w	r1, r7, #2800	; 0xaf0
 800341e:	e9c1 2300 	strd	r2, r3, [r1]
            Amo =   BCo ^((~BCu)&  BCa );
 8003422:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8003426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800342a:	43d1      	mvns	r1, r2
 800342c:	f8c7 15a0 	str.w	r1, [r7, #1440]	; 0x5a0
 8003430:	43db      	mvns	r3, r3
 8003432:	f8c7 35a4 	str.w	r3, [r7, #1444]	; 0x5a4
 8003436:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 800343a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800343e:	f507 61b4 	add.w	r1, r7, #1440	; 0x5a0
 8003442:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003446:	4684      	mov	ip, r0
 8003448:	ea0c 0c02 	and.w	ip, ip, r2
 800344c:	f8c7 c598 	str.w	ip, [r7, #1432]	; 0x598
 8003450:	400b      	ands	r3, r1
 8003452:	f8c7 359c 	str.w	r3, [r7, #1436]	; 0x59c
 8003456:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800345a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345e:	f507 61b3 	add.w	r1, r7, #1432	; 0x598
 8003462:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003466:	4684      	mov	ip, r0
 8003468:	ea82 0c0c 	eor.w	ip, r2, ip
 800346c:	f8c7 c080 	str.w	ip, [r7, #128]	; 0x80
 8003470:	404b      	eors	r3, r1
 8003472:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003476:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 800347a:	f607 21e8 	addw	r1, r7, #2792	; 0xae8
 800347e:	e9c1 2300 	strd	r2, r3, [r1]
            Amu =   BCu ^((~BCa)&  BCe );
 8003482:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8003486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348a:	43d1      	mvns	r1, r2
 800348c:	f8c7 1590 	str.w	r1, [r7, #1424]	; 0x590
 8003490:	43db      	mvns	r3, r3
 8003492:	f8c7 3594 	str.w	r3, [r7, #1428]	; 0x594
 8003496:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 800349a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349e:	f507 61b2 	add.w	r1, r7, #1424	; 0x590
 80034a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034a6:	4684      	mov	ip, r0
 80034a8:	ea0c 0c02 	and.w	ip, ip, r2
 80034ac:	f8c7 c588 	str.w	ip, [r7, #1416]	; 0x588
 80034b0:	400b      	ands	r3, r1
 80034b2:	f8c7 358c 	str.w	r3, [r7, #1420]	; 0x58c
 80034b6:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80034ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034be:	f507 61b1 	add.w	r1, r7, #1416	; 0x588
 80034c2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80034c6:	4684      	mov	ip, r0
 80034c8:	ea82 0c0c 	eor.w	ip, r2, ip
 80034cc:	f8c7 c078 	str.w	ip, [r7, #120]	; 0x78
 80034d0:	404b      	eors	r3, r1
 80034d2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80034d4:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80034d8:	f507 612e 	add.w	r1, r7, #2784	; 0xae0
 80034dc:	e9c1 2300 	strd	r2, r3, [r1]

            Ebi ^= Di;
 80034e0:	f507 6325 	add.w	r3, r7, #2640	; 0xa50
 80034e4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80034e8:	f607 2378 	addw	r3, r7, #2680	; 0xa78
 80034ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034f0:	ea80 0c02 	eor.w	ip, r0, r2
 80034f4:	f8c7 c070 	str.w	ip, [r7, #112]	; 0x70
 80034f8:	404b      	eors	r3, r1
 80034fa:	677b      	str	r3, [r7, #116]	; 0x74
 80034fc:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003500:	f507 6125 	add.w	r1, r7, #2640	; 0xa50
 8003504:	e9c1 2300 	strd	r2, r3, [r1]
            BCa = ROL(Ebi, 62);
 8003508:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800350c:	f5a3 709a 	sub.w	r0, r3, #308	; 0x134
 8003510:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003514:	f5a3 719c 	sub.w	r1, r3, #312	; 0x138
 8003518:	6803      	ldr	r3, [r0, #0]
 800351a:	079a      	lsls	r2, r3, #30
 800351c:	680b      	ldr	r3, [r1, #0]
 800351e:	089b      	lsrs	r3, r3, #2
 8003520:	4313      	orrs	r3, r2
 8003522:	66bb      	str	r3, [r7, #104]	; 0x68
 8003524:	680b      	ldr	r3, [r1, #0]
 8003526:	079a      	lsls	r2, r3, #30
 8003528:	6803      	ldr	r3, [r0, #0]
 800352a:	089b      	lsrs	r3, r3, #2
 800352c:	4313      	orrs	r3, r2
 800352e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003530:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8003534:	f507 612b 	add.w	r1, r7, #2736	; 0xab0
 8003538:	e9c1 2300 	strd	r2, r3, [r1]
            Ego ^= Do;
 800353c:	f507 6322 	add.w	r3, r7, #2592	; 0xa20
 8003540:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003544:	f507 6327 	add.w	r3, r7, #2672	; 0xa70
 8003548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354c:	ea80 0c02 	eor.w	ip, r0, r2
 8003550:	f8c7 c060 	str.w	ip, [r7, #96]	; 0x60
 8003554:	404b      	eors	r3, r1
 8003556:	667b      	str	r3, [r7, #100]	; 0x64
 8003558:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800355c:	f507 6122 	add.w	r1, r7, #2592	; 0xa20
 8003560:	e9c1 2300 	strd	r2, r3, [r1]
            BCe = ROL(Ego, 55);
 8003564:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003568:	f5a3 70b2 	sub.w	r0, r3, #356	; 0x164
 800356c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003570:	f5a3 71b4 	sub.w	r1, r3, #360	; 0x168
 8003574:	6803      	ldr	r3, [r0, #0]
 8003576:	05da      	lsls	r2, r3, #23
 8003578:	680b      	ldr	r3, [r1, #0]
 800357a:	0a5b      	lsrs	r3, r3, #9
 800357c:	4313      	orrs	r3, r2
 800357e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003580:	680b      	ldr	r3, [r1, #0]
 8003582:	05da      	lsls	r2, r3, #23
 8003584:	6803      	ldr	r3, [r0, #0]
 8003586:	0a5b      	lsrs	r3, r3, #9
 8003588:	4313      	orrs	r3, r2
 800358a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800358c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003590:	f607 21a8 	addw	r1, r7, #2728	; 0xaa8
 8003594:	e9c1 2300 	strd	r2, r3, [r1]
            Eku ^= Du;
 8003598:	f507 631f 	add.w	r3, r7, #2544	; 0x9f0
 800359c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035a0:	f607 2368 	addw	r3, r7, #2664	; 0xa68
 80035a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a8:	ea80 0c02 	eor.w	ip, r0, r2
 80035ac:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 80035b0:	404b      	eors	r3, r1
 80035b2:	657b      	str	r3, [r7, #84]	; 0x54
 80035b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80035b8:	f507 611f 	add.w	r1, r7, #2544	; 0x9f0
 80035bc:	e9c1 2300 	strd	r2, r3, [r1]
            BCi = ROL(Eku, 39);
 80035c0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80035c4:	f5a3 70ca 	sub.w	r0, r3, #404	; 0x194
 80035c8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80035cc:	f5a3 71cc 	sub.w	r1, r3, #408	; 0x198
 80035d0:	6803      	ldr	r3, [r0, #0]
 80035d2:	01da      	lsls	r2, r3, #7
 80035d4:	680b      	ldr	r3, [r1, #0]
 80035d6:	0e5b      	lsrs	r3, r3, #25
 80035d8:	4313      	orrs	r3, r2
 80035da:	64bb      	str	r3, [r7, #72]	; 0x48
 80035dc:	680b      	ldr	r3, [r1, #0]
 80035de:	01da      	lsls	r2, r3, #7
 80035e0:	6803      	ldr	r3, [r0, #0]
 80035e2:	0e5b      	lsrs	r3, r3, #25
 80035e4:	4313      	orrs	r3, r2
 80035e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80035ec:	f507 612a 	add.w	r1, r7, #2720	; 0xaa0
 80035f0:	e9c1 2300 	strd	r2, r3, [r1]
            Ema ^= Da;
 80035f4:	f607 13e8 	addw	r3, r7, #2536	; 0x9e8
 80035f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80035fc:	f607 2388 	addw	r3, r7, #2696	; 0xa88
 8003600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003604:	ea80 0c02 	eor.w	ip, r0, r2
 8003608:	f8c7 c040 	str.w	ip, [r7, #64]	; 0x40
 800360c:	404b      	eors	r3, r1
 800360e:	647b      	str	r3, [r7, #68]	; 0x44
 8003610:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003614:	f607 11e8 	addw	r1, r7, #2536	; 0x9e8
 8003618:	e9c1 2300 	strd	r2, r3, [r1]
            BCo = ROL(Ema, 41);
 800361c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003620:	f5a3 70ce 	sub.w	r0, r3, #412	; 0x19c
 8003624:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003628:	f5a3 71d0 	sub.w	r1, r3, #416	; 0x1a0
 800362c:	6803      	ldr	r3, [r0, #0]
 800362e:	025a      	lsls	r2, r3, #9
 8003630:	680b      	ldr	r3, [r1, #0]
 8003632:	0ddb      	lsrs	r3, r3, #23
 8003634:	4313      	orrs	r3, r2
 8003636:	63bb      	str	r3, [r7, #56]	; 0x38
 8003638:	680b      	ldr	r3, [r1, #0]
 800363a:	025a      	lsls	r2, r3, #9
 800363c:	6803      	ldr	r3, [r0, #0]
 800363e:	0ddb      	lsrs	r3, r3, #23
 8003640:	4313      	orrs	r3, r2
 8003642:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003644:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003648:	f607 2198 	addw	r1, r7, #2712	; 0xa98
 800364c:	e9c1 2300 	strd	r2, r3, [r1]
            Ese ^= De;
 8003650:	f607 13b8 	addw	r3, r7, #2488	; 0x9b8
 8003654:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003658:	f507 6328 	add.w	r3, r7, #2688	; 0xa80
 800365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003660:	ea80 0c02 	eor.w	ip, r0, r2
 8003664:	f8c7 c030 	str.w	ip, [r7, #48]	; 0x30
 8003668:	404b      	eors	r3, r1
 800366a:	637b      	str	r3, [r7, #52]	; 0x34
 800366c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003670:	f607 11b8 	addw	r1, r7, #2488	; 0x9b8
 8003674:	e9c1 2300 	strd	r2, r3, [r1]
            BCu = ROL(Ese, 2);
 8003678:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800367c:	f5a3 70e8 	sub.w	r0, r3, #464	; 0x1d0
 8003680:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003684:	f5a3 71e6 	sub.w	r1, r3, #460	; 0x1cc
 8003688:	6803      	ldr	r3, [r0, #0]
 800368a:	0f9a      	lsrs	r2, r3, #30
 800368c:	680b      	ldr	r3, [r1, #0]
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4313      	orrs	r3, r2
 8003692:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003694:	680b      	ldr	r3, [r1, #0]
 8003696:	0f9a      	lsrs	r2, r3, #30
 8003698:	6803      	ldr	r3, [r0, #0]
 800369a:	009b      	lsls	r3, r3, #2
 800369c:	4313      	orrs	r3, r2
 800369e:	62bb      	str	r3, [r7, #40]	; 0x28
 80036a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036a4:	f507 6129 	add.w	r1, r7, #2704	; 0xa90
 80036a8:	e9c1 2300 	strd	r2, r3, [r1]
            Asa =   BCa ^((~BCe)&  BCi );
 80036ac:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 80036b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b4:	43d1      	mvns	r1, r2
 80036b6:	f8c7 1580 	str.w	r1, [r7, #1408]	; 0x580
 80036ba:	43db      	mvns	r3, r3
 80036bc:	f8c7 3584 	str.w	r3, [r7, #1412]	; 0x584
 80036c0:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80036c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c8:	f507 61b0 	add.w	r1, r7, #1408	; 0x580
 80036cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80036d0:	4684      	mov	ip, r0
 80036d2:	ea0c 0c02 	and.w	ip, ip, r2
 80036d6:	f8c7 c578 	str.w	ip, [r7, #1400]	; 0x578
 80036da:	400b      	ands	r3, r1
 80036dc:	f8c7 357c 	str.w	r3, [r7, #1404]	; 0x57c
 80036e0:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80036e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e8:	f507 61af 	add.w	r1, r7, #1400	; 0x578
 80036ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80036f0:	4684      	mov	ip, r0
 80036f2:	ea82 0c0c 	eor.w	ip, r2, ip
 80036f6:	f8c7 c020 	str.w	ip, [r7, #32]
 80036fa:	404b      	eors	r3, r1
 80036fc:	627b      	str	r3, [r7, #36]	; 0x24
 80036fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003702:	f607 21d8 	addw	r1, r7, #2776	; 0xad8
 8003706:	e9c1 2300 	strd	r2, r3, [r1]
            Ase =   BCe ^((~BCi)&  BCo );
 800370a:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 800370e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003712:	43d1      	mvns	r1, r2
 8003714:	f8c7 1570 	str.w	r1, [r7, #1392]	; 0x570
 8003718:	43db      	mvns	r3, r3
 800371a:	f8c7 3574 	str.w	r3, [r7, #1396]	; 0x574
 800371e:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 8003722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003726:	f507 61ae 	add.w	r1, r7, #1392	; 0x570
 800372a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800372e:	4684      	mov	ip, r0
 8003730:	ea0c 0c02 	and.w	ip, ip, r2
 8003734:	f8c7 c568 	str.w	ip, [r7, #1384]	; 0x568
 8003738:	400b      	ands	r3, r1
 800373a:	f8c7 356c 	str.w	r3, [r7, #1388]	; 0x56c
 800373e:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8003742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003746:	f507 61ad 	add.w	r1, r7, #1384	; 0x568
 800374a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800374e:	4684      	mov	ip, r0
 8003750:	ea82 0c0c 	eor.w	ip, r2, ip
 8003754:	f8c7 c018 	str.w	ip, [r7, #24]
 8003758:	404b      	eors	r3, r1
 800375a:	61fb      	str	r3, [r7, #28]
 800375c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003760:	f507 612d 	add.w	r1, r7, #2768	; 0xad0
 8003764:	e9c1 2300 	strd	r2, r3, [r1]
            Asi =   BCi ^((~BCo)&  BCu );
 8003768:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 800376c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003770:	43d1      	mvns	r1, r2
 8003772:	f8c7 1560 	str.w	r1, [r7, #1376]	; 0x560
 8003776:	43db      	mvns	r3, r3
 8003778:	f8c7 3564 	str.w	r3, [r7, #1380]	; 0x564
 800377c:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8003780:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003784:	f507 61ac 	add.w	r1, r7, #1376	; 0x560
 8003788:	e9d1 0100 	ldrd	r0, r1, [r1]
 800378c:	4684      	mov	ip, r0
 800378e:	ea0c 0c02 	and.w	ip, ip, r2
 8003792:	f8c7 c558 	str.w	ip, [r7, #1368]	; 0x558
 8003796:	400b      	ands	r3, r1
 8003798:	f8c7 355c 	str.w	r3, [r7, #1372]	; 0x55c
 800379c:	f507 632a 	add.w	r3, r7, #2720	; 0xaa0
 80037a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a4:	f507 61ab 	add.w	r1, r7, #1368	; 0x558
 80037a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80037ac:	4684      	mov	ip, r0
 80037ae:	ea82 0c0c 	eor.w	ip, r2, ip
 80037b2:	f8c7 c010 	str.w	ip, [r7, #16]
 80037b6:	404b      	eors	r3, r1
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80037be:	f607 21c8 	addw	r1, r7, #2760	; 0xac8
 80037c2:	e9c1 2300 	strd	r2, r3, [r1]
            Aso =   BCo ^((~BCu)&  BCa );
 80037c6:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 80037ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ce:	43d1      	mvns	r1, r2
 80037d0:	f8c7 1550 	str.w	r1, [r7, #1360]	; 0x550
 80037d4:	43db      	mvns	r3, r3
 80037d6:	f8c7 3554 	str.w	r3, [r7, #1364]	; 0x554
 80037da:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 80037de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e2:	f507 61aa 	add.w	r1, r7, #1360	; 0x550
 80037e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80037ea:	4684      	mov	ip, r0
 80037ec:	ea0c 0a02 	and.w	sl, ip, r2
 80037f0:	ea01 0b03 	and.w	fp, r1, r3
 80037f4:	f607 2398 	addw	r3, r7, #2712	; 0xa98
 80037f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037fc:	ea82 010a 	eor.w	r1, r2, sl
 8003800:	60b9      	str	r1, [r7, #8]
 8003802:	ea83 030b 	eor.w	r3, r3, fp
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800380c:	f507 612c 	add.w	r1, r7, #2752	; 0xac0
 8003810:	e9c1 2300 	strd	r2, r3, [r1]
            Asu =   BCu ^((~BCa)&  BCe );
 8003814:	f507 632b 	add.w	r3, r7, #2736	; 0xab0
 8003818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381c:	ea6f 0802 	mvn.w	r8, r2
 8003820:	ea6f 0903 	mvn.w	r9, r3
 8003824:	f607 23a8 	addw	r3, r7, #2728	; 0xaa8
 8003828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382c:	ea08 0402 	and.w	r4, r8, r2
 8003830:	ea09 0503 	and.w	r5, r9, r3
 8003834:	f507 6329 	add.w	r3, r7, #2704	; 0xa90
 8003838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383c:	ea82 0104 	eor.w	r1, r2, r4
 8003840:	6039      	str	r1, [r7, #0]
 8003842:	406b      	eors	r3, r5
 8003844:	607b      	str	r3, [r7, #4]
 8003846:	e9d7 2300 	ldrd	r2, r3, [r7]
 800384a:	f607 21b8 	addw	r1, r7, #2744	; 0xab8
 800384e:	e9c1 2300 	strd	r2, r3, [r1]
        for( round = 0; round < NROUNDS; round += 2 )
 8003852:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 8003856:	3302      	adds	r3, #2
 8003858:	f8c7 3b84 	str.w	r3, [r7, #2948]	; 0xb84
 800385c:	f8d7 3b84 	ldr.w	r3, [r7, #2948]	; 0xb84
 8003860:	2b17      	cmp	r3, #23
 8003862:	f77d a8eb 	ble.w	8000a3c <KeccakF1600_StatePermute+0x244>
        }

        //copyToState(state, A)
        state[ 0] = Aba;
 8003866:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800386a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800386e:	6819      	ldr	r1, [r3, #0]
 8003870:	f607 3378 	addw	r3, r7, #2936	; 0xb78
 8003874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003878:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 1] = Abe;
 800387c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003880:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f103 0108 	add.w	r1, r3, #8
 800388a:	f507 6337 	add.w	r3, r7, #2928	; 0xb70
 800388e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003892:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 2] = Abi;
 8003896:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800389a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f103 0110 	add.w	r1, r3, #16
 80038a4:	f607 3368 	addw	r3, r7, #2920	; 0xb68
 80038a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ac:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 3] = Abo;
 80038b0:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80038b4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f103 0118 	add.w	r1, r3, #24
 80038be:	f507 6336 	add.w	r3, r7, #2912	; 0xb60
 80038c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c6:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 4] = Abu;
 80038ca:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80038ce:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f103 0120 	add.w	r1, r3, #32
 80038d8:	f607 3358 	addw	r3, r7, #2904	; 0xb58
 80038dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e0:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 5] = Aga;
 80038e4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80038e8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f103 0128 	add.w	r1, r3, #40	; 0x28
 80038f2:	f507 6335 	add.w	r3, r7, #2896	; 0xb50
 80038f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038fa:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 6] = Age;
 80038fe:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003902:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800390c:	f607 3348 	addw	r3, r7, #2888	; 0xb48
 8003910:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003914:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 7] = Agi;
 8003918:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800391c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8003926:	f507 6334 	add.w	r3, r7, #2880	; 0xb40
 800392a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392e:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 8] = Ago;
 8003932:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003936:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8003940:	f607 3338 	addw	r3, r7, #2872	; 0xb38
 8003944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003948:	e9c1 2300 	strd	r2, r3, [r1]
        state[ 9] = Agu;
 800394c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003950:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800395a:	f507 6333 	add.w	r3, r7, #2864	; 0xb30
 800395e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003962:	e9c1 2300 	strd	r2, r3, [r1]
        state[10] = Aka;
 8003966:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800396a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f103 0150 	add.w	r1, r3, #80	; 0x50
 8003974:	f607 3328 	addw	r3, r7, #2856	; 0xb28
 8003978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800397c:	e9c1 2300 	strd	r2, r3, [r1]
        state[11] = Ake;
 8003980:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003984:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f103 0158 	add.w	r1, r3, #88	; 0x58
 800398e:	f507 6332 	add.w	r3, r7, #2848	; 0xb20
 8003992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003996:	e9c1 2300 	strd	r2, r3, [r1]
        state[12] = Aki;
 800399a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 800399e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f103 0160 	add.w	r1, r3, #96	; 0x60
 80039a8:	f607 3318 	addw	r3, r7, #2840	; 0xb18
 80039ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b0:	e9c1 2300 	strd	r2, r3, [r1]
        state[13] = Ako;
 80039b4:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80039b8:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f103 0168 	add.w	r1, r3, #104	; 0x68
 80039c2:	f507 6331 	add.w	r3, r7, #2832	; 0xb10
 80039c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ca:	e9c1 2300 	strd	r2, r3, [r1]
        state[14] = Aku;
 80039ce:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80039d2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f103 0170 	add.w	r1, r3, #112	; 0x70
 80039dc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80039e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e4:	e9c1 2300 	strd	r2, r3, [r1]
        state[15] = Ama;
 80039e8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 80039ec:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f103 0178 	add.w	r1, r3, #120	; 0x78
 80039f6:	f507 6330 	add.w	r3, r7, #2816	; 0xb00
 80039fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fe:	e9c1 2300 	strd	r2, r3, [r1]
        state[16] = Ame;
 8003a02:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003a06:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f103 0180 	add.w	r1, r3, #128	; 0x80
 8003a10:	f607 23f8 	addw	r3, r7, #2808	; 0xaf8
 8003a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a18:	e9c1 2300 	strd	r2, r3, [r1]
        state[17] = Ami;
 8003a1c:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003a20:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f103 0188 	add.w	r1, r3, #136	; 0x88
 8003a2a:	f507 632f 	add.w	r3, r7, #2800	; 0xaf0
 8003a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a32:	e9c1 2300 	strd	r2, r3, [r1]
        state[18] = Amo;
 8003a36:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003a3a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f103 0190 	add.w	r1, r3, #144	; 0x90
 8003a44:	f607 23e8 	addw	r3, r7, #2792	; 0xae8
 8003a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4c:	e9c1 2300 	strd	r2, r3, [r1]
        state[19] = Amu;
 8003a50:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003a54:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f103 0198 	add.w	r1, r3, #152	; 0x98
 8003a5e:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8003a62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a66:	e9c1 2300 	strd	r2, r3, [r1]
        state[20] = Asa;
 8003a6a:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003a6e:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f103 01a0 	add.w	r1, r3, #160	; 0xa0
 8003a78:	f607 23d8 	addw	r3, r7, #2776	; 0xad8
 8003a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a80:	e9c1 2300 	strd	r2, r3, [r1]
        state[21] = Ase;
 8003a84:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003a88:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f103 01a8 	add.w	r1, r3, #168	; 0xa8
 8003a92:	f507 632d 	add.w	r3, r7, #2768	; 0xad0
 8003a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a9a:	e9c1 2300 	strd	r2, r3, [r1]
        state[22] = Asi;
 8003a9e:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003aa2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f103 01b0 	add.w	r1, r3, #176	; 0xb0
 8003aac:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 8003ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab4:	e9c1 2300 	strd	r2, r3, [r1]
        state[23] = Aso;
 8003ab8:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003abc:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f103 01b8 	add.w	r1, r3, #184	; 0xb8
 8003ac6:	f507 632c 	add.w	r3, r7, #2752	; 0xac0
 8003aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ace:	e9c1 2300 	strd	r2, r3, [r1]
        state[24] = Asu;
 8003ad2:	f607 3388 	addw	r3, r7, #2952	; 0xb88
 8003ad6:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f103 01c0 	add.w	r1, r3, #192	; 0xc0
 8003ae0:	f607 23b8 	addw	r3, r7, #2744	; 0xab8
 8003ae4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae8:	e9c1 2300 	strd	r2, r3, [r1]
}
 8003aec:	bf00      	nop
 8003aee:	f607 378c 	addw	r7, r7, #2956	; 0xb8c
 8003af2:	46bd      	mov	sp, r7
 8003af4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop

08003afc <keccak_init>:
* Description: Initializes the Keccak state.
*
* Arguments:   - keccak_state *state: pointer to Keccak state
**************************************************/
static void keccak_init(keccak_state *state)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  unsigned int i;
  for(i=0;i<25;i++)
 8003b04:	2300      	movs	r3, #0
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	e00c      	b.n	8003b24 <keccak_init+0x28>
    state->s[i] = 0;
 8003b0a:	687a      	ldr	r2, [r7, #4]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	00db      	lsls	r3, r3, #3
 8003b10:	18d1      	adds	r1, r2, r3
 8003b12:	f04f 0200 	mov.w	r2, #0
 8003b16:	f04f 0300 	mov.w	r3, #0
 8003b1a:	e9c1 2300 	strd	r2, r3, [r1]
  for(i=0;i<25;i++)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	3301      	adds	r3, #1
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2b18      	cmp	r3, #24
 8003b28:	d9ef      	bls.n	8003b0a <keccak_init+0xe>
  state->pos = 0;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8003b32:	bf00      	nop
 8003b34:	3714      	adds	r7, #20
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bc80      	pop	{r7}
 8003b3a:	4770      	bx	lr

08003b3c <keccak_absorb>:
static unsigned int keccak_absorb(uint64_t s[25],
                                  unsigned int r,
                                  unsigned int pos,
                                  const uint8_t *m,
                                  size_t mlen)
{
 8003b3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b40:	b08e      	sub	sp, #56	; 0x38
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6278      	str	r0, [r7, #36]	; 0x24
 8003b46:	6239      	str	r1, [r7, #32]
 8003b48:	61fa      	str	r2, [r7, #28]
 8003b4a:	61bb      	str	r3, [r7, #24]
  unsigned int i;
  uint8_t t[8] = {0};
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b50:	2300      	movs	r3, #0
 8003b52:	633b      	str	r3, [r7, #48]	; 0x30

  if(pos & 7) {
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d039      	beq.n	8003bd2 <keccak_absorb+0x96>
    i = pos & 7;
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	637b      	str	r3, [r7, #52]	; 0x34
    while(i < 8 && mlen > 0) {
 8003b66:	e011      	b.n	8003b8c <keccak_absorb+0x50>
      t[i++] = *m++;
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	1c53      	adds	r3, r2, #1
 8003b6c:	61bb      	str	r3, [r7, #24]
 8003b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b70:	1c59      	adds	r1, r3, #1
 8003b72:	6379      	str	r1, [r7, #52]	; 0x34
 8003b74:	7812      	ldrb	r2, [r2, #0]
 8003b76:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003b7a:	440b      	add	r3, r1
 8003b7c:	f803 2c0c 	strb.w	r2, [r3, #-12]
      mlen--;
 8003b80:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b82:	3b01      	subs	r3, #1
 8003b84:	65bb      	str	r3, [r7, #88]	; 0x58
      pos++;
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	3301      	adds	r3, #1
 8003b8a:	61fb      	str	r3, [r7, #28]
    while(i < 8 && mlen > 0) {
 8003b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b8e:	2b07      	cmp	r3, #7
 8003b90:	d802      	bhi.n	8003b98 <keccak_absorb+0x5c>
 8003b92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1e7      	bne.n	8003b68 <keccak_absorb+0x2c>
    }
    s[(pos-i)/8] ^= load64(t);
 8003b98:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f7fc fdc1 	bl	8000724 <load64>
 8003ba2:	4604      	mov	r4, r0
 8003ba4:	460d      	mov	r5, r1
 8003ba6:	69fa      	ldr	r2, [r7, #28]
 8003ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003baa:	1ad3      	subs	r3, r2, r3
 8003bac:	f023 0307 	bic.w	r3, r3, #7
 8003bb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bb2:	4413      	add	r3, r2
 8003bb4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003bb8:	69fa      	ldr	r2, [r7, #28]
 8003bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bbc:	1ad3      	subs	r3, r2, r3
 8003bbe:	f023 0207 	bic.w	r2, r3, #7
 8003bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bc4:	4413      	add	r3, r2
 8003bc6:	ea84 0800 	eor.w	r8, r4, r0
 8003bca:	ea85 0901 	eor.w	r9, r5, r1
 8003bce:	e9c3 8900 	strd	r8, r9, [r3]
  }

  if(pos && mlen >= r-pos) {
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d075      	beq.n	8003cc4 <keccak_absorb+0x188>
 8003bd8:	6a3a      	ldr	r2, [r7, #32]
 8003bda:	69fb      	ldr	r3, [r7, #28]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d36f      	bcc.n	8003cc4 <keccak_absorb+0x188>
    for(i=0;i<(r-pos)/8;i++)
 8003be4:	2300      	movs	r3, #0
 8003be6:	637b      	str	r3, [r7, #52]	; 0x34
 8003be8:	e023      	b.n	8003c32 <keccak_absorb+0xf6>
      s[pos/8+i] ^= load64(m+8*i);
 8003bea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fc fd96 	bl	8000724 <load64>
 8003bf8:	4680      	mov	r8, r0
 8003bfa:	4689      	mov	r9, r1
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	08dc      	lsrs	r4, r3, #3
 8003c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c02:	4423      	add	r3, r4
 8003c04:	00db      	lsls	r3, r3, #3
 8003c06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c08:	4413      	add	r3, r2
 8003c0a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c10:	4423      	add	r3, r4
 8003c12:	00db      	lsls	r3, r3, #3
 8003c14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c16:	4413      	add	r3, r2
 8003c18:	ea88 0200 	eor.w	r2, r8, r0
 8003c1c:	613a      	str	r2, [r7, #16]
 8003c1e:	ea89 0201 	eor.w	r2, r9, r1
 8003c22:	617a      	str	r2, [r7, #20]
 8003c24:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003c28:	e9c3 1200 	strd	r1, r2, [r3]
    for(i=0;i<(r-pos)/8;i++)
 8003c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c2e:	3301      	adds	r3, #1
 8003c30:	637b      	str	r3, [r7, #52]	; 0x34
 8003c32:	6a3a      	ldr	r2, [r7, #32]
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	08db      	lsrs	r3, r3, #3
 8003c3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d3d4      	bcc.n	8003bea <keccak_absorb+0xae>
    m += r-pos;
 8003c40:	6a3a      	ldr	r2, [r7, #32]
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	4413      	add	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]
    mlen -= r-pos;
 8003c4c:	69fa      	ldr	r2, [r7, #28]
 8003c4e:	6a3b      	ldr	r3, [r7, #32]
 8003c50:	1ad3      	subs	r3, r2, r3
 8003c52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c54:	4413      	add	r3, r2
 8003c56:	65bb      	str	r3, [r7, #88]	; 0x58
    pos = 0;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	61fb      	str	r3, [r7, #28]
    KeccakF1600_StatePermute(s);
 8003c5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003c5e:	f7fc fdcb 	bl	80007f8 <KeccakF1600_StatePermute>
  }

  while(mlen >= r) {
 8003c62:	e02f      	b.n	8003cc4 <keccak_absorb+0x188>
    for(i=0;i<r/8;i++)
 8003c64:	2300      	movs	r3, #0
 8003c66:	637b      	str	r3, [r7, #52]	; 0x34
 8003c68:	e01c      	b.n	8003ca4 <keccak_absorb+0x168>
      s[i] ^= load64(m+8*i);
 8003c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c6c:	00db      	lsls	r3, r3, #3
 8003c6e:	69ba      	ldr	r2, [r7, #24]
 8003c70:	4413      	add	r3, r2
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fc fd56 	bl	8000724 <load64>
 8003c78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c7a:	00db      	lsls	r3, r3, #3
 8003c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c7e:	4413      	add	r3, r2
 8003c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c84:	6b7c      	ldr	r4, [r7, #52]	; 0x34
 8003c86:	00e4      	lsls	r4, r4, #3
 8003c88:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8003c8a:	442c      	add	r4, r5
 8003c8c:	ea80 0502 	eor.w	r5, r0, r2
 8003c90:	60bd      	str	r5, [r7, #8]
 8003c92:	404b      	eors	r3, r1
 8003c94:	60fb      	str	r3, [r7, #12]
 8003c96:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003c9a:	e9c4 2300 	strd	r2, r3, [r4]
    for(i=0;i<r/8;i++)
 8003c9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	637b      	str	r3, [r7, #52]	; 0x34
 8003ca4:	6a3b      	ldr	r3, [r7, #32]
 8003ca6:	08db      	lsrs	r3, r3, #3
 8003ca8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d3dd      	bcc.n	8003c6a <keccak_absorb+0x12e>
    m += r;
 8003cae:	69ba      	ldr	r2, [r7, #24]
 8003cb0:	6a3b      	ldr	r3, [r7, #32]
 8003cb2:	4413      	add	r3, r2
 8003cb4:	61bb      	str	r3, [r7, #24]
    mlen -= r;
 8003cb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cb8:	6a3b      	ldr	r3, [r7, #32]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	65bb      	str	r3, [r7, #88]	; 0x58
    KeccakF1600_StatePermute(s);
 8003cbe:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003cc0:	f7fc fd9a 	bl	80007f8 <KeccakF1600_StatePermute>
  while(mlen >= r) {
 8003cc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cc6:	6a3b      	ldr	r3, [r7, #32]
 8003cc8:	429a      	cmp	r2, r3
 8003cca:	d2cb      	bcs.n	8003c64 <keccak_absorb+0x128>
  }

  for(i=0;i<mlen/8;i++)
 8003ccc:	2300      	movs	r3, #0
 8003cce:	637b      	str	r3, [r7, #52]	; 0x34
 8003cd0:	e020      	b.n	8003d14 <keccak_absorb+0x1d8>
    s[pos/8+i] ^= load64(m+8*i);
 8003cd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd4:	00db      	lsls	r3, r3, #3
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	4413      	add	r3, r2
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fc fd22 	bl	8000724 <load64>
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	08dc      	lsrs	r4, r3, #3
 8003ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce6:	4423      	add	r3, r4
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cec:	4413      	add	r3, r2
 8003cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf2:	6b7d      	ldr	r5, [r7, #52]	; 0x34
 8003cf4:	442c      	add	r4, r5
 8003cf6:	00e4      	lsls	r4, r4, #3
 8003cf8:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8003cfa:	442c      	add	r4, r5
 8003cfc:	ea80 0502 	eor.w	r5, r0, r2
 8003d00:	603d      	str	r5, [r7, #0]
 8003d02:	404b      	eors	r3, r1
 8003d04:	607b      	str	r3, [r7, #4]
 8003d06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d0a:	e9c4 2300 	strd	r2, r3, [r4]
  for(i=0;i<mlen/8;i++)
 8003d0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d10:	3301      	adds	r3, #1
 8003d12:	637b      	str	r3, [r7, #52]	; 0x34
 8003d14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d16:	08db      	lsrs	r3, r3, #3
 8003d18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d3d9      	bcc.n	8003cd2 <keccak_absorb+0x196>
  m += 8*i;
 8003d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	4413      	add	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
  mlen -= 8*i;
 8003d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d2a:	00db      	lsls	r3, r3, #3
 8003d2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003d2e:	1ad3      	subs	r3, r2, r3
 8003d30:	65bb      	str	r3, [r7, #88]	; 0x58
  pos += 8*i;
 8003d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	69fa      	ldr	r2, [r7, #28]
 8003d38:	4413      	add	r3, r2
 8003d3a:	61fb      	str	r3, [r7, #28]

  if(mlen) {
 8003d3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d03d      	beq.n	8003dbe <keccak_absorb+0x282>
    for(i=0;i<8;i++)
 8003d42:	2300      	movs	r3, #0
 8003d44:	637b      	str	r3, [r7, #52]	; 0x34
 8003d46:	e008      	b.n	8003d5a <keccak_absorb+0x21e>
      t[i] = 0;
 8003d48:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d4e:	4413      	add	r3, r2
 8003d50:	2200      	movs	r2, #0
 8003d52:	701a      	strb	r2, [r3, #0]
    for(i=0;i<8;i++)
 8003d54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d56:	3301      	adds	r3, #1
 8003d58:	637b      	str	r3, [r7, #52]	; 0x34
 8003d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d5c:	2b07      	cmp	r3, #7
 8003d5e:	d9f3      	bls.n	8003d48 <keccak_absorb+0x20c>
    for(i=0;i<mlen;i++)
 8003d60:	2300      	movs	r3, #0
 8003d62:	637b      	str	r3, [r7, #52]	; 0x34
 8003d64:	e00c      	b.n	8003d80 <keccak_absorb+0x244>
      t[i] = m[i];
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d6a:	4413      	add	r3, r2
 8003d6c:	7819      	ldrb	r1, [r3, #0]
 8003d6e:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8003d72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d74:	4413      	add	r3, r2
 8003d76:	460a      	mov	r2, r1
 8003d78:	701a      	strb	r2, [r3, #0]
    for(i=0;i<mlen;i++)
 8003d7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d7c:	3301      	adds	r3, #1
 8003d7e:	637b      	str	r3, [r7, #52]	; 0x34
 8003d80:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003d82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d3ee      	bcc.n	8003d66 <keccak_absorb+0x22a>
    s[pos/8] ^= load64(t);
 8003d88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fc fcc9 	bl	8000724 <load64>
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	f023 0307 	bic.w	r3, r3, #7
 8003d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d9a:	4413      	add	r3, r2
 8003d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da0:	69fc      	ldr	r4, [r7, #28]
 8003da2:	f024 0407 	bic.w	r4, r4, #7
 8003da6:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8003da8:	442c      	add	r4, r5
 8003daa:	ea80 0a02 	eor.w	sl, r0, r2
 8003dae:	ea81 0b03 	eor.w	fp, r1, r3
 8003db2:	e9c4 ab00 	strd	sl, fp, [r4]
    pos += mlen;
 8003db6:	69fa      	ldr	r2, [r7, #28]
 8003db8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003dba:	4413      	add	r3, r2
 8003dbc:	61fb      	str	r3, [r7, #28]
  }

  return pos;
 8003dbe:	69fb      	ldr	r3, [r7, #28]
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3738      	adds	r7, #56	; 0x38
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003dca <keccak_finalize>:
*              - unsigned int r:   rate in bytes (e.g., 168 for SHAKE128)
*              - unsigned int pos: position in current block to be absorbed
*              - uint8_t p:        domain separation byte
**************************************************/
static void keccak_finalize(uint64_t s[25], unsigned int r, unsigned int pos, uint8_t p)
{
 8003dca:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003dce:	b088      	sub	sp, #32
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6178      	str	r0, [r7, #20]
 8003dd4:	6139      	str	r1, [r7, #16]
 8003dd6:	60fa      	str	r2, [r7, #12]
 8003dd8:	72fb      	strb	r3, [r7, #11]
  unsigned int i,j;

  i = pos >> 3;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	08db      	lsrs	r3, r3, #3
 8003dde:	61fb      	str	r3, [r7, #28]
  j = pos & 7;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	61bb      	str	r3, [r7, #24]
  s[i] ^= (uint64_t)p << 8*j;
 8003de8:	69fb      	ldr	r3, [r7, #28]
 8003dea:	00db      	lsls	r3, r3, #3
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	4413      	add	r3, r2
 8003df0:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003df4:	7afb      	ldrb	r3, [r7, #11]
 8003df6:	2200      	movs	r2, #0
 8003df8:	4698      	mov	r8, r3
 8003dfa:	4691      	mov	r9, r2
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	00db      	lsls	r3, r3, #3
 8003e00:	f1a3 0620 	sub.w	r6, r3, #32
 8003e04:	f1c3 0220 	rsb	r2, r3, #32
 8003e08:	fa09 f503 	lsl.w	r5, r9, r3
 8003e0c:	fa08 f606 	lsl.w	r6, r8, r6
 8003e10:	4335      	orrs	r5, r6
 8003e12:	fa28 f202 	lsr.w	r2, r8, r2
 8003e16:	4315      	orrs	r5, r2
 8003e18:	fa08 f403 	lsl.w	r4, r8, r3
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	697a      	ldr	r2, [r7, #20]
 8003e22:	4413      	add	r3, r2
 8003e24:	ea80 0a04 	eor.w	sl, r0, r4
 8003e28:	ea81 0b05 	eor.w	fp, r1, r5
 8003e2c:	e9c3 ab00 	strd	sl, fp, [r3]
  s[r/8-1] ^= 1ULL << 63;
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f023 0307 	bic.w	r3, r3, #7
 8003e36:	3b08      	subs	r3, #8
 8003e38:	697a      	ldr	r2, [r7, #20]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e40:	6939      	ldr	r1, [r7, #16]
 8003e42:	f021 0107 	bic.w	r1, r1, #7
 8003e46:	3908      	subs	r1, #8
 8003e48:	6978      	ldr	r0, [r7, #20]
 8003e4a:	4401      	add	r1, r0
 8003e4c:	603a      	str	r2, [r7, #0]
 8003e4e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003e52:	607b      	str	r3, [r7, #4]
 8003e54:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003e58:	e9c1 3400 	strd	r3, r4, [r1]
}
 8003e5c:	bf00      	nop
 8003e5e:	3720      	adds	r7, #32
 8003e60:	46bd      	mov	sp, r7
 8003e62:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003e66:	4770      	bx	lr

08003e68 <keccak_squeezeblocks>:
**************************************************/
static void keccak_squeezeblocks(uint8_t *out,
                                 size_t nblocks,
                                 uint64_t s[25],
                                 unsigned int r)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
 8003e74:	603b      	str	r3, [r7, #0]
  unsigned int i;

  while(nblocks > 0) {
 8003e76:	e021      	b.n	8003ebc <keccak_squeezeblocks+0x54>
    KeccakF1600_StatePermute(s);
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7fc fcbd 	bl	80007f8 <KeccakF1600_StatePermute>
    for(i=0;i<r/8;i++)
 8003e7e:	2300      	movs	r3, #0
 8003e80:	617b      	str	r3, [r7, #20]
 8003e82:	e00f      	b.n	8003ea4 <keccak_squeezeblocks+0x3c>
      store64(out + 8*i, s[i]);
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	18d1      	adds	r1, r2, r3
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	00db      	lsls	r3, r3, #3
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	4413      	add	r3, r2
 8003e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e98:	4608      	mov	r0, r1
 8003e9a:	f7fc fc80 	bl	800079e <store64>
    for(i=0;i<r/8;i++)
 8003e9e:	697b      	ldr	r3, [r7, #20]
 8003ea0:	3301      	adds	r3, #1
 8003ea2:	617b      	str	r3, [r7, #20]
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	08db      	lsrs	r3, r3, #3
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	429a      	cmp	r2, r3
 8003eac:	d3ea      	bcc.n	8003e84 <keccak_squeezeblocks+0x1c>
    out += r;
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	60fb      	str	r3, [r7, #12]
    nblocks--;
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	3b01      	subs	r3, #1
 8003eba:	60bb      	str	r3, [r7, #8]
  while(nblocks > 0) {
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1da      	bne.n	8003e78 <keccak_squeezeblocks+0x10>
  }
}
 8003ec2:	bf00      	nop
 8003ec4:	bf00      	nop
 8003ec6:	3718      	adds	r7, #24
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <pqcrystals_fips202_ref_shake256_init>:
*
* Arguments:   - keccak_state *state: pointer to (uninitialized)
*                                     Keccak state
**************************************************/
void shake256_init(keccak_state *state)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  keccak_init(state);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7ff fe11 	bl	8003afc <keccak_init>
}
 8003eda:	bf00      	nop
 8003edc:	3708      	adds	r7, #8
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <pqcrystals_fips202_ref_shake256_absorb>:
*                                     Keccak state
*              - const uint8_t *in:   pointer to input to be absorbed into s
*              - size_t inlen:        length of input in bytes
**************************************************/
void shake256_absorb(keccak_state *state, const uint8_t *in, size_t inlen)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b086      	sub	sp, #24
 8003ee6:	af02      	add	r7, sp, #8
 8003ee8:	60f8      	str	r0, [r7, #12]
 8003eea:	60b9      	str	r1, [r7, #8]
 8003eec:	607a      	str	r2, [r7, #4]
  state->pos = keccak_absorb(state->s, SHAKE256_RATE, state->pos, in, inlen);
 8003eee:	68f8      	ldr	r0, [r7, #12]
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	2188      	movs	r1, #136	; 0x88
 8003efe:	f7ff fe1d 	bl	8003b3c <keccak_absorb>
 8003f02:	4602      	mov	r2, r0
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8003f0a:	bf00      	nop
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}

08003f12 <pqcrystals_fips202_ref_shake256_finalize>:
* Description: Finalize absorb step of the SHAKE256 XOF.
*
* Arguments:   - keccak_state *state: pointer to Keccak state
**************************************************/
void shake256_finalize(keccak_state *state)
{
 8003f12:	b580      	push	{r7, lr}
 8003f14:	b082      	sub	sp, #8
 8003f16:	af00      	add	r7, sp, #0
 8003f18:	6078      	str	r0, [r7, #4]
  keccak_finalize(state->s, SHAKE256_RATE, state->pos, 0x1F);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
 8003f22:	231f      	movs	r3, #31
 8003f24:	2188      	movs	r1, #136	; 0x88
 8003f26:	f7ff ff50 	bl	8003dca <keccak_finalize>
  state->pos = 0;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8003f32:	bf00      	nop
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}

08003f3a <pqcrystals_fips202_ref_shake256_squeezeblocks>:
*              - size_t nblocks:  number of blocks to be squeezed
*                                 (written to output)
*              - keccak_state *s: pointer to input/output Keccak state
**************************************************/
void shake256_squeezeblocks(uint8_t *out, size_t nblocks, keccak_state *state)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b084      	sub	sp, #16
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	60f8      	str	r0, [r7, #12]
 8003f42:	60b9      	str	r1, [r7, #8]
 8003f44:	607a      	str	r2, [r7, #4]
  keccak_squeezeblocks(out, nblocks, state->s, SHAKE256_RATE);
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	2388      	movs	r3, #136	; 0x88
 8003f4a:	68b9      	ldr	r1, [r7, #8]
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f7ff ff8b 	bl	8003e68 <keccak_squeezeblocks>
}
 8003f52:	bf00      	nop
 8003f54:	3710      	adds	r7, #16
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <pqcrystals_dilithium2_ref_dilithium_shake256_stream_init>:
}

void dilithium_shake256_stream_init(keccak_state *state,
                                    const uint8_t seed[CRHBYTES],
                                    uint16_t nonce)
{
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b086      	sub	sp, #24
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	60f8      	str	r0, [r7, #12]
 8003f62:	60b9      	str	r1, [r7, #8]
 8003f64:	4613      	mov	r3, r2
 8003f66:	80fb      	strh	r3, [r7, #6]
  uint8_t t[2];
  t[0] = nonce;
 8003f68:	88fb      	ldrh	r3, [r7, #6]
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	753b      	strb	r3, [r7, #20]
  t[1] = nonce >> 8;
 8003f6e:	88fb      	ldrh	r3, [r7, #6]
 8003f70:	0a1b      	lsrs	r3, r3, #8
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	b2db      	uxtb	r3, r3
 8003f76:	757b      	strb	r3, [r7, #21]

  shake256_init(state);
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f7ff ffa7 	bl	8003ecc <pqcrystals_fips202_ref_shake256_init>
  shake256_absorb(state, seed, CRHBYTES);
 8003f7e:	2230      	movs	r2, #48	; 0x30
 8003f80:	68b9      	ldr	r1, [r7, #8]
 8003f82:	68f8      	ldr	r0, [r7, #12]
 8003f84:	f7ff ffad 	bl	8003ee2 <pqcrystals_fips202_ref_shake256_absorb>
  shake256_absorb(state, t, 2);
 8003f88:	f107 0314 	add.w	r3, r7, #20
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	4619      	mov	r1, r3
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f7ff ffa6 	bl	8003ee2 <pqcrystals_fips202_ref_shake256_absorb>
  shake256_finalize(state);
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f7ff ffbb 	bl	8003f12 <pqcrystals_fips202_ref_shake256_finalize>
}
 8003f9c:	bf00      	nop
 8003f9e:	3718      	adds	r7, #24
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <check_version>:
} ss_cmd;
static ss_cmd commands[MAX_SS_CMDS];
// Callback function for "v" command.
// This can exist in v1.0 as long as we don't actually send back an ack ("z")
uint8_t check_version(uint8_t *v, uint8_t len)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	460b      	mov	r3, r1
 8003fae:	70fb      	strb	r3, [r7, #3]
	return SS_VER;
 8003fb0:	2301      	movs	r3, #1
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr

08003fbc <ss_num_commands>:

uint8_t ss_num_commands(uint8_t *x, uint8_t len)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b084      	sub	sp, #16
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	70fb      	strb	r3, [r7, #3]
    uint8_t ncmds = num_commands & 0xFF;
 8003fc8:	4b07      	ldr	r3, [pc, #28]	; (8003fe8 <ss_num_commands+0x2c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	73fb      	strb	r3, [r7, #15]
    simpleserial_put('r', 0x01, &ncmds);
 8003fd0:	f107 030f 	add.w	r3, r7, #15
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	2101      	movs	r1, #1
 8003fd8:	2072      	movs	r0, #114	; 0x72
 8003fda:	f000 fa53 	bl	8004484 <simpleserial_put>
    return 0x00;
 8003fde:	2300      	movs	r3, #0
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	20002af4 	.word	0x20002af4

08003fec <ss_get_commands>:
    uint8_t len;
    uint8_t flags;
} ss_cmd_repr;

uint8_t ss_get_commands(uint8_t *x, uint8_t len)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b090      	sub	sp, #64	; 0x40
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	70fb      	strb	r3, [r7, #3]
    ss_cmd_repr repr_cmd_buf[MAX_SS_CMDS];
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003ffe:	e03a      	b.n	8004076 <ss_get_commands+0x8a>
        repr_cmd_buf[i].c = commands[i].c;
 8004000:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004004:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004008:	4927      	ldr	r1, [pc, #156]	; (80040a8 <ss_get_commands+0xbc>)
 800400a:	011b      	lsls	r3, r3, #4
 800400c:	440b      	add	r3, r1
 800400e:	7819      	ldrb	r1, [r3, #0]
 8004010:	4613      	mov	r3, r2
 8004012:	005b      	lsls	r3, r3, #1
 8004014:	4413      	add	r3, r2
 8004016:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800401a:	4413      	add	r3, r2
 800401c:	3b34      	subs	r3, #52	; 0x34
 800401e:	460a      	mov	r2, r1
 8004020:	701a      	strb	r2, [r3, #0]
        repr_cmd_buf[i].len = commands[i].len;
 8004022:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004026:	4a20      	ldr	r2, [pc, #128]	; (80040a8 <ss_get_commands+0xbc>)
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	4413      	add	r3, r2
 800402c:	3304      	adds	r3, #4
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004034:	b2d9      	uxtb	r1, r3
 8004036:	4613      	mov	r3, r2
 8004038:	005b      	lsls	r3, r3, #1
 800403a:	4413      	add	r3, r2
 800403c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004040:	4413      	add	r3, r2
 8004042:	3b33      	subs	r3, #51	; 0x33
 8004044:	460a      	mov	r2, r1
 8004046:	701a      	strb	r2, [r3, #0]
        repr_cmd_buf[i].flags = commands[i].flags;
 8004048:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800404c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8004050:	4915      	ldr	r1, [pc, #84]	; (80040a8 <ss_get_commands+0xbc>)
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	440b      	add	r3, r1
 8004056:	330c      	adds	r3, #12
 8004058:	7819      	ldrb	r1, [r3, #0]
 800405a:	4613      	mov	r3, r2
 800405c:	005b      	lsls	r3, r3, #1
 800405e:	4413      	add	r3, r2
 8004060:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8004064:	4413      	add	r3, r2
 8004066:	3b32      	subs	r3, #50	; 0x32
 8004068:	460a      	mov	r2, r1
 800406a:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < (num_commands & 0xFF); i++) {
 800406c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004070:	3301      	adds	r3, #1
 8004072:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004076:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800407a:	4b0c      	ldr	r3, [pc, #48]	; (80040ac <ss_get_commands+0xc0>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	b2db      	uxtb	r3, r3
 8004080:	429a      	cmp	r2, r3
 8004082:	dbbd      	blt.n	8004000 <ss_get_commands+0x14>
    }

    simpleserial_put('r', num_commands * 0x03, (void *) repr_cmd_buf);
 8004084:	4b09      	ldr	r3, [pc, #36]	; (80040ac <ss_get_commands+0xc0>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	b2db      	uxtb	r3, r3
 800408a:	461a      	mov	r2, r3
 800408c:	0052      	lsls	r2, r2, #1
 800408e:	4413      	add	r3, r2
 8004090:	b2db      	uxtb	r3, r3
 8004092:	f107 020c 	add.w	r2, r7, #12
 8004096:	4619      	mov	r1, r3
 8004098:	2072      	movs	r0, #114	; 0x72
 800409a:	f000 f9f3 	bl	8004484 <simpleserial_put>
    return 0x00;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3740      	adds	r7, #64	; 0x40
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}
 80040a8:	20002af8 	.word	0x20002af8
 80040ac:	20002af4 	.word	0x20002af4

080040b0 <hex_decode>:
	'0', '1', '2', '3', '4', '5', '6', '7',
	'8', '9', 'A', 'B', 'C', 'D', 'E', 'F'
};

int hex_decode(int len, char* ascii_buf, uint8_t* data_buf)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b087      	sub	sp, #28
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
	for(int i = 0; i < len; i++)
 80040bc:	2300      	movs	r3, #0
 80040be:	617b      	str	r3, [r7, #20]
 80040c0:	e083      	b.n	80041ca <hex_decode+0x11a>
	{
		char n_hi = ascii_buf[2*i];
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	461a      	mov	r2, r3
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	4413      	add	r3, r2
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	74fb      	strb	r3, [r7, #19]
		char n_lo = ascii_buf[2*i+1];
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	005b      	lsls	r3, r3, #1
 80040d4:	3301      	adds	r3, #1
 80040d6:	68ba      	ldr	r2, [r7, #8]
 80040d8:	4413      	add	r3, r2
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	74bb      	strb	r3, [r7, #18]

		if(n_lo >= '0' && n_lo <= '9')
 80040de:	7cbb      	ldrb	r3, [r7, #18]
 80040e0:	2b2f      	cmp	r3, #47	; 0x2f
 80040e2:	d90a      	bls.n	80040fa <hex_decode+0x4a>
 80040e4:	7cbb      	ldrb	r3, [r7, #18]
 80040e6:	2b39      	cmp	r3, #57	; 0x39
 80040e8:	d807      	bhi.n	80040fa <hex_decode+0x4a>
			data_buf[i] = n_lo - '0';
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	4413      	add	r3, r2
 80040f0:	7cba      	ldrb	r2, [r7, #18]
 80040f2:	3a30      	subs	r2, #48	; 0x30
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	701a      	strb	r2, [r3, #0]
 80040f8:	e01d      	b.n	8004136 <hex_decode+0x86>
		else if(n_lo >= 'A' && n_lo <= 'F')
 80040fa:	7cbb      	ldrb	r3, [r7, #18]
 80040fc:	2b40      	cmp	r3, #64	; 0x40
 80040fe:	d90a      	bls.n	8004116 <hex_decode+0x66>
 8004100:	7cbb      	ldrb	r3, [r7, #18]
 8004102:	2b46      	cmp	r3, #70	; 0x46
 8004104:	d807      	bhi.n	8004116 <hex_decode+0x66>
			data_buf[i] = n_lo - 'A' + 10;
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	687a      	ldr	r2, [r7, #4]
 800410a:	4413      	add	r3, r2
 800410c:	7cba      	ldrb	r2, [r7, #18]
 800410e:	3a37      	subs	r2, #55	; 0x37
 8004110:	b2d2      	uxtb	r2, r2
 8004112:	701a      	strb	r2, [r3, #0]
 8004114:	e00f      	b.n	8004136 <hex_decode+0x86>
		else if(n_lo >= 'a' && n_lo <= 'f')
 8004116:	7cbb      	ldrb	r3, [r7, #18]
 8004118:	2b60      	cmp	r3, #96	; 0x60
 800411a:	d90a      	bls.n	8004132 <hex_decode+0x82>
 800411c:	7cbb      	ldrb	r3, [r7, #18]
 800411e:	2b66      	cmp	r3, #102	; 0x66
 8004120:	d807      	bhi.n	8004132 <hex_decode+0x82>
			data_buf[i] = n_lo - 'a' + 10;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	4413      	add	r3, r2
 8004128:	7cba      	ldrb	r2, [r7, #18]
 800412a:	3a57      	subs	r2, #87	; 0x57
 800412c:	b2d2      	uxtb	r2, r2
 800412e:	701a      	strb	r2, [r3, #0]
 8004130:	e001      	b.n	8004136 <hex_decode+0x86>
		else
			return 1;
 8004132:	2301      	movs	r3, #1
 8004134:	e04f      	b.n	80041d6 <hex_decode+0x126>

		if(n_hi >= '0' && n_hi <= '9')
 8004136:	7cfb      	ldrb	r3, [r7, #19]
 8004138:	2b2f      	cmp	r3, #47	; 0x2f
 800413a:	d913      	bls.n	8004164 <hex_decode+0xb4>
 800413c:	7cfb      	ldrb	r3, [r7, #19]
 800413e:	2b39      	cmp	r3, #57	; 0x39
 8004140:	d810      	bhi.n	8004164 <hex_decode+0xb4>
			data_buf[i] |= (n_hi - '0') << 4;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	4413      	add	r3, r2
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	b25a      	sxtb	r2, r3
 800414c:	7cfb      	ldrb	r3, [r7, #19]
 800414e:	3b30      	subs	r3, #48	; 0x30
 8004150:	011b      	lsls	r3, r3, #4
 8004152:	b25b      	sxtb	r3, r3
 8004154:	4313      	orrs	r3, r2
 8004156:	b259      	sxtb	r1, r3
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	687a      	ldr	r2, [r7, #4]
 800415c:	4413      	add	r3, r2
 800415e:	b2ca      	uxtb	r2, r1
 8004160:	701a      	strb	r2, [r3, #0]
 8004162:	e02f      	b.n	80041c4 <hex_decode+0x114>
		else if(n_hi >= 'A' && n_hi <= 'F')
 8004164:	7cfb      	ldrb	r3, [r7, #19]
 8004166:	2b40      	cmp	r3, #64	; 0x40
 8004168:	d913      	bls.n	8004192 <hex_decode+0xe2>
 800416a:	7cfb      	ldrb	r3, [r7, #19]
 800416c:	2b46      	cmp	r3, #70	; 0x46
 800416e:	d810      	bhi.n	8004192 <hex_decode+0xe2>
			data_buf[i] |= (n_hi - 'A' + 10) << 4;
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	4413      	add	r3, r2
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	b25a      	sxtb	r2, r3
 800417a:	7cfb      	ldrb	r3, [r7, #19]
 800417c:	3b37      	subs	r3, #55	; 0x37
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	b25b      	sxtb	r3, r3
 8004182:	4313      	orrs	r3, r2
 8004184:	b259      	sxtb	r1, r3
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	4413      	add	r3, r2
 800418c:	b2ca      	uxtb	r2, r1
 800418e:	701a      	strb	r2, [r3, #0]
 8004190:	e018      	b.n	80041c4 <hex_decode+0x114>
		else if(n_hi >= 'a' && n_hi <= 'f')
 8004192:	7cfb      	ldrb	r3, [r7, #19]
 8004194:	2b60      	cmp	r3, #96	; 0x60
 8004196:	d913      	bls.n	80041c0 <hex_decode+0x110>
 8004198:	7cfb      	ldrb	r3, [r7, #19]
 800419a:	2b66      	cmp	r3, #102	; 0x66
 800419c:	d810      	bhi.n	80041c0 <hex_decode+0x110>
			data_buf[i] |= (n_hi - 'a' + 10) << 4;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	4413      	add	r3, r2
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	b25a      	sxtb	r2, r3
 80041a8:	7cfb      	ldrb	r3, [r7, #19]
 80041aa:	3b57      	subs	r3, #87	; 0x57
 80041ac:	011b      	lsls	r3, r3, #4
 80041ae:	b25b      	sxtb	r3, r3
 80041b0:	4313      	orrs	r3, r2
 80041b2:	b259      	sxtb	r1, r3
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	4413      	add	r3, r2
 80041ba:	b2ca      	uxtb	r2, r1
 80041bc:	701a      	strb	r2, [r3, #0]
 80041be:	e001      	b.n	80041c4 <hex_decode+0x114>
		else
			return 1;
 80041c0:	2301      	movs	r3, #1
 80041c2:	e008      	b.n	80041d6 <hex_decode+0x126>
	for(int i = 0; i < len; i++)
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	3301      	adds	r3, #1
 80041c8:	617b      	str	r3, [r7, #20]
 80041ca:	697a      	ldr	r2, [r7, #20]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	f6ff af77 	blt.w	80040c2 <hex_decode+0x12>
	}

	return 0;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	371c      	adds	r7, #28
 80041da:	46bd      	mov	sp, r7
 80041dc:	bc80      	pop	{r7}
 80041de:	4770      	bx	lr

080041e0 <simpleserial_init>:


// Set up the SimpleSerial module by preparing internal commands
// This just adds the "v" command for now...
void simpleserial_init()
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	af00      	add	r7, sp, #0
	simpleserial_addcmd('v', 0, check_version);
 80041e4:	4a08      	ldr	r2, [pc, #32]	; (8004208 <simpleserial_init+0x28>)
 80041e6:	2100      	movs	r1, #0
 80041e8:	2076      	movs	r0, #118	; 0x76
 80041ea:	f000 f813 	bl	8004214 <simpleserial_addcmd>
    simpleserial_addcmd('w', 0, ss_get_commands);
 80041ee:	4a07      	ldr	r2, [pc, #28]	; (800420c <simpleserial_init+0x2c>)
 80041f0:	2100      	movs	r1, #0
 80041f2:	2077      	movs	r0, #119	; 0x77
 80041f4:	f000 f80e 	bl	8004214 <simpleserial_addcmd>
    simpleserial_addcmd('y', 0, ss_num_commands);
 80041f8:	4a05      	ldr	r2, [pc, #20]	; (8004210 <simpleserial_init+0x30>)
 80041fa:	2100      	movs	r1, #0
 80041fc:	2079      	movs	r0, #121	; 0x79
 80041fe:	f000 f809 	bl	8004214 <simpleserial_addcmd>
}
 8004202:	bf00      	nop
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	08003fa5 	.word	0x08003fa5
 800420c:	08003fed 	.word	0x08003fed
 8004210:	08003fbd 	.word	0x08003fbd

08004214 <simpleserial_addcmd>:

int simpleserial_addcmd(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t))
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b084      	sub	sp, #16
 8004218:	af00      	add	r7, sp, #0
 800421a:	4603      	mov	r3, r0
 800421c:	60b9      	str	r1, [r7, #8]
 800421e:	607a      	str	r2, [r7, #4]
 8004220:	73fb      	strb	r3, [r7, #15]
	return simpleserial_addcmd_flags(c, len, fp, CMD_FLAG_NONE);
 8004222:	7bf8      	ldrb	r0, [r7, #15]
 8004224:	2300      	movs	r3, #0
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	68b9      	ldr	r1, [r7, #8]
 800422a:	f000 f805 	bl	8004238 <simpleserial_addcmd_flags>
 800422e:	4603      	mov	r3, r0
}
 8004230:	4618      	mov	r0, r3
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <simpleserial_addcmd_flags>:

int simpleserial_addcmd_flags(char c, unsigned int len, uint8_t (*fp)(uint8_t*, uint8_t), uint8_t fl)
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	60b9      	str	r1, [r7, #8]
 8004240:	607a      	str	r2, [r7, #4]
 8004242:	461a      	mov	r2, r3
 8004244:	4603      	mov	r3, r0
 8004246:	73fb      	strb	r3, [r7, #15]
 8004248:	4613      	mov	r3, r2
 800424a:	73bb      	strb	r3, [r7, #14]
	if(num_commands >= MAX_SS_CMDS)
 800424c:	4b1a      	ldr	r3, [pc, #104]	; (80042b8 <simpleserial_addcmd_flags+0x80>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2b0f      	cmp	r3, #15
 8004252:	dd01      	ble.n	8004258 <simpleserial_addcmd_flags+0x20>
		return 1;
 8004254:	2301      	movs	r3, #1
 8004256:	e029      	b.n	80042ac <simpleserial_addcmd_flags+0x74>

	if(len >= MAX_SS_LEN)
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2bff      	cmp	r3, #255	; 0xff
 800425c:	d901      	bls.n	8004262 <simpleserial_addcmd_flags+0x2a>
		return 1;
 800425e:	2301      	movs	r3, #1
 8004260:	e024      	b.n	80042ac <simpleserial_addcmd_flags+0x74>

	commands[num_commands].c   = c;
 8004262:	4b15      	ldr	r3, [pc, #84]	; (80042b8 <simpleserial_addcmd_flags+0x80>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a15      	ldr	r2, [pc, #84]	; (80042bc <simpleserial_addcmd_flags+0x84>)
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	4413      	add	r3, r2
 800426c:	7bfa      	ldrb	r2, [r7, #15]
 800426e:	701a      	strb	r2, [r3, #0]
	commands[num_commands].len = len;
 8004270:	4b11      	ldr	r3, [pc, #68]	; (80042b8 <simpleserial_addcmd_flags+0x80>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a11      	ldr	r2, [pc, #68]	; (80042bc <simpleserial_addcmd_flags+0x84>)
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	4413      	add	r3, r2
 800427a:	3304      	adds	r3, #4
 800427c:	68ba      	ldr	r2, [r7, #8]
 800427e:	601a      	str	r2, [r3, #0]
	commands[num_commands].fp  = fp;
 8004280:	4b0d      	ldr	r3, [pc, #52]	; (80042b8 <simpleserial_addcmd_flags+0x80>)
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a0d      	ldr	r2, [pc, #52]	; (80042bc <simpleserial_addcmd_flags+0x84>)
 8004286:	011b      	lsls	r3, r3, #4
 8004288:	4413      	add	r3, r2
 800428a:	3308      	adds	r3, #8
 800428c:	687a      	ldr	r2, [r7, #4]
 800428e:	601a      	str	r2, [r3, #0]
	commands[num_commands].flags = fl;
 8004290:	4b09      	ldr	r3, [pc, #36]	; (80042b8 <simpleserial_addcmd_flags+0x80>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a09      	ldr	r2, [pc, #36]	; (80042bc <simpleserial_addcmd_flags+0x84>)
 8004296:	011b      	lsls	r3, r3, #4
 8004298:	4413      	add	r3, r2
 800429a:	330c      	adds	r3, #12
 800429c:	7bba      	ldrb	r2, [r7, #14]
 800429e:	701a      	strb	r2, [r3, #0]
	num_commands++;
 80042a0:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <simpleserial_addcmd_flags+0x80>)
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	3301      	adds	r3, #1
 80042a6:	4a04      	ldr	r2, [pc, #16]	; (80042b8 <simpleserial_addcmd_flags+0x80>)
 80042a8:	6013      	str	r3, [r2, #0]

	return 0;
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	3714      	adds	r7, #20
 80042b0:	46bd      	mov	sp, r7
 80042b2:	bc80      	pop	{r7}
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	20002af4 	.word	0x20002af4
 80042bc:	20002af8 	.word	0x20002af8

080042c0 <simpleserial_get>:

void simpleserial_get(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	f5ad 7d46 	sub.w	sp, sp, #792	; 0x318
 80042c6:	af00      	add	r7, sp, #0
	char ascii_buf[2*MAX_SS_LEN];
	uint8_t data_buf[MAX_SS_LEN];
	char c;

	// Find which command we're receiving
	c = getch();
 80042c8:	f000 f9f8 	bl	80046bc <getch>
 80042cc:	4603      	mov	r3, r0
 80042ce:	f887 330f 	strb.w	r3, [r7, #783]	; 0x30f

	int cmd;
	for(cmd = 0; cmd < num_commands; cmd++)
 80042d2:	2300      	movs	r3, #0
 80042d4:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 80042d8:	e00e      	b.n	80042f8 <simpleserial_get+0x38>
	{
		if(commands[cmd].c == c)
 80042da:	4a68      	ldr	r2, [pc, #416]	; (800447c <simpleserial_get+0x1bc>)
 80042dc:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 80042e0:	011b      	lsls	r3, r3, #4
 80042e2:	4413      	add	r3, r2
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	f897 230f 	ldrb.w	r2, [r7, #783]	; 0x30f
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d00b      	beq.n	8004306 <simpleserial_get+0x46>
	for(cmd = 0; cmd < num_commands; cmd++)
 80042ee:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 80042f2:	3301      	adds	r3, #1
 80042f4:	f8c7 3314 	str.w	r3, [r7, #788]	; 0x314
 80042f8:	4b61      	ldr	r3, [pc, #388]	; (8004480 <simpleserial_get+0x1c0>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f8d7 2314 	ldr.w	r2, [r7, #788]	; 0x314
 8004300:	429a      	cmp	r2, r3
 8004302:	dbea      	blt.n	80042da <simpleserial_get+0x1a>
 8004304:	e000      	b.n	8004308 <simpleserial_get+0x48>
			break;
 8004306:	bf00      	nop
	}

	// If we didn't find a match, give up right away
	if(cmd == num_commands)
 8004308:	4b5d      	ldr	r3, [pc, #372]	; (8004480 <simpleserial_get+0x1c0>)
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f8d7 2314 	ldr.w	r2, [r7, #788]	; 0x314
 8004310:	429a      	cmp	r2, r3
 8004312:	f000 80a6 	beq.w	8004462 <simpleserial_get+0x1a2>
		return;

	// If flag CMD_FLAG_LEN is set, the next byte indicates the sent length
	if ((commands[cmd].flags & CMD_FLAG_LEN) != 0)
 8004316:	4a59      	ldr	r2, [pc, #356]	; (800447c <simpleserial_get+0x1bc>)
 8004318:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 800431c:	011b      	lsls	r3, r3, #4
 800431e:	4413      	add	r3, r2
 8004320:	330c      	adds	r3, #12
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	f003 0301 	and.w	r3, r3, #1
 8004328:	2b00      	cmp	r3, #0
 800432a:	d02d      	beq.n	8004388 <simpleserial_get+0xc8>
	{
		uint8_t l = 0;
 800432c:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8004330:	f2a3 3311 	subw	r3, r3, #785	; 0x311
 8004334:	2200      	movs	r2, #0
 8004336:	701a      	strb	r2, [r3, #0]
		char buff[2];
		buff[0] = getch();
 8004338:	f000 f9c0 	bl	80046bc <getch>
 800433c:	4603      	mov	r3, r0
 800433e:	461a      	mov	r2, r3
 8004340:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8004344:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 8004348:	701a      	strb	r2, [r3, #0]
		buff[1] = getch();
 800434a:	f000 f9b7 	bl	80046bc <getch>
 800434e:	4603      	mov	r3, r0
 8004350:	461a      	mov	r2, r3
 8004352:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8004356:	f5a3 7345 	sub.w	r3, r3, #788	; 0x314
 800435a:	705a      	strb	r2, [r3, #1]
		if (hex_decode(1, buff, &l))
 800435c:	1dfa      	adds	r2, r7, #7
 800435e:	1d3b      	adds	r3, r7, #4
 8004360:	4619      	mov	r1, r3
 8004362:	2001      	movs	r0, #1
 8004364:	f7ff fea4 	bl	80040b0 <hex_decode>
 8004368:	4603      	mov	r3, r0
 800436a:	2b00      	cmp	r3, #0
 800436c:	d17b      	bne.n	8004466 <simpleserial_get+0x1a6>
			return;
		commands[cmd].len = l;
 800436e:	f507 7346 	add.w	r3, r7, #792	; 0x318
 8004372:	f2a3 3311 	subw	r3, r3, #785	; 0x311
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	4619      	mov	r1, r3
 800437a:	4a40      	ldr	r2, [pc, #256]	; (800447c <simpleserial_get+0x1bc>)
 800437c:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8004380:	011b      	lsls	r3, r3, #4
 8004382:	4413      	add	r3, r2
 8004384:	3304      	adds	r3, #4
 8004386:	6019      	str	r1, [r3, #0]
	}

	// Receive characters until we fill the ASCII buffer
	for(int i = 0; i < 2*commands[cmd].len; i++)
 8004388:	2300      	movs	r3, #0
 800438a:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 800438e:	e01b      	b.n	80043c8 <simpleserial_get+0x108>
	{
		c = getch();
 8004390:	f000 f994 	bl	80046bc <getch>
 8004394:	4603      	mov	r3, r0
 8004396:	f887 330f 	strb.w	r3, [r7, #783]	; 0x30f

		// Check for early \n
		if(c == '\n' || c == '\r')
 800439a:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 800439e:	2b0a      	cmp	r3, #10
 80043a0:	d063      	beq.n	800446a <simpleserial_get+0x1aa>
 80043a2:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 80043a6:	2b0d      	cmp	r3, #13
 80043a8:	d05f      	beq.n	800446a <simpleserial_get+0x1aa>
			return;

		ascii_buf[i] = c;
 80043aa:	f507 7346 	add.w	r3, r7, #792	; 0x318
 80043ae:	f5a3 7203 	sub.w	r2, r3, #524	; 0x20c
 80043b2:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 80043b6:	4413      	add	r3, r2
 80043b8:	f897 230f 	ldrb.w	r2, [r7, #783]	; 0x30f
 80043bc:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < 2*commands[cmd].len; i++)
 80043be:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 80043c2:	3301      	adds	r3, #1
 80043c4:	f8c7 3310 	str.w	r3, [r7, #784]	; 0x310
 80043c8:	4a2c      	ldr	r2, [pc, #176]	; (800447c <simpleserial_get+0x1bc>)
 80043ca:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	4413      	add	r3, r2
 80043d2:	3304      	adds	r3, #4
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	005a      	lsls	r2, r3, #1
 80043d8:	f8d7 3310 	ldr.w	r3, [r7, #784]	; 0x310
 80043dc:	429a      	cmp	r2, r3
 80043de:	d8d7      	bhi.n	8004390 <simpleserial_get+0xd0>
	}

	// Assert that last character is \n or \r
	c = getch();
 80043e0:	f000 f96c 	bl	80046bc <getch>
 80043e4:	4603      	mov	r3, r0
 80043e6:	f887 330f 	strb.w	r3, [r7, #783]	; 0x30f
	if(c != '\n' && c != '\r')
 80043ea:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 80043ee:	2b0a      	cmp	r3, #10
 80043f0:	d003      	beq.n	80043fa <simpleserial_get+0x13a>
 80043f2:	f897 330f 	ldrb.w	r3, [r7, #783]	; 0x30f
 80043f6:	2b0d      	cmp	r3, #13
 80043f8:	d139      	bne.n	800446e <simpleserial_get+0x1ae>
		return;

	// ASCII buffer is full: convert to bytes
	// Check for illegal characters here
	if(hex_decode(commands[cmd].len, ascii_buf, data_buf))
 80043fa:	4a20      	ldr	r2, [pc, #128]	; (800447c <simpleserial_get+0x1bc>)
 80043fc:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8004400:	011b      	lsls	r3, r3, #4
 8004402:	4413      	add	r3, r2
 8004404:	3304      	adds	r3, #4
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4618      	mov	r0, r3
 800440a:	f107 020c 	add.w	r2, r7, #12
 800440e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8004412:	4619      	mov	r1, r3
 8004414:	f7ff fe4c 	bl	80040b0 <hex_decode>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d129      	bne.n	8004472 <simpleserial_get+0x1b2>
		return;

	// Callback
	uint8_t ret[1];
	ret[0] = commands[cmd].fp(data_buf, commands[cmd].len);
 800441e:	4a17      	ldr	r2, [pc, #92]	; (800447c <simpleserial_get+0x1bc>)
 8004420:	f8d7 3314 	ldr.w	r3, [r7, #788]	; 0x314
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	4413      	add	r3, r2
 8004428:	3308      	adds	r3, #8
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4913      	ldr	r1, [pc, #76]	; (800447c <simpleserial_get+0x1bc>)
 800442e:	f8d7 2314 	ldr.w	r2, [r7, #788]	; 0x314
 8004432:	0112      	lsls	r2, r2, #4
 8004434:	440a      	add	r2, r1
 8004436:	3204      	adds	r2, #4
 8004438:	6812      	ldr	r2, [r2, #0]
 800443a:	b2d1      	uxtb	r1, r2
 800443c:	f107 020c 	add.w	r2, r7, #12
 8004440:	4610      	mov	r0, r2
 8004442:	4798      	blx	r3
 8004444:	4603      	mov	r3, r0
 8004446:	461a      	mov	r2, r3
 8004448:	f507 7346 	add.w	r3, r7, #792	; 0x318
 800444c:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8004450:	701a      	strb	r2, [r3, #0]

	// Acknowledge (if version is 1.1)
#if SS_VER == SS_VER_1_1
	simpleserial_put('z', 1, ret);
 8004452:	f107 0308 	add.w	r3, r7, #8
 8004456:	461a      	mov	r2, r3
 8004458:	2101      	movs	r1, #1
 800445a:	207a      	movs	r0, #122	; 0x7a
 800445c:	f000 f812 	bl	8004484 <simpleserial_put>
 8004460:	e008      	b.n	8004474 <simpleserial_get+0x1b4>
		return;
 8004462:	bf00      	nop
 8004464:	e006      	b.n	8004474 <simpleserial_get+0x1b4>
			return;
 8004466:	bf00      	nop
 8004468:	e004      	b.n	8004474 <simpleserial_get+0x1b4>
			return;
 800446a:	bf00      	nop
 800446c:	e002      	b.n	8004474 <simpleserial_get+0x1b4>
		return;
 800446e:	bf00      	nop
 8004470:	e000      	b.n	8004474 <simpleserial_get+0x1b4>
		return;
 8004472:	bf00      	nop
#endif
}
 8004474:	f507 7746 	add.w	r7, r7, #792	; 0x318
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	20002af8 	.word	0x20002af8
 8004480:	20002af4 	.word	0x20002af4

08004484 <simpleserial_put>:

void simpleserial_put(char c, uint8_t size, uint8_t* output)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af00      	add	r7, sp, #0
 800448a:	4603      	mov	r3, r0
 800448c:	603a      	str	r2, [r7, #0]
 800448e:	71fb      	strb	r3, [r7, #7]
 8004490:	460b      	mov	r3, r1
 8004492:	71bb      	strb	r3, [r7, #6]
	// Write first character
	putch(c);
 8004494:	79fb      	ldrb	r3, [r7, #7]
 8004496:	4618      	mov	r0, r3
 8004498:	f000 f926 	bl	80046e8 <putch>

	// Write each byte as two nibbles
	for(int i = 0; i < size; i++)
 800449c:	2300      	movs	r3, #0
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	e019      	b.n	80044d6 <simpleserial_put+0x52>
	{
		putch(hex_lookup[output[i] >> 4 ]);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	4413      	add	r3, r2
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	091b      	lsrs	r3, r3, #4
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	461a      	mov	r2, r3
 80044b0:	4b0e      	ldr	r3, [pc, #56]	; (80044ec <simpleserial_put+0x68>)
 80044b2:	5c9b      	ldrb	r3, [r3, r2]
 80044b4:	4618      	mov	r0, r3
 80044b6:	f000 f917 	bl	80046e8 <putch>
		putch(hex_lookup[output[i] & 0xF]);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	683a      	ldr	r2, [r7, #0]
 80044be:	4413      	add	r3, r2
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	f003 030f 	and.w	r3, r3, #15
 80044c6:	4a09      	ldr	r2, [pc, #36]	; (80044ec <simpleserial_put+0x68>)
 80044c8:	5cd3      	ldrb	r3, [r2, r3]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f000 f90c 	bl	80046e8 <putch>
	for(int i = 0; i < size; i++)
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	3301      	adds	r3, #1
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	79bb      	ldrb	r3, [r7, #6]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	429a      	cmp	r2, r3
 80044dc:	dbe1      	blt.n	80044a2 <simpleserial_put+0x1e>
	}

	// Write trailing '\n'
	putch('\n');
 80044de:	200a      	movs	r0, #10
 80044e0:	f000 f902 	bl	80046e8 <putch>
}
 80044e4:	bf00      	nop
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	20000000 	.word	0x20000000

080044f0 <platform_init>:

uint8_t hw_key[16];
static CRYP_HandleTypeDef cryp;

void platform_init(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b092      	sub	sp, #72	; 0x48
 80044f4:	af00      	add	r7, sp, #0
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_ACR_LATENCY_5WS);
    FLASH->ACR |= 0b111 << 8; //enable ART acceleration

#else
	RCC_OscInitTypeDef RCC_OscInitStruct;
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI;
 80044f6:	2303      	movs	r3, #3
 80044f8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState       = RCC_HSE_BYPASS;
 80044fa:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80044fe:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState       = RCC_HSI_ON;  // HSI is needed for the RNG
 8004500:	2301      	movs	r3, #1
 8004502:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState   = RCC_PLL_ON;  // we need PLL to use RNG
 8004504:	2302      	movs	r3, #2
 8004506:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLSource  = RCC_PLLSOURCE_HSE;
 8004508:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800450c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLM       = 12;  // Internal clock is 16MHz
 800450e:	230c      	movs	r3, #12
 8004510:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLN       = 196;
 8004512:	23c4      	movs	r3, #196	; 0xc4
 8004514:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLP       = RCC_PLLP_DIV4;
 8004516:	2304      	movs	r3, #4
 8004518:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLQ       = 7;  // divisor for RNG, USB and SDIO
 800451a:	2307      	movs	r3, #7
 800451c:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800451e:	f107 0318 	add.w	r3, r7, #24
 8004522:	4618      	mov	r0, r3
 8004524:	f000 f904 	bl	8004730 <HAL_RCC_OscConfig>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d000      	beq.n	8004530 <platform_init+0x40>
        for(;;);
 800452e:	e7fe      	b.n	800452e <platform_init+0x3e>
    }

	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_ClkInitStruct.ClockType      = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8004530:	230f      	movs	r3, #15
 8004532:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.SYSCLKSource   = RCC_SYSCLKSOURCE_HSE;
 8004534:	2301      	movs	r3, #1
 8004536:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider  = RCC_SYSCLK_DIV1;
 8004538:	2300      	movs	r3, #0
 800453a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800453c:	2300      	movs	r3, #0
 800453e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004540:	2300      	movs	r3, #0
 8004542:	617b      	str	r3, [r7, #20]
	HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_ACR_LATENCY_0WS); //wait states not needed for HSE
 8004544:	1d3b      	adds	r3, r7, #4
 8004546:	2100      	movs	r1, #0
 8004548:	4618      	mov	r0, r3
 800454a:	f000 fb53 	bl	8004bf4 <HAL_RCC_ClockConfig>
#endif

	// Configure and starts the RNG
	__HAL_RCC_RNG_CLK_ENABLE();
 800454e:	2300      	movs	r3, #0
 8004550:	603b      	str	r3, [r7, #0]
 8004552:	4b0c      	ldr	r3, [pc, #48]	; (8004584 <platform_init+0x94>)
 8004554:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004556:	4a0b      	ldr	r2, [pc, #44]	; (8004584 <platform_init+0x94>)
 8004558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800455c:	6353      	str	r3, [r2, #52]	; 0x34
 800455e:	4b09      	ldr	r3, [pc, #36]	; (8004584 <platform_init+0x94>)
 8004560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004566:	603b      	str	r3, [r7, #0]
 8004568:	683b      	ldr	r3, [r7, #0]
	RngHandle.Instance = RNG;
 800456a:	4b07      	ldr	r3, [pc, #28]	; (8004588 <platform_init+0x98>)
 800456c:	4a07      	ldr	r2, [pc, #28]	; (800458c <platform_init+0x9c>)
 800456e:	601a      	str	r2, [r3, #0]
	RngHandle.State = HAL_RNG_STATE_RESET;
 8004570:	4b05      	ldr	r3, [pc, #20]	; (8004588 <platform_init+0x98>)
 8004572:	2200      	movs	r2, #0
 8004574:	715a      	strb	r2, [r3, #5]
	HAL_RNG_Init(&RngHandle);
 8004576:	4804      	ldr	r0, [pc, #16]	; (8004588 <platform_init+0x98>)
 8004578:	f001 f99e 	bl	80058b8 <HAL_RNG_Init>

}
 800457c:	bf00      	nop
 800457e:	3748      	adds	r7, #72	; 0x48
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	40023800 	.word	0x40023800
 8004588:	20002bf8 	.word	0x20002bf8
 800458c:	50060800 	.word	0x50060800

08004590 <init_uart>:

void init_uart(void)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b088      	sub	sp, #32
 8004594:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_9 | GPIO_PIN_10;
 8004596:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800459a:	60fb      	str	r3, [r7, #12]
	GpioInit.Mode      = GPIO_MODE_AF_PP;
 800459c:	2302      	movs	r3, #2
 800459e:	613b      	str	r3, [r7, #16]
	GpioInit.Pull      = GPIO_PULLUP;
 80045a0:	2301      	movs	r3, #1
 80045a2:	617b      	str	r3, [r7, #20]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 80045a4:	2302      	movs	r3, #2
 80045a6:	61bb      	str	r3, [r7, #24]
	GpioInit.Alternate = GPIO_AF7_USART1;
 80045a8:	2307      	movs	r3, #7
 80045aa:	61fb      	str	r3, [r7, #28]
	__GPIOA_CLK_ENABLE();
 80045ac:	2300      	movs	r3, #0
 80045ae:	60bb      	str	r3, [r7, #8]
 80045b0:	4b1e      	ldr	r3, [pc, #120]	; (800462c <init_uart+0x9c>)
 80045b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b4:	4a1d      	ldr	r2, [pc, #116]	; (800462c <init_uart+0x9c>)
 80045b6:	f043 0301 	orr.w	r3, r3, #1
 80045ba:	6313      	str	r3, [r2, #48]	; 0x30
 80045bc:	4b1b      	ldr	r3, [pc, #108]	; (800462c <init_uart+0x9c>)
 80045be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	60bb      	str	r3, [r7, #8]
 80045c6:	68bb      	ldr	r3, [r7, #8]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 80045c8:	f107 030c 	add.w	r3, r7, #12
 80045cc:	4619      	mov	r1, r3
 80045ce:	4818      	ldr	r0, [pc, #96]	; (8004630 <init_uart+0xa0>)
 80045d0:	f000 fc18 	bl	8004e04 <HAL_GPIO_Init>

	UartHandle.Instance        = USART1;
 80045d4:	4b17      	ldr	r3, [pc, #92]	; (8004634 <init_uart+0xa4>)
 80045d6:	4a18      	ldr	r2, [pc, #96]	; (8004638 <init_uart+0xa8>)
 80045d8:	601a      	str	r2, [r3, #0]
  #if SS_VER==SS_VER_2_1
  UartHandle.Init.BaudRate   = 230400;
  #else
  UartHandle.Init.BaudRate   = 38400;
 80045da:	4b16      	ldr	r3, [pc, #88]	; (8004634 <init_uart+0xa4>)
 80045dc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80045e0:	605a      	str	r2, [r3, #4]
  #endif
	UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 80045e2:	4b14      	ldr	r3, [pc, #80]	; (8004634 <init_uart+0xa4>)
 80045e4:	2200      	movs	r2, #0
 80045e6:	609a      	str	r2, [r3, #8]
	UartHandle.Init.StopBits   = UART_STOPBITS_1;
 80045e8:	4b12      	ldr	r3, [pc, #72]	; (8004634 <init_uart+0xa4>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	60da      	str	r2, [r3, #12]
	UartHandle.Init.Parity     = UART_PARITY_NONE;
 80045ee:	4b11      	ldr	r3, [pc, #68]	; (8004634 <init_uart+0xa4>)
 80045f0:	2200      	movs	r2, #0
 80045f2:	611a      	str	r2, [r3, #16]
	UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 80045f4:	4b0f      	ldr	r3, [pc, #60]	; (8004634 <init_uart+0xa4>)
 80045f6:	2200      	movs	r2, #0
 80045f8:	619a      	str	r2, [r3, #24]
	UartHandle.Init.Mode       = UART_MODE_TX_RX;
 80045fa:	4b0e      	ldr	r3, [pc, #56]	; (8004634 <init_uart+0xa4>)
 80045fc:	220c      	movs	r2, #12
 80045fe:	615a      	str	r2, [r3, #20]
	__USART1_CLK_ENABLE();
 8004600:	2300      	movs	r3, #0
 8004602:	607b      	str	r3, [r7, #4]
 8004604:	4b09      	ldr	r3, [pc, #36]	; (800462c <init_uart+0x9c>)
 8004606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004608:	4a08      	ldr	r2, [pc, #32]	; (800462c <init_uart+0x9c>)
 800460a:	f043 0310 	orr.w	r3, r3, #16
 800460e:	6453      	str	r3, [r2, #68]	; 0x44
 8004610:	4b06      	ldr	r3, [pc, #24]	; (800462c <init_uart+0x9c>)
 8004612:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004614:	f003 0310 	and.w	r3, r3, #16
 8004618:	607b      	str	r3, [r7, #4]
 800461a:	687b      	ldr	r3, [r7, #4]
	HAL_UART_Init(&UartHandle);
 800461c:	4805      	ldr	r0, [pc, #20]	; (8004634 <init_uart+0xa4>)
 800461e:	f000 ffbf 	bl	80055a0 <HAL_UART_Init>
}
 8004622:	bf00      	nop
 8004624:	3720      	adds	r7, #32
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	40023800 	.word	0x40023800
 8004630:	40020000 	.word	0x40020000
 8004634:	20002c04 	.word	0x20002c04
 8004638:	40011000 	.word	0x40011000

0800463c <trigger_setup>:

//#define STM32F4_WLCSP

void trigger_setup(void)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b086      	sub	sp, #24
 8004640:	af00      	add	r7, sp, #0
	__GPIOA_CLK_ENABLE();
 8004642:	2300      	movs	r3, #0
 8004644:	603b      	str	r3, [r7, #0]
 8004646:	4b0f      	ldr	r3, [pc, #60]	; (8004684 <trigger_setup+0x48>)
 8004648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464a:	4a0e      	ldr	r2, [pc, #56]	; (8004684 <trigger_setup+0x48>)
 800464c:	f043 0301 	orr.w	r3, r3, #1
 8004650:	6313      	str	r3, [r2, #48]	; 0x30
 8004652:	4b0c      	ldr	r3, [pc, #48]	; (8004684 <trigger_setup+0x48>)
 8004654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	603b      	str	r3, [r7, #0]
 800465c:	683b      	ldr	r3, [r7, #0]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
    __GPIOD_CLK_ENABLE();
    HAL_GPIO_Init(GPIOD, &GpioInit);
#else
	GPIO_InitTypeDef GpioInit;
	GpioInit.Pin       = GPIO_PIN_12;
 800465e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004662:	607b      	str	r3, [r7, #4]
	GpioInit.Mode      = GPIO_MODE_OUTPUT_PP;
 8004664:	2301      	movs	r3, #1
 8004666:	60bb      	str	r3, [r7, #8]
	GpioInit.Pull      = GPIO_NOPULL;
 8004668:	2300      	movs	r3, #0
 800466a:	60fb      	str	r3, [r7, #12]
	GpioInit.Speed     = GPIO_SPEED_FREQ_HIGH;
 800466c:	2302      	movs	r3, #2
 800466e:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOA, &GpioInit);
 8004670:	1d3b      	adds	r3, r7, #4
 8004672:	4619      	mov	r1, r3
 8004674:	4804      	ldr	r0, [pc, #16]	; (8004688 <trigger_setup+0x4c>)
 8004676:	f000 fbc5 	bl	8004e04 <HAL_GPIO_Init>
#endif
}
 800467a:	bf00      	nop
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}
 8004682:	bf00      	nop
 8004684:	40023800 	.word	0x40023800
 8004688:	40020000 	.word	0x40020000

0800468c <trigger_high>:
void trigger_high(void)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	af00      	add	r7, sp, #0
#ifdef STM32F4_WLCSP
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, SET);
#else
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, SET);
 8004690:	2201      	movs	r2, #1
 8004692:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004696:	4802      	ldr	r0, [pc, #8]	; (80046a0 <trigger_high+0x14>)
 8004698:	f000 fd4e 	bl	8005138 <HAL_GPIO_WritePin>
#endif
}
 800469c:	bf00      	nop
 800469e:	bd80      	pop	{r7, pc}
 80046a0:	40020000 	.word	0x40020000

080046a4 <trigger_low>:

void trigger_low(void)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	af00      	add	r7, sp, #0
#ifdef STM32F4_WLCSP
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, RESET);
#else
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, RESET);
 80046a8:	2200      	movs	r2, #0
 80046aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80046ae:	4802      	ldr	r0, [pc, #8]	; (80046b8 <trigger_low+0x14>)
 80046b0:	f000 fd42 	bl	8005138 <HAL_GPIO_WritePin>
#endif
}
 80046b4:	bf00      	nop
 80046b6:	bd80      	pop	{r7, pc}
 80046b8:	40020000 	.word	0x40020000

080046bc <getch>:
char getch(void)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b082      	sub	sp, #8
 80046c0:	af00      	add	r7, sp, #0
	uint8_t d;
	while (HAL_UART_Receive(&UartHandle, &d, 1, 5000) != HAL_OK);
 80046c2:	bf00      	nop
 80046c4:	1df9      	adds	r1, r7, #7
 80046c6:	f241 3388 	movw	r3, #5000	; 0x1388
 80046ca:	2201      	movs	r2, #1
 80046cc:	4805      	ldr	r0, [pc, #20]	; (80046e4 <getch+0x28>)
 80046ce:	f001 f858 	bl	8005782 <HAL_UART_Receive>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d1f5      	bne.n	80046c4 <getch+0x8>
	return d;
 80046d8:	79fb      	ldrb	r3, [r7, #7]
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3708      	adds	r7, #8
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	20002c04 	.word	0x20002c04

080046e8 <putch>:

void putch(char c)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b084      	sub	sp, #16
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	4603      	mov	r3, r0
 80046f0:	71fb      	strb	r3, [r7, #7]
	uint8_t d  = c;
 80046f2:	79fb      	ldrb	r3, [r7, #7]
 80046f4:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&UartHandle,  &d, 1, 5000);
 80046f6:	f107 010f 	add.w	r1, r7, #15
 80046fa:	f241 3388 	movw	r3, #5000	; 0x1388
 80046fe:	2201      	movs	r2, #1
 8004700:	4803      	ldr	r0, [pc, #12]	; (8004710 <putch+0x28>)
 8004702:	f000 ffb4 	bl	800566e <HAL_UART_Transmit>
}
 8004706:	bf00      	nop
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	20002c04 	.word	0x20002c04

08004714 <HAL_GetTick>:

#define CLOCKSWITCH_TIMEOUT_VALUE  5000U /* 5 s */


uint32_t HAL_GetTick(void)
{
 8004714:	b480      	push	{r7}
 8004716:	af00      	add	r7, sp, #0
	static uint32_t tick;
	return tick++;;
 8004718:	4b04      	ldr	r3, [pc, #16]	; (800472c <HAL_GetTick+0x18>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	1c5a      	adds	r2, r3, #1
 800471e:	4903      	ldr	r1, [pc, #12]	; (800472c <HAL_GetTick+0x18>)
 8004720:	600a      	str	r2, [r1, #0]
}
 8004722:	4618      	mov	r0, r3
 8004724:	46bd      	mov	sp, r7
 8004726:	bc80      	pop	{r7}
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	20002c94 	.word	0x20002c94

08004730 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b08e      	sub	sp, #56	; 0x38
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	637b      	str	r3, [r7, #52]	; 0x34

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0301 	and.w	r3, r3, #1
 8004744:	2b00      	cmp	r3, #0
 8004746:	d077      	beq.n	8004838 <HAL_RCC_OscConfig+0x108>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004748:	4b93      	ldr	r3, [pc, #588]	; (8004998 <HAL_RCC_OscConfig+0x268>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f003 030c 	and.w	r3, r3, #12
 8004750:	2b04      	cmp	r3, #4
 8004752:	d00c      	beq.n	800476e <HAL_RCC_OscConfig+0x3e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004754:	4b90      	ldr	r3, [pc, #576]	; (8004998 <HAL_RCC_OscConfig+0x268>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800475c:	2b08      	cmp	r3, #8
 800475e:	d112      	bne.n	8004786 <HAL_RCC_OscConfig+0x56>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004760:	4b8d      	ldr	r3, [pc, #564]	; (8004998 <HAL_RCC_OscConfig+0x268>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004768:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800476c:	d10b      	bne.n	8004786 <HAL_RCC_OscConfig+0x56>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800476e:	4b8a      	ldr	r3, [pc, #552]	; (8004998 <HAL_RCC_OscConfig+0x268>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004776:	2b00      	cmp	r3, #0
 8004778:	d05d      	beq.n	8004836 <HAL_RCC_OscConfig+0x106>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d159      	bne.n	8004836 <HAL_RCC_OscConfig+0x106>
      {
        return HAL_ERROR;
 8004782:	2301      	movs	r3, #1
 8004784:	e22a      	b.n	8004bdc <HAL_RCC_OscConfig+0x4ac>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800478e:	d106      	bne.n	800479e <HAL_RCC_OscConfig+0x6e>
 8004790:	4b81      	ldr	r3, [pc, #516]	; (8004998 <HAL_RCC_OscConfig+0x268>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a80      	ldr	r2, [pc, #512]	; (8004998 <HAL_RCC_OscConfig+0x268>)
 8004796:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800479a:	6013      	str	r3, [r2, #0]
 800479c:	e01d      	b.n	80047da <HAL_RCC_OscConfig+0xaa>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047a6:	d10c      	bne.n	80047c2 <HAL_RCC_OscConfig+0x92>
 80047a8:	4b7b      	ldr	r3, [pc, #492]	; (8004998 <HAL_RCC_OscConfig+0x268>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a7a      	ldr	r2, [pc, #488]	; (8004998 <HAL_RCC_OscConfig+0x268>)
 80047ae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047b2:	6013      	str	r3, [r2, #0]
 80047b4:	4b78      	ldr	r3, [pc, #480]	; (8004998 <HAL_RCC_OscConfig+0x268>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a77      	ldr	r2, [pc, #476]	; (8004998 <HAL_RCC_OscConfig+0x268>)
 80047ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047be:	6013      	str	r3, [r2, #0]
 80047c0:	e00b      	b.n	80047da <HAL_RCC_OscConfig+0xaa>
 80047c2:	4b75      	ldr	r3, [pc, #468]	; (8004998 <HAL_RCC_OscConfig+0x268>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a74      	ldr	r2, [pc, #464]	; (8004998 <HAL_RCC_OscConfig+0x268>)
 80047c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047cc:	6013      	str	r3, [r2, #0]
 80047ce:	4b72      	ldr	r3, [pc, #456]	; (8004998 <HAL_RCC_OscConfig+0x268>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a71      	ldr	r2, [pc, #452]	; (8004998 <HAL_RCC_OscConfig+0x268>)
 80047d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047d8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d014      	beq.n	800480c <HAL_RCC_OscConfig+0xdc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e2:	f7ff ff97 	bl	8004714 <HAL_GetTick>
 80047e6:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047e8:	e009      	b.n	80047fe <HAL_RCC_OscConfig+0xce>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80047ea:	f7ff ff93 	bl	8004714 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	4a69      	ldr	r2, [pc, #420]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0xce>
          {
            return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e1ee      	b.n	8004bdc <HAL_RCC_OscConfig+0x4ac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047fe:	4b66      	ldr	r3, [pc, #408]	; (8004998 <HAL_RCC_OscConfig+0x268>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0ef      	beq.n	80047ea <HAL_RCC_OscConfig+0xba>
 800480a:	e015      	b.n	8004838 <HAL_RCC_OscConfig+0x108>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800480c:	f7ff ff82 	bl	8004714 <HAL_GetTick>
 8004810:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004812:	e009      	b.n	8004828 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004814:	f7ff ff7e 	bl	8004714 <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	4a5f      	ldr	r2, [pc, #380]	; (800499c <HAL_RCC_OscConfig+0x26c>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e1d9      	b.n	8004bdc <HAL_RCC_OscConfig+0x4ac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004828:	4b5b      	ldr	r3, [pc, #364]	; (8004998 <HAL_RCC_OscConfig+0x268>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1ef      	bne.n	8004814 <HAL_RCC_OscConfig+0xe4>
 8004834:	e000      	b.n	8004838 <HAL_RCC_OscConfig+0x108>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004836:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 0302 	and.w	r3, r3, #2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d077      	beq.n	8004934 <HAL_RCC_OscConfig+0x204>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004844:	4b54      	ldr	r3, [pc, #336]	; (8004998 <HAL_RCC_OscConfig+0x268>)
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	f003 030c 	and.w	r3, r3, #12
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00b      	beq.n	8004868 <HAL_RCC_OscConfig+0x138>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004850:	4b51      	ldr	r3, [pc, #324]	; (8004998 <HAL_RCC_OscConfig+0x268>)
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004858:	2b08      	cmp	r3, #8
 800485a:	d126      	bne.n	80048aa <HAL_RCC_OscConfig+0x17a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800485c:	4b4e      	ldr	r3, [pc, #312]	; (8004998 <HAL_RCC_OscConfig+0x268>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004864:	2b00      	cmp	r3, #0
 8004866:	d120      	bne.n	80048aa <HAL_RCC_OscConfig+0x17a>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004868:	4b4b      	ldr	r3, [pc, #300]	; (8004998 <HAL_RCC_OscConfig+0x268>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0302 	and.w	r3, r3, #2
 8004870:	2b00      	cmp	r3, #0
 8004872:	d005      	beq.n	8004880 <HAL_RCC_OscConfig+0x150>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	68db      	ldr	r3, [r3, #12]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d001      	beq.n	8004880 <HAL_RCC_OscConfig+0x150>
      {
        return HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	e1ad      	b.n	8004bdc <HAL_RCC_OscConfig+0x4ac>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004880:	4b45      	ldr	r3, [pc, #276]	; (8004998 <HAL_RCC_OscConfig+0x268>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6919      	ldr	r1, [r3, #16]
 800488c:	23f8      	movs	r3, #248	; 0xf8
 800488e:	633b      	str	r3, [r7, #48]	; 0x30
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004892:	fa93 f3a3 	rbit	r3, r3
 8004896:	62fb      	str	r3, [r7, #44]	; 0x2c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8004898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800489a:	fab3 f383 	clz	r3, r3
 800489e:	fa01 f303 	lsl.w	r3, r1, r3
 80048a2:	493d      	ldr	r1, [pc, #244]	; (8004998 <HAL_RCC_OscConfig+0x268>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048a8:	e044      	b.n	8004934 <HAL_RCC_OscConfig+0x204>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d02a      	beq.n	8004908 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048b2:	4b3b      	ldr	r3, [pc, #236]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 80048b4:	2201      	movs	r2, #1
 80048b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b8:	f7ff ff2c 	bl	8004714 <HAL_GetTick>
 80048bc:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048be:	e008      	b.n	80048d2 <HAL_RCC_OscConfig+0x1a2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048c0:	f7ff ff28 	bl	8004714 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d901      	bls.n	80048d2 <HAL_RCC_OscConfig+0x1a2>
          {
            return HAL_TIMEOUT;
 80048ce:	2303      	movs	r3, #3
 80048d0:	e184      	b.n	8004bdc <HAL_RCC_OscConfig+0x4ac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048d2:	4b31      	ldr	r3, [pc, #196]	; (8004998 <HAL_RCC_OscConfig+0x268>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0302 	and.w	r3, r3, #2
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d0f0      	beq.n	80048c0 <HAL_RCC_OscConfig+0x190>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048de:	4b2e      	ldr	r3, [pc, #184]	; (8004998 <HAL_RCC_OscConfig+0x268>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6919      	ldr	r1, [r3, #16]
 80048ea:	23f8      	movs	r3, #248	; 0xf8
 80048ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f0:	fa93 f3a3 	rbit	r3, r3
 80048f4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	fab3 f383 	clz	r3, r3
 80048fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004900:	4925      	ldr	r1, [pc, #148]	; (8004998 <HAL_RCC_OscConfig+0x268>)
 8004902:	4313      	orrs	r3, r2
 8004904:	600b      	str	r3, [r1, #0]
 8004906:	e015      	b.n	8004934 <HAL_RCC_OscConfig+0x204>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004908:	4b25      	ldr	r3, [pc, #148]	; (80049a0 <HAL_RCC_OscConfig+0x270>)
 800490a:	2200      	movs	r2, #0
 800490c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800490e:	f7ff ff01 	bl	8004714 <HAL_GetTick>
 8004912:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004914:	e008      	b.n	8004928 <HAL_RCC_OscConfig+0x1f8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004916:	f7ff fefd 	bl	8004714 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d901      	bls.n	8004928 <HAL_RCC_OscConfig+0x1f8>
          {
            return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e159      	b.n	8004bdc <HAL_RCC_OscConfig+0x4ac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004928:	4b1b      	ldr	r3, [pc, #108]	; (8004998 <HAL_RCC_OscConfig+0x268>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1f0      	bne.n	8004916 <HAL_RCC_OscConfig+0x1e6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0308 	and.w	r3, r3, #8
 800493c:	2b00      	cmp	r3, #0
 800493e:	d039      	beq.n	80049b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	695b      	ldr	r3, [r3, #20]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d016      	beq.n	8004976 <HAL_RCC_OscConfig+0x246>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004948:	4b16      	ldr	r3, [pc, #88]	; (80049a4 <HAL_RCC_OscConfig+0x274>)
 800494a:	2201      	movs	r2, #1
 800494c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800494e:	f7ff fee1 	bl	8004714 <HAL_GetTick>
 8004952:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004954:	e008      	b.n	8004968 <HAL_RCC_OscConfig+0x238>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004956:	f7ff fedd 	bl	8004714 <HAL_GetTick>
 800495a:	4602      	mov	r2, r0
 800495c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800495e:	1ad3      	subs	r3, r2, r3
 8004960:	2b02      	cmp	r3, #2
 8004962:	d901      	bls.n	8004968 <HAL_RCC_OscConfig+0x238>
        {
          return HAL_TIMEOUT;
 8004964:	2303      	movs	r3, #3
 8004966:	e139      	b.n	8004bdc <HAL_RCC_OscConfig+0x4ac>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004968:	4b0b      	ldr	r3, [pc, #44]	; (8004998 <HAL_RCC_OscConfig+0x268>)
 800496a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800496c:	f003 0302 	and.w	r3, r3, #2
 8004970:	2b00      	cmp	r3, #0
 8004972:	d0f0      	beq.n	8004956 <HAL_RCC_OscConfig+0x226>
 8004974:	e01e      	b.n	80049b4 <HAL_RCC_OscConfig+0x284>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004976:	4b0b      	ldr	r3, [pc, #44]	; (80049a4 <HAL_RCC_OscConfig+0x274>)
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800497c:	f7ff feca 	bl	8004714 <HAL_GetTick>
 8004980:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004982:	e011      	b.n	80049a8 <HAL_RCC_OscConfig+0x278>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004984:	f7ff fec6 	bl	8004714 <HAL_GetTick>
 8004988:	4602      	mov	r2, r0
 800498a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800498c:	1ad3      	subs	r3, r2, r3
 800498e:	2b02      	cmp	r3, #2
 8004990:	d90a      	bls.n	80049a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004992:	2303      	movs	r3, #3
 8004994:	e122      	b.n	8004bdc <HAL_RCC_OscConfig+0x4ac>
 8004996:	bf00      	nop
 8004998:	40023800 	.word	0x40023800
 800499c:	05f5e100 	.word	0x05f5e100
 80049a0:	42470000 	.word	0x42470000
 80049a4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049a8:	4b8e      	ldr	r3, [pc, #568]	; (8004be4 <HAL_RCC_OscConfig+0x4b4>)
 80049aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d1e7      	bne.n	8004984 <HAL_RCC_OscConfig+0x254>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f003 0304 	and.w	r3, r3, #4
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d07d      	beq.n	8004abc <HAL_RCC_OscConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80049c0:	2300      	movs	r3, #0
 80049c2:	60bb      	str	r3, [r7, #8]
 80049c4:	4b87      	ldr	r3, [pc, #540]	; (8004be4 <HAL_RCC_OscConfig+0x4b4>)
 80049c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c8:	4a86      	ldr	r2, [pc, #536]	; (8004be4 <HAL_RCC_OscConfig+0x4b4>)
 80049ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ce:	6413      	str	r3, [r2, #64]	; 0x40
 80049d0:	4b84      	ldr	r3, [pc, #528]	; (8004be4 <HAL_RCC_OscConfig+0x4b4>)
 80049d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049d8:	60bb      	str	r3, [r7, #8]
 80049da:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80049dc:	4b82      	ldr	r3, [pc, #520]	; (8004be8 <HAL_RCC_OscConfig+0x4b8>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a81      	ldr	r2, [pc, #516]	; (8004be8 <HAL_RCC_OscConfig+0x4b8>)
 80049e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049e6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection enable */
    tickstart = HAL_GetTick();
 80049e8:	f7ff fe94 	bl	8004714 <HAL_GetTick>
 80049ec:	6378      	str	r0, [r7, #52]	; 0x34

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80049ee:	e008      	b.n	8004a02 <HAL_RCC_OscConfig+0x2d2>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80049f0:	f7ff fe90 	bl	8004714 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d901      	bls.n	8004a02 <HAL_RCC_OscConfig+0x2d2>
      {
        return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e0ec      	b.n	8004bdc <HAL_RCC_OscConfig+0x4ac>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004a02:	4b79      	ldr	r3, [pc, #484]	; (8004be8 <HAL_RCC_OscConfig+0x4b8>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0f0      	beq.n	80049f0 <HAL_RCC_OscConfig+0x2c0>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d106      	bne.n	8004a24 <HAL_RCC_OscConfig+0x2f4>
 8004a16:	4b73      	ldr	r3, [pc, #460]	; (8004be4 <HAL_RCC_OscConfig+0x4b4>)
 8004a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1a:	4a72      	ldr	r2, [pc, #456]	; (8004be4 <HAL_RCC_OscConfig+0x4b4>)
 8004a1c:	f043 0301 	orr.w	r3, r3, #1
 8004a20:	6713      	str	r3, [r2, #112]	; 0x70
 8004a22:	e01c      	b.n	8004a5e <HAL_RCC_OscConfig+0x32e>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	2b05      	cmp	r3, #5
 8004a2a:	d10c      	bne.n	8004a46 <HAL_RCC_OscConfig+0x316>
 8004a2c:	4b6d      	ldr	r3, [pc, #436]	; (8004be4 <HAL_RCC_OscConfig+0x4b4>)
 8004a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a30:	4a6c      	ldr	r2, [pc, #432]	; (8004be4 <HAL_RCC_OscConfig+0x4b4>)
 8004a32:	f043 0304 	orr.w	r3, r3, #4
 8004a36:	6713      	str	r3, [r2, #112]	; 0x70
 8004a38:	4b6a      	ldr	r3, [pc, #424]	; (8004be4 <HAL_RCC_OscConfig+0x4b4>)
 8004a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a3c:	4a69      	ldr	r2, [pc, #420]	; (8004be4 <HAL_RCC_OscConfig+0x4b4>)
 8004a3e:	f043 0301 	orr.w	r3, r3, #1
 8004a42:	6713      	str	r3, [r2, #112]	; 0x70
 8004a44:	e00b      	b.n	8004a5e <HAL_RCC_OscConfig+0x32e>
 8004a46:	4b67      	ldr	r3, [pc, #412]	; (8004be4 <HAL_RCC_OscConfig+0x4b4>)
 8004a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a4a:	4a66      	ldr	r2, [pc, #408]	; (8004be4 <HAL_RCC_OscConfig+0x4b4>)
 8004a4c:	f023 0301 	bic.w	r3, r3, #1
 8004a50:	6713      	str	r3, [r2, #112]	; 0x70
 8004a52:	4b64      	ldr	r3, [pc, #400]	; (8004be4 <HAL_RCC_OscConfig+0x4b4>)
 8004a54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a56:	4a63      	ldr	r2, [pc, #396]	; (8004be4 <HAL_RCC_OscConfig+0x4b4>)
 8004a58:	f023 0304 	bic.w	r3, r3, #4
 8004a5c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d015      	beq.n	8004a92 <HAL_RCC_OscConfig+0x362>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a66:	f7ff fe55 	bl	8004714 <HAL_GetTick>
 8004a6a:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a6c:	e00a      	b.n	8004a84 <HAL_RCC_OscConfig+0x354>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a6e:	f7ff fe51 	bl	8004714 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d901      	bls.n	8004a84 <HAL_RCC_OscConfig+0x354>
        {
          return HAL_TIMEOUT;
 8004a80:	2303      	movs	r3, #3
 8004a82:	e0ab      	b.n	8004bdc <HAL_RCC_OscConfig+0x4ac>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a84:	4b57      	ldr	r3, [pc, #348]	; (8004be4 <HAL_RCC_OscConfig+0x4b4>)
 8004a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d0ee      	beq.n	8004a6e <HAL_RCC_OscConfig+0x33e>
 8004a90:	e014      	b.n	8004abc <HAL_RCC_OscConfig+0x38c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a92:	f7ff fe3f 	bl	8004714 <HAL_GetTick>
 8004a96:	6378      	str	r0, [r7, #52]	; 0x34

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a98:	e00a      	b.n	8004ab0 <HAL_RCC_OscConfig+0x380>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a9a:	f7ff fe3b 	bl	8004714 <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d901      	bls.n	8004ab0 <HAL_RCC_OscConfig+0x380>
        {
          return HAL_TIMEOUT;
 8004aac:	2303      	movs	r3, #3
 8004aae:	e095      	b.n	8004bdc <HAL_RCC_OscConfig+0x4ac>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ab0:	4b4c      	ldr	r3, [pc, #304]	; (8004be4 <HAL_RCC_OscConfig+0x4b4>)
 8004ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ab4:	f003 0302 	and.w	r3, r3, #2
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1ee      	bne.n	8004a9a <HAL_RCC_OscConfig+0x36a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	699b      	ldr	r3, [r3, #24]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 808a 	beq.w	8004bda <HAL_RCC_OscConfig+0x4aa>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ac6:	4b47      	ldr	r3, [pc, #284]	; (8004be4 <HAL_RCC_OscConfig+0x4b4>)
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f003 030c 	and.w	r3, r3, #12
 8004ace:	2b08      	cmp	r3, #8
 8004ad0:	f000 8081 	beq.w	8004bd6 <HAL_RCC_OscConfig+0x4a6>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d164      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x476>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004adc:	4b43      	ldr	r3, [pc, #268]	; (8004bec <HAL_RCC_OscConfig+0x4bc>)
 8004ade:	2200      	movs	r2, #0
 8004ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ae2:	f7ff fe17 	bl	8004714 <HAL_GetTick>
 8004ae6:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae8:	e009      	b.n	8004afe <HAL_RCC_OscConfig+0x3ce>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004aea:	f7ff fe13 	bl	8004714 <HAL_GetTick>
 8004aee:	4602      	mov	r2, r0
 8004af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004af2:	1ad3      	subs	r3, r2, r3
 8004af4:	4a3e      	ldr	r2, [pc, #248]	; (8004bf0 <HAL_RCC_OscConfig+0x4c0>)
 8004af6:	4293      	cmp	r3, r2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x3ce>
          {
            return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e06e      	b.n	8004bdc <HAL_RCC_OscConfig+0x4ac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004afe:	4b39      	ldr	r3, [pc, #228]	; (8004be4 <HAL_RCC_OscConfig+0x4b4>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d1ef      	bne.n	8004aea <HAL_RCC_OscConfig+0x3ba>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	69da      	ldr	r2, [r3, #28]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	431a      	orrs	r2, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004b18:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	fa93 f3a3 	rbit	r3, r3
 8004b24:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	fab3 f383 	clz	r3, r3
 8004b2c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b30:	431a      	orrs	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b36:	085b      	lsrs	r3, r3, #1
 8004b38:	1e59      	subs	r1, r3, #1
 8004b3a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8004b3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b40:	69bb      	ldr	r3, [r7, #24]
 8004b42:	fa93 f3a3 	rbit	r3, r3
 8004b46:	617b      	str	r3, [r7, #20]
  return(result);
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	fab3 f383 	clz	r3, r3
 8004b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004b58:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
 8004b5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	fa93 f3a3 	rbit	r3, r3
 8004b64:	61fb      	str	r3, [r7, #28]
  return(result);
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	fab3 f383 	clz	r3, r3
 8004b6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b70:	491c      	ldr	r1, [pc, #112]	; (8004be4 <HAL_RCC_OscConfig+0x4b4>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << POSITION_VAL(RCC_PLLCFGR_PLLN))             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << POSITION_VAL(RCC_PLLCFGR_PLLP)) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << POSITION_VAL(RCC_PLLCFGR_PLLQ))));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b76:	4b1d      	ldr	r3, [pc, #116]	; (8004bec <HAL_RCC_OscConfig+0x4bc>)
 8004b78:	2201      	movs	r2, #1
 8004b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b7c:	f7ff fdca 	bl	8004714 <HAL_GetTick>
 8004b80:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b82:	e009      	b.n	8004b98 <HAL_RCC_OscConfig+0x468>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b84:	f7ff fdc6 	bl	8004714 <HAL_GetTick>
 8004b88:	4602      	mov	r2, r0
 8004b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	4a18      	ldr	r2, [pc, #96]	; (8004bf0 <HAL_RCC_OscConfig+0x4c0>)
 8004b90:	4293      	cmp	r3, r2
 8004b92:	d901      	bls.n	8004b98 <HAL_RCC_OscConfig+0x468>
          {
            return HAL_TIMEOUT;
 8004b94:	2303      	movs	r3, #3
 8004b96:	e021      	b.n	8004bdc <HAL_RCC_OscConfig+0x4ac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b98:	4b12      	ldr	r3, [pc, #72]	; (8004be4 <HAL_RCC_OscConfig+0x4b4>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d0ef      	beq.n	8004b84 <HAL_RCC_OscConfig+0x454>
 8004ba4:	e019      	b.n	8004bda <HAL_RCC_OscConfig+0x4aa>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ba6:	4b11      	ldr	r3, [pc, #68]	; (8004bec <HAL_RCC_OscConfig+0x4bc>)
 8004ba8:	2200      	movs	r2, #0
 8004baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bac:	f7ff fdb2 	bl	8004714 <HAL_GetTick>
 8004bb0:	6378      	str	r0, [r7, #52]	; 0x34

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bb2:	e009      	b.n	8004bc8 <HAL_RCC_OscConfig+0x498>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bb4:	f7ff fdae 	bl	8004714 <HAL_GetTick>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bbc:	1ad3      	subs	r3, r2, r3
 8004bbe:	4a0c      	ldr	r2, [pc, #48]	; (8004bf0 <HAL_RCC_OscConfig+0x4c0>)
 8004bc0:	4293      	cmp	r3, r2
 8004bc2:	d901      	bls.n	8004bc8 <HAL_RCC_OscConfig+0x498>
          {
            return HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	e009      	b.n	8004bdc <HAL_RCC_OscConfig+0x4ac>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bc8:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <HAL_RCC_OscConfig+0x4b4>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1ef      	bne.n	8004bb4 <HAL_RCC_OscConfig+0x484>
 8004bd4:	e001      	b.n	8004bda <HAL_RCC_OscConfig+0x4aa>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e000      	b.n	8004bdc <HAL_RCC_OscConfig+0x4ac>
    }
  }
  return HAL_OK;
 8004bda:	2300      	movs	r3, #0
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3738      	adds	r7, #56	; 0x38
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}
 8004be4:	40023800 	.word	0x40023800
 8004be8:	40007000 	.word	0x40007000
 8004bec:	42470060 	.word	0x42470060
 8004bf0:	001e8480 	.word	0x001e8480

08004bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b084      	sub	sp, #16
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	60fb      	str	r3, [r7, #12]
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8004c02:	4b74      	ldr	r3, [pc, #464]	; (8004dd4 <HAL_RCC_ClockConfig+0x1e0>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 030f 	and.w	r3, r3, #15
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d90c      	bls.n	8004c2a <HAL_RCC_ClockConfig+0x36>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c10:	4b70      	ldr	r3, [pc, #448]	; (8004dd4 <HAL_RCC_ClockConfig+0x1e0>)
 8004c12:	683a      	ldr	r2, [r7, #0]
 8004c14:	b2d2      	uxtb	r2, r2
 8004c16:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004c18:	4b6e      	ldr	r3, [pc, #440]	; (8004dd4 <HAL_RCC_ClockConfig+0x1e0>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 030f 	and.w	r3, r3, #15
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d001      	beq.n	8004c2a <HAL_RCC_ClockConfig+0x36>
    {
      return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e0cf      	b.n	8004dca <HAL_RCC_ClockConfig+0x1d6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0302 	and.w	r3, r3, #2
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d008      	beq.n	8004c48 <HAL_RCC_ClockConfig+0x54>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c36:	4b68      	ldr	r3, [pc, #416]	; (8004dd8 <HAL_RCC_ClockConfig+0x1e4>)
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	4965      	ldr	r1, [pc, #404]	; (8004dd8 <HAL_RCC_ClockConfig+0x1e4>)
 8004c44:	4313      	orrs	r3, r2
 8004c46:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f003 0301 	and.w	r3, r3, #1
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	f000 8086 	beq.w	8004d62 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d107      	bne.n	8004c6e <HAL_RCC_ClockConfig+0x7a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c5e:	4b5e      	ldr	r3, [pc, #376]	; (8004dd8 <HAL_RCC_ClockConfig+0x1e4>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d119      	bne.n	8004c9e <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e0ad      	b.n	8004dca <HAL_RCC_ClockConfig+0x1d6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	2b02      	cmp	r3, #2
 8004c74:	d003      	beq.n	8004c7e <HAL_RCC_ClockConfig+0x8a>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c7a:	2b03      	cmp	r3, #3
 8004c7c:	d107      	bne.n	8004c8e <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c7e:	4b56      	ldr	r3, [pc, #344]	; (8004dd8 <HAL_RCC_ClockConfig+0x1e4>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d109      	bne.n	8004c9e <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	e09d      	b.n	8004dca <HAL_RCC_ClockConfig+0x1d6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c8e:	4b52      	ldr	r3, [pc, #328]	; (8004dd8 <HAL_RCC_ClockConfig+0x1e4>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d101      	bne.n	8004c9e <HAL_RCC_ClockConfig+0xaa>
      {
        return HAL_ERROR;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	e095      	b.n	8004dca <HAL_RCC_ClockConfig+0x1d6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c9e:	4b4e      	ldr	r3, [pc, #312]	; (8004dd8 <HAL_RCC_ClockConfig+0x1e4>)
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f023 0203 	bic.w	r2, r3, #3
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	494b      	ldr	r1, [pc, #300]	; (8004dd8 <HAL_RCC_ClockConfig+0x1e4>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	608b      	str	r3, [r1, #8]
    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004cb0:	f7ff fd30 	bl	8004714 <HAL_GetTick>
 8004cb4:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d112      	bne.n	8004ce4 <HAL_RCC_ClockConfig+0xf0>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004cbe:	e00a      	b.n	8004cd6 <HAL_RCC_ClockConfig+0xe2>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cc0:	f7ff fd28 	bl	8004714 <HAL_GetTick>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d901      	bls.n	8004cd6 <HAL_RCC_ClockConfig+0xe2>
        {
          return HAL_TIMEOUT;
 8004cd2:	2303      	movs	r3, #3
 8004cd4:	e079      	b.n	8004dca <HAL_RCC_ClockConfig+0x1d6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8004cd6:	4b40      	ldr	r3, [pc, #256]	; (8004dd8 <HAL_RCC_ClockConfig+0x1e4>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f003 030c 	and.w	r3, r3, #12
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	d1ee      	bne.n	8004cc0 <HAL_RCC_ClockConfig+0xcc>
 8004ce2:	e03e      	b.n	8004d62 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d112      	bne.n	8004d12 <HAL_RCC_ClockConfig+0x11e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cec:	e00a      	b.n	8004d04 <HAL_RCC_ClockConfig+0x110>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cee:	f7ff fd11 	bl	8004714 <HAL_GetTick>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	1ad3      	subs	r3, r2, r3
 8004cf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d901      	bls.n	8004d04 <HAL_RCC_ClockConfig+0x110>
        {
          return HAL_TIMEOUT;
 8004d00:	2303      	movs	r3, #3
 8004d02:	e062      	b.n	8004dca <HAL_RCC_ClockConfig+0x1d6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d04:	4b34      	ldr	r3, [pc, #208]	; (8004dd8 <HAL_RCC_ClockConfig+0x1e4>)
 8004d06:	689b      	ldr	r3, [r3, #8]
 8004d08:	f003 030c 	and.w	r3, r3, #12
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	d1ee      	bne.n	8004cee <HAL_RCC_ClockConfig+0xfa>
 8004d10:	e027      	b.n	8004d62 <HAL_RCC_ClockConfig+0x16e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	2b03      	cmp	r3, #3
 8004d18:	d11d      	bne.n	8004d56 <HAL_RCC_ClockConfig+0x162>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8004d1a:	e00a      	b.n	8004d32 <HAL_RCC_ClockConfig+0x13e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d1c:	f7ff fcfa 	bl	8004714 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d901      	bls.n	8004d32 <HAL_RCC_ClockConfig+0x13e>
        {
          return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e04b      	b.n	8004dca <HAL_RCC_ClockConfig+0x1d6>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLRCLK)
 8004d32:	4b29      	ldr	r3, [pc, #164]	; (8004dd8 <HAL_RCC_ClockConfig+0x1e4>)
 8004d34:	689b      	ldr	r3, [r3, #8]
 8004d36:	f003 030c 	and.w	r3, r3, #12
 8004d3a:	2b0c      	cmp	r3, #12
 8004d3c:	d1ee      	bne.n	8004d1c <HAL_RCC_ClockConfig+0x128>
 8004d3e:	e010      	b.n	8004d62 <HAL_RCC_ClockConfig+0x16e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d40:	f7ff fce8 	bl	8004714 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d901      	bls.n	8004d56 <HAL_RCC_ClockConfig+0x162>
        {
          return HAL_TIMEOUT;
 8004d52:	2303      	movs	r3, #3
 8004d54:	e039      	b.n	8004dca <HAL_RCC_ClockConfig+0x1d6>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d56:	4b20      	ldr	r3, [pc, #128]	; (8004dd8 <HAL_RCC_ClockConfig+0x1e4>)
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	f003 030c 	and.w	r3, r3, #12
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1ee      	bne.n	8004d40 <HAL_RCC_ClockConfig+0x14c>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8004d62:	4b1c      	ldr	r3, [pc, #112]	; (8004dd4 <HAL_RCC_ClockConfig+0x1e0>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 030f 	and.w	r3, r3, #15
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d20c      	bcs.n	8004d8a <HAL_RCC_ClockConfig+0x196>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d70:	4b18      	ldr	r3, [pc, #96]	; (8004dd4 <HAL_RCC_ClockConfig+0x1e0>)
 8004d72:	683a      	ldr	r2, [r7, #0]
 8004d74:	b2d2      	uxtb	r2, r2
 8004d76:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004d78:	4b16      	ldr	r3, [pc, #88]	; (8004dd4 <HAL_RCC_ClockConfig+0x1e0>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 030f 	and.w	r3, r3, #15
 8004d80:	683a      	ldr	r2, [r7, #0]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d001      	beq.n	8004d8a <HAL_RCC_ClockConfig+0x196>
    {
      return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e01f      	b.n	8004dca <HAL_RCC_ClockConfig+0x1d6>
    }
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0304 	and.w	r3, r3, #4
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d008      	beq.n	8004da8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d96:	4b10      	ldr	r3, [pc, #64]	; (8004dd8 <HAL_RCC_ClockConfig+0x1e4>)
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	490d      	ldr	r1, [pc, #52]	; (8004dd8 <HAL_RCC_ClockConfig+0x1e4>)
 8004da4:	4313      	orrs	r3, r2
 8004da6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0308 	and.w	r3, r3, #8
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d009      	beq.n	8004dc8 <HAL_RCC_ClockConfig+0x1d4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004db4:	4b08      	ldr	r3, [pc, #32]	; (8004dd8 <HAL_RCC_ClockConfig+0x1e4>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	4905      	ldr	r1, [pc, #20]	; (8004dd8 <HAL_RCC_ClockConfig+0x1e4>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	608b      	str	r3, [r1, #8]
  //SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];

  /* Configure the source of time base considering new system clocks settings*/
  //HAL_InitTick (TICK_INT_PRIORITY);

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3710      	adds	r7, #16
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}
 8004dd2:	bf00      	nop
 8004dd4:	40023c00 	.word	0x40023c00
 8004dd8:	40023800 	.word	0x40023800

08004ddc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  //return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> POSITION_VAL(RCC_CFGR_PPRE1)]);
  return 7.37E6;
 8004de0:	4b02      	ldr	r3, [pc, #8]	; (8004dec <HAL_RCC_GetPCLK1Freq+0x10>)
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bc80      	pop	{r7}
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	00707510 	.word	0x00707510

08004df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004df0:	b480      	push	{r7}
 8004df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  //return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> POSITION_VAL(RCC_CFGR_PPRE2)]);
  return 7.37E6;
 8004df4:	4b02      	ldr	r3, [pc, #8]	; (8004e00 <HAL_RCC_GetPCLK2Freq+0x10>)
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	bc80      	pop	{r7}
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	00707510 	.word	0x00707510

08004e04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b089      	sub	sp, #36	; 0x24
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e12:	2300      	movs	r3, #0
 8004e14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e16:	2300      	movs	r3, #0
 8004e18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	61fb      	str	r3, [r7, #28]
 8004e1e:	e16b      	b.n	80050f8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e20:	2201      	movs	r2, #1
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	fa02 f303 	lsl.w	r3, r2, r3
 8004e28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	697a      	ldr	r2, [r7, #20]
 8004e30:	4013      	ands	r3, r2
 8004e32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	f040 815a 	bne.w	80050f2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	2b02      	cmp	r3, #2
 8004e44:	d003      	beq.n	8004e4e <HAL_GPIO_Init+0x4a>
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	2b12      	cmp	r3, #18
 8004e4c:	d123      	bne.n	8004e96 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	08da      	lsrs	r2, r3, #3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	3208      	adds	r2, #8
 8004e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e5c:	69fb      	ldr	r3, [r7, #28]
 8004e5e:	f003 0307 	and.w	r3, r3, #7
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	220f      	movs	r2, #15
 8004e66:	fa02 f303 	lsl.w	r3, r2, r3
 8004e6a:	43db      	mvns	r3, r3
 8004e6c:	69ba      	ldr	r2, [r7, #24]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	691a      	ldr	r2, [r3, #16]
 8004e76:	69fb      	ldr	r3, [r7, #28]
 8004e78:	f003 0307 	and.w	r3, r3, #7
 8004e7c:	009b      	lsls	r3, r3, #2
 8004e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	08da      	lsrs	r2, r3, #3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	3208      	adds	r2, #8
 8004e90:	69b9      	ldr	r1, [r7, #24]
 8004e92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	005b      	lsls	r3, r3, #1
 8004ea0:	2203      	movs	r2, #3
 8004ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea6:	43db      	mvns	r3, r3
 8004ea8:	69ba      	ldr	r2, [r7, #24]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	f003 0203 	and.w	r2, r3, #3
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	005b      	lsls	r3, r3, #1
 8004eba:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	4313      	orrs	r3, r2
 8004ec2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	69ba      	ldr	r2, [r7, #24]
 8004ec8:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d00b      	beq.n	8004eea <HAL_GPIO_Init+0xe6>
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	2b02      	cmp	r3, #2
 8004ed8:	d007      	beq.n	8004eea <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004ede:	2b11      	cmp	r3, #17
 8004ee0:	d003      	beq.n	8004eea <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	2b12      	cmp	r3, #18
 8004ee8:	d130      	bne.n	8004f4c <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	005b      	lsls	r3, r3, #1
 8004ef4:	2203      	movs	r2, #3
 8004ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8004efa:	43db      	mvns	r3, r3
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	4013      	ands	r3, r2
 8004f00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	68da      	ldr	r2, [r3, #12]
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	005b      	lsls	r3, r3, #1
 8004f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0e:	69ba      	ldr	r2, [r7, #24]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	69ba      	ldr	r2, [r7, #24]
 8004f18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f20:	2201      	movs	r2, #1
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	fa02 f303 	lsl.w	r3, r2, r3
 8004f28:	43db      	mvns	r3, r3
 8004f2a:	69ba      	ldr	r2, [r7, #24]
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	091b      	lsrs	r3, r3, #4
 8004f36:	f003 0201 	and.w	r2, r3, #1
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	68db      	ldr	r3, [r3, #12]
 8004f50:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	005b      	lsls	r3, r3, #1
 8004f56:	2203      	movs	r2, #3
 8004f58:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5c:	43db      	mvns	r3, r3
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	4013      	ands	r3, r2
 8004f62:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	689a      	ldr	r2, [r3, #8]
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f70:	69ba      	ldr	r2, [r7, #24]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	69ba      	ldr	r2, [r7, #24]
 8004f7a:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	f000 80b4 	beq.w	80050f2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	60fb      	str	r3, [r7, #12]
 8004f8e:	4b5f      	ldr	r3, [pc, #380]	; (800510c <HAL_GPIO_Init+0x308>)
 8004f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f92:	4a5e      	ldr	r2, [pc, #376]	; (800510c <HAL_GPIO_Init+0x308>)
 8004f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f98:	6453      	str	r3, [r2, #68]	; 0x44
 8004f9a:	4b5c      	ldr	r3, [pc, #368]	; (800510c <HAL_GPIO_Init+0x308>)
 8004f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004fa6:	4a5a      	ldr	r2, [pc, #360]	; (8005110 <HAL_GPIO_Init+0x30c>)
 8004fa8:	69fb      	ldr	r3, [r7, #28]
 8004faa:	089b      	lsrs	r3, r3, #2
 8004fac:	3302      	adds	r3, #2
 8004fae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	f003 0303 	and.w	r3, r3, #3
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	220f      	movs	r2, #15
 8004fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc2:	43db      	mvns	r3, r3
 8004fc4:	69ba      	ldr	r2, [r7, #24]
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a51      	ldr	r2, [pc, #324]	; (8005114 <HAL_GPIO_Init+0x310>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d02b      	beq.n	800502a <HAL_GPIO_Init+0x226>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a50      	ldr	r2, [pc, #320]	; (8005118 <HAL_GPIO_Init+0x314>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d025      	beq.n	8005026 <HAL_GPIO_Init+0x222>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a4f      	ldr	r2, [pc, #316]	; (800511c <HAL_GPIO_Init+0x318>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d01f      	beq.n	8005022 <HAL_GPIO_Init+0x21e>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a4e      	ldr	r2, [pc, #312]	; (8005120 <HAL_GPIO_Init+0x31c>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d019      	beq.n	800501e <HAL_GPIO_Init+0x21a>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a4d      	ldr	r2, [pc, #308]	; (8005124 <HAL_GPIO_Init+0x320>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d013      	beq.n	800501a <HAL_GPIO_Init+0x216>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a4c      	ldr	r2, [pc, #304]	; (8005128 <HAL_GPIO_Init+0x324>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d00d      	beq.n	8005016 <HAL_GPIO_Init+0x212>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a4b      	ldr	r2, [pc, #300]	; (800512c <HAL_GPIO_Init+0x328>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d007      	beq.n	8005012 <HAL_GPIO_Init+0x20e>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a4a      	ldr	r2, [pc, #296]	; (8005130 <HAL_GPIO_Init+0x32c>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d101      	bne.n	800500e <HAL_GPIO_Init+0x20a>
 800500a:	2307      	movs	r3, #7
 800500c:	e00e      	b.n	800502c <HAL_GPIO_Init+0x228>
 800500e:	2308      	movs	r3, #8
 8005010:	e00c      	b.n	800502c <HAL_GPIO_Init+0x228>
 8005012:	2306      	movs	r3, #6
 8005014:	e00a      	b.n	800502c <HAL_GPIO_Init+0x228>
 8005016:	2305      	movs	r3, #5
 8005018:	e008      	b.n	800502c <HAL_GPIO_Init+0x228>
 800501a:	2304      	movs	r3, #4
 800501c:	e006      	b.n	800502c <HAL_GPIO_Init+0x228>
 800501e:	2303      	movs	r3, #3
 8005020:	e004      	b.n	800502c <HAL_GPIO_Init+0x228>
 8005022:	2302      	movs	r3, #2
 8005024:	e002      	b.n	800502c <HAL_GPIO_Init+0x228>
 8005026:	2301      	movs	r3, #1
 8005028:	e000      	b.n	800502c <HAL_GPIO_Init+0x228>
 800502a:	2300      	movs	r3, #0
 800502c:	69fa      	ldr	r2, [r7, #28]
 800502e:	f002 0203 	and.w	r2, r2, #3
 8005032:	0092      	lsls	r2, r2, #2
 8005034:	4093      	lsls	r3, r2
 8005036:	69ba      	ldr	r2, [r7, #24]
 8005038:	4313      	orrs	r3, r2
 800503a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800503c:	4934      	ldr	r1, [pc, #208]	; (8005110 <HAL_GPIO_Init+0x30c>)
 800503e:	69fb      	ldr	r3, [r7, #28]
 8005040:	089b      	lsrs	r3, r3, #2
 8005042:	3302      	adds	r3, #2
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800504a:	4b3a      	ldr	r3, [pc, #232]	; (8005134 <HAL_GPIO_Init+0x330>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	43db      	mvns	r3, r3
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	4013      	ands	r3, r2
 8005058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	4313      	orrs	r3, r2
 800506c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800506e:	4a31      	ldr	r2, [pc, #196]	; (8005134 <HAL_GPIO_Init+0x330>)
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005074:	4b2f      	ldr	r3, [pc, #188]	; (8005134 <HAL_GPIO_Init+0x330>)
 8005076:	685b      	ldr	r3, [r3, #4]
 8005078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	43db      	mvns	r3, r3
 800507e:	69ba      	ldr	r2, [r7, #24]
 8005080:	4013      	ands	r3, r2
 8005082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	4313      	orrs	r3, r2
 8005096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005098:	4a26      	ldr	r2, [pc, #152]	; (8005134 <HAL_GPIO_Init+0x330>)
 800509a:	69bb      	ldr	r3, [r7, #24]
 800509c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800509e:	4b25      	ldr	r3, [pc, #148]	; (8005134 <HAL_GPIO_Init+0x330>)
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	43db      	mvns	r3, r3
 80050a8:	69ba      	ldr	r2, [r7, #24]
 80050aa:	4013      	ands	r3, r2
 80050ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d003      	beq.n	80050c2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	4313      	orrs	r3, r2
 80050c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80050c2:	4a1c      	ldr	r2, [pc, #112]	; (8005134 <HAL_GPIO_Init+0x330>)
 80050c4:	69bb      	ldr	r3, [r7, #24]
 80050c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80050c8:	4b1a      	ldr	r3, [pc, #104]	; (8005134 <HAL_GPIO_Init+0x330>)
 80050ca:	68db      	ldr	r3, [r3, #12]
 80050cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	43db      	mvns	r3, r3
 80050d2:	69ba      	ldr	r2, [r7, #24]
 80050d4:	4013      	ands	r3, r2
 80050d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d003      	beq.n	80050ec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80050ec:	4a11      	ldr	r2, [pc, #68]	; (8005134 <HAL_GPIO_Init+0x330>)
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	3301      	adds	r3, #1
 80050f6:	61fb      	str	r3, [r7, #28]
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	2b0f      	cmp	r3, #15
 80050fc:	f67f ae90 	bls.w	8004e20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005100:	bf00      	nop
 8005102:	bf00      	nop
 8005104:	3724      	adds	r7, #36	; 0x24
 8005106:	46bd      	mov	sp, r7
 8005108:	bc80      	pop	{r7}
 800510a:	4770      	bx	lr
 800510c:	40023800 	.word	0x40023800
 8005110:	40013800 	.word	0x40013800
 8005114:	40020000 	.word	0x40020000
 8005118:	40020400 	.word	0x40020400
 800511c:	40020800 	.word	0x40020800
 8005120:	40020c00 	.word	0x40020c00
 8005124:	40021000 	.word	0x40021000
 8005128:	40021400 	.word	0x40021400
 800512c:	40021800 	.word	0x40021800
 8005130:	40021c00 	.word	0x40021c00
 8005134:	40013c00 	.word	0x40013c00

08005138 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
 8005140:	460b      	mov	r3, r1
 8005142:	807b      	strh	r3, [r7, #2]
 8005144:	4613      	mov	r3, r2
 8005146:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005148:	787b      	ldrb	r3, [r7, #1]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d003      	beq.n	8005156 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800514e:	887a      	ldrh	r2, [r7, #2]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005154:	e003      	b.n	800515e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005156:	887b      	ldrh	r3, [r7, #2]
 8005158:	041a      	lsls	r2, r3, #16
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	619a      	str	r2, [r3, #24]
}
 800515e:	bf00      	nop
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	bc80      	pop	{r7}
 8005166:	4770      	bx	lr

08005168 <UART_SetConfig>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005168:	b5b0      	push	{r4, r5, r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0x00U;
 8005170:	2300      	movs	r3, #0
 8005172:	60fb      	str	r3, [r7, #12]
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
  assert_param(IS_UART_PARITY(huart->Init.Parity));
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = huart->Instance->CR2;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	60fb      	str	r3, [r7, #12]

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005182:	60fb      	str	r3, [r7, #12]

  /* Configure the UART Stop Bits: Set STOP[13:12] bits according to huart->Init.StopBits value */
  tmpreg |= (uint32_t)huart->Init.StopBits;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	4313      	orrs	r3, r2
 800518c:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR2 */
  WRITE_REG(huart->Instance->CR2, (uint32_t)tmpreg);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68fa      	ldr	r2, [r7, #12]
 8005194:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = huart->Instance->CR1;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	60fb      	str	r3, [r7, #12]

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80051a4:	f023 030c 	bic.w	r3, r3, #12
 80051a8:	60fb      	str	r3, [r7, #12]
  /* Configure the UART Word Length, Parity and mode:
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg |= (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	431a      	orrs	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	431a      	orrs	r2, r3
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	4313      	orrs	r3, r2
 80051c0:	68fa      	ldr	r2, [r7, #12]
 80051c2:	4313      	orrs	r3, r2
 80051c4:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR1 */
  WRITE_REG(huart->Instance->CR1, (uint32_t)tmpreg);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68fa      	ldr	r2, [r7, #12]
 80051cc:	60da      	str	r2, [r3, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  tmpreg = huart->Instance->CR3;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	695b      	ldr	r3, [r3, #20]
 80051d4:	60fb      	str	r3, [r7, #12]

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR3_RTSE | USART_CR3_CTSE));
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051dc:	60fb      	str	r3, [r7, #12]

  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  tmpreg |= huart->Init.HwFlowCtl;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	699b      	ldr	r3, [r3, #24]
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Write to USART CR3 */
  WRITE_REG(huart->Instance->CR3, (uint32_t)tmpreg);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	69db      	ldr	r3, [r3, #28]
 80051f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051f8:	f040 80e4 	bne.w	80053c4 <UART_SetConfig+0x25c>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4aab      	ldr	r2, [pc, #684]	; (80054b0 <UART_SetConfig+0x348>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d004      	beq.n	8005210 <UART_SetConfig+0xa8>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4aaa      	ldr	r2, [pc, #680]	; (80054b4 <UART_SetConfig+0x34c>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d16c      	bne.n	80052ea <UART_SetConfig+0x182>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005210:	f7ff fdee 	bl	8004df0 <HAL_RCC_GetPCLK2Freq>
 8005214:	4602      	mov	r2, r0
 8005216:	4613      	mov	r3, r2
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	009a      	lsls	r2, r3, #2
 800521e:	441a      	add	r2, r3
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	fbb2 f3f3 	udiv	r3, r2, r3
 800522a:	4aa3      	ldr	r2, [pc, #652]	; (80054b8 <UART_SetConfig+0x350>)
 800522c:	fba2 2303 	umull	r2, r3, r2, r3
 8005230:	095b      	lsrs	r3, r3, #5
 8005232:	011c      	lsls	r4, r3, #4
 8005234:	f7ff fddc 	bl	8004df0 <HAL_RCC_GetPCLK2Freq>
 8005238:	4602      	mov	r2, r0
 800523a:	4613      	mov	r3, r2
 800523c:	009b      	lsls	r3, r3, #2
 800523e:	4413      	add	r3, r2
 8005240:	009a      	lsls	r2, r3, #2
 8005242:	441a      	add	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	685b      	ldr	r3, [r3, #4]
 8005248:	005b      	lsls	r3, r3, #1
 800524a:	fbb2 f5f3 	udiv	r5, r2, r3
 800524e:	f7ff fdcf 	bl	8004df0 <HAL_RCC_GetPCLK2Freq>
 8005252:	4602      	mov	r2, r0
 8005254:	4613      	mov	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	009a      	lsls	r2, r3, #2
 800525c:	441a      	add	r2, r3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	005b      	lsls	r3, r3, #1
 8005264:	fbb2 f3f3 	udiv	r3, r2, r3
 8005268:	4a93      	ldr	r2, [pc, #588]	; (80054b8 <UART_SetConfig+0x350>)
 800526a:	fba2 2303 	umull	r2, r3, r2, r3
 800526e:	095b      	lsrs	r3, r3, #5
 8005270:	2264      	movs	r2, #100	; 0x64
 8005272:	fb02 f303 	mul.w	r3, r2, r3
 8005276:	1aeb      	subs	r3, r5, r3
 8005278:	00db      	lsls	r3, r3, #3
 800527a:	3332      	adds	r3, #50	; 0x32
 800527c:	4a8e      	ldr	r2, [pc, #568]	; (80054b8 <UART_SetConfig+0x350>)
 800527e:	fba2 2303 	umull	r2, r3, r2, r3
 8005282:	095b      	lsrs	r3, r3, #5
 8005284:	005b      	lsls	r3, r3, #1
 8005286:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800528a:	441c      	add	r4, r3
 800528c:	f7ff fdb0 	bl	8004df0 <HAL_RCC_GetPCLK2Freq>
 8005290:	4602      	mov	r2, r0
 8005292:	4613      	mov	r3, r2
 8005294:	009b      	lsls	r3, r3, #2
 8005296:	4413      	add	r3, r2
 8005298:	009a      	lsls	r2, r3, #2
 800529a:	441a      	add	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	005b      	lsls	r3, r3, #1
 80052a2:	fbb2 f5f3 	udiv	r5, r2, r3
 80052a6:	f7ff fda3 	bl	8004df0 <HAL_RCC_GetPCLK2Freq>
 80052aa:	4602      	mov	r2, r0
 80052ac:	4613      	mov	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4413      	add	r3, r2
 80052b2:	009a      	lsls	r2, r3, #2
 80052b4:	441a      	add	r2, r3
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	005b      	lsls	r3, r3, #1
 80052bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c0:	4a7d      	ldr	r2, [pc, #500]	; (80054b8 <UART_SetConfig+0x350>)
 80052c2:	fba2 2303 	umull	r2, r3, r2, r3
 80052c6:	095b      	lsrs	r3, r3, #5
 80052c8:	2264      	movs	r2, #100	; 0x64
 80052ca:	fb02 f303 	mul.w	r3, r2, r3
 80052ce:	1aeb      	subs	r3, r5, r3
 80052d0:	00db      	lsls	r3, r3, #3
 80052d2:	3332      	adds	r3, #50	; 0x32
 80052d4:	4a78      	ldr	r2, [pc, #480]	; (80054b8 <UART_SetConfig+0x350>)
 80052d6:	fba2 2303 	umull	r2, r3, r2, r3
 80052da:	095b      	lsrs	r3, r3, #5
 80052dc:	f003 0207 	and.w	r2, r3, #7
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	4422      	add	r2, r4
 80052e6:	609a      	str	r2, [r3, #8]
 80052e8:	e154      	b.n	8005594 <UART_SetConfig+0x42c>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80052ea:	f7ff fd77 	bl	8004ddc <HAL_RCC_GetPCLK1Freq>
 80052ee:	4602      	mov	r2, r0
 80052f0:	4613      	mov	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	4413      	add	r3, r2
 80052f6:	009a      	lsls	r2, r3, #2
 80052f8:	441a      	add	r2, r3
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	005b      	lsls	r3, r3, #1
 8005300:	fbb2 f3f3 	udiv	r3, r2, r3
 8005304:	4a6c      	ldr	r2, [pc, #432]	; (80054b8 <UART_SetConfig+0x350>)
 8005306:	fba2 2303 	umull	r2, r3, r2, r3
 800530a:	095b      	lsrs	r3, r3, #5
 800530c:	011c      	lsls	r4, r3, #4
 800530e:	f7ff fd65 	bl	8004ddc <HAL_RCC_GetPCLK1Freq>
 8005312:	4602      	mov	r2, r0
 8005314:	4613      	mov	r3, r2
 8005316:	009b      	lsls	r3, r3, #2
 8005318:	4413      	add	r3, r2
 800531a:	009a      	lsls	r2, r3, #2
 800531c:	441a      	add	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	005b      	lsls	r3, r3, #1
 8005324:	fbb2 f5f3 	udiv	r5, r2, r3
 8005328:	f7ff fd58 	bl	8004ddc <HAL_RCC_GetPCLK1Freq>
 800532c:	4602      	mov	r2, r0
 800532e:	4613      	mov	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	4413      	add	r3, r2
 8005334:	009a      	lsls	r2, r3, #2
 8005336:	441a      	add	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005342:	4a5d      	ldr	r2, [pc, #372]	; (80054b8 <UART_SetConfig+0x350>)
 8005344:	fba2 2303 	umull	r2, r3, r2, r3
 8005348:	095b      	lsrs	r3, r3, #5
 800534a:	2264      	movs	r2, #100	; 0x64
 800534c:	fb02 f303 	mul.w	r3, r2, r3
 8005350:	1aeb      	subs	r3, r5, r3
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	3332      	adds	r3, #50	; 0x32
 8005356:	4a58      	ldr	r2, [pc, #352]	; (80054b8 <UART_SetConfig+0x350>)
 8005358:	fba2 2303 	umull	r2, r3, r2, r3
 800535c:	095b      	lsrs	r3, r3, #5
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005364:	441c      	add	r4, r3
 8005366:	f7ff fd39 	bl	8004ddc <HAL_RCC_GetPCLK1Freq>
 800536a:	4602      	mov	r2, r0
 800536c:	4613      	mov	r3, r2
 800536e:	009b      	lsls	r3, r3, #2
 8005370:	4413      	add	r3, r2
 8005372:	009a      	lsls	r2, r3, #2
 8005374:	441a      	add	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	fbb2 f5f3 	udiv	r5, r2, r3
 8005380:	f7ff fd2c 	bl	8004ddc <HAL_RCC_GetPCLK1Freq>
 8005384:	4602      	mov	r2, r0
 8005386:	4613      	mov	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	4413      	add	r3, r2
 800538c:	009a      	lsls	r2, r3, #2
 800538e:	441a      	add	r2, r3
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	005b      	lsls	r3, r3, #1
 8005396:	fbb2 f3f3 	udiv	r3, r2, r3
 800539a:	4a47      	ldr	r2, [pc, #284]	; (80054b8 <UART_SetConfig+0x350>)
 800539c:	fba2 2303 	umull	r2, r3, r2, r3
 80053a0:	095b      	lsrs	r3, r3, #5
 80053a2:	2264      	movs	r2, #100	; 0x64
 80053a4:	fb02 f303 	mul.w	r3, r2, r3
 80053a8:	1aeb      	subs	r3, r5, r3
 80053aa:	00db      	lsls	r3, r3, #3
 80053ac:	3332      	adds	r3, #50	; 0x32
 80053ae:	4a42      	ldr	r2, [pc, #264]	; (80054b8 <UART_SetConfig+0x350>)
 80053b0:	fba2 2303 	umull	r2, r3, r2, r3
 80053b4:	095b      	lsrs	r3, r3, #5
 80053b6:	f003 0207 	and.w	r2, r3, #7
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4422      	add	r2, r4
 80053c0:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80053c2:	e0e7      	b.n	8005594 <UART_SetConfig+0x42c>
    if((huart->Instance == USART1) || (huart->Instance == USART6))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a39      	ldr	r2, [pc, #228]	; (80054b0 <UART_SetConfig+0x348>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d004      	beq.n	80053d8 <UART_SetConfig+0x270>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a38      	ldr	r2, [pc, #224]	; (80054b4 <UART_SetConfig+0x34c>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d171      	bne.n	80054bc <UART_SetConfig+0x354>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80053d8:	f7ff fd0a 	bl	8004df0 <HAL_RCC_GetPCLK2Freq>
 80053dc:	4602      	mov	r2, r0
 80053de:	4613      	mov	r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	4413      	add	r3, r2
 80053e4:	009a      	lsls	r2, r3, #2
 80053e6:	441a      	add	r2, r3
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	009b      	lsls	r3, r3, #2
 80053ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f2:	4a31      	ldr	r2, [pc, #196]	; (80054b8 <UART_SetConfig+0x350>)
 80053f4:	fba2 2303 	umull	r2, r3, r2, r3
 80053f8:	095b      	lsrs	r3, r3, #5
 80053fa:	011c      	lsls	r4, r3, #4
 80053fc:	f7ff fcf8 	bl	8004df0 <HAL_RCC_GetPCLK2Freq>
 8005400:	4602      	mov	r2, r0
 8005402:	4613      	mov	r3, r2
 8005404:	009b      	lsls	r3, r3, #2
 8005406:	4413      	add	r3, r2
 8005408:	009a      	lsls	r2, r3, #2
 800540a:	441a      	add	r2, r3
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	fbb2 f5f3 	udiv	r5, r2, r3
 8005416:	f7ff fceb 	bl	8004df0 <HAL_RCC_GetPCLK2Freq>
 800541a:	4602      	mov	r2, r0
 800541c:	4613      	mov	r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4413      	add	r3, r2
 8005422:	009a      	lsls	r2, r3, #2
 8005424:	441a      	add	r2, r3
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	009b      	lsls	r3, r3, #2
 800542c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005430:	4a21      	ldr	r2, [pc, #132]	; (80054b8 <UART_SetConfig+0x350>)
 8005432:	fba2 2303 	umull	r2, r3, r2, r3
 8005436:	095b      	lsrs	r3, r3, #5
 8005438:	2264      	movs	r2, #100	; 0x64
 800543a:	fb02 f303 	mul.w	r3, r2, r3
 800543e:	1aeb      	subs	r3, r5, r3
 8005440:	011b      	lsls	r3, r3, #4
 8005442:	3332      	adds	r3, #50	; 0x32
 8005444:	4a1c      	ldr	r2, [pc, #112]	; (80054b8 <UART_SetConfig+0x350>)
 8005446:	fba2 2303 	umull	r2, r3, r2, r3
 800544a:	095b      	lsrs	r3, r3, #5
 800544c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005450:	441c      	add	r4, r3
 8005452:	f7ff fccd 	bl	8004df0 <HAL_RCC_GetPCLK2Freq>
 8005456:	4602      	mov	r2, r0
 8005458:	4613      	mov	r3, r2
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	4413      	add	r3, r2
 800545e:	009a      	lsls	r2, r3, #2
 8005460:	441a      	add	r2, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	fbb2 f5f3 	udiv	r5, r2, r3
 800546c:	f7ff fcc0 	bl	8004df0 <HAL_RCC_GetPCLK2Freq>
 8005470:	4602      	mov	r2, r0
 8005472:	4613      	mov	r3, r2
 8005474:	009b      	lsls	r3, r3, #2
 8005476:	4413      	add	r3, r2
 8005478:	009a      	lsls	r2, r3, #2
 800547a:	441a      	add	r2, r3
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	fbb2 f3f3 	udiv	r3, r2, r3
 8005486:	4a0c      	ldr	r2, [pc, #48]	; (80054b8 <UART_SetConfig+0x350>)
 8005488:	fba2 2303 	umull	r2, r3, r2, r3
 800548c:	095b      	lsrs	r3, r3, #5
 800548e:	2264      	movs	r2, #100	; 0x64
 8005490:	fb02 f303 	mul.w	r3, r2, r3
 8005494:	1aeb      	subs	r3, r5, r3
 8005496:	011b      	lsls	r3, r3, #4
 8005498:	3332      	adds	r3, #50	; 0x32
 800549a:	4a07      	ldr	r2, [pc, #28]	; (80054b8 <UART_SetConfig+0x350>)
 800549c:	fba2 2303 	umull	r2, r3, r2, r3
 80054a0:	095b      	lsrs	r3, r3, #5
 80054a2:	f003 020f 	and.w	r2, r3, #15
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4422      	add	r2, r4
 80054ac:	609a      	str	r2, [r3, #8]
 80054ae:	e071      	b.n	8005594 <UART_SetConfig+0x42c>
 80054b0:	40011000 	.word	0x40011000
 80054b4:	40011400 	.word	0x40011400
 80054b8:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80054bc:	f7ff fc8e 	bl	8004ddc <HAL_RCC_GetPCLK1Freq>
 80054c0:	4602      	mov	r2, r0
 80054c2:	4613      	mov	r3, r2
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	4413      	add	r3, r2
 80054c8:	009a      	lsls	r2, r3, #2
 80054ca:	441a      	add	r2, r3
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80054d6:	4a31      	ldr	r2, [pc, #196]	; (800559c <UART_SetConfig+0x434>)
 80054d8:	fba2 2303 	umull	r2, r3, r2, r3
 80054dc:	095b      	lsrs	r3, r3, #5
 80054de:	011c      	lsls	r4, r3, #4
 80054e0:	f7ff fc7c 	bl	8004ddc <HAL_RCC_GetPCLK1Freq>
 80054e4:	4602      	mov	r2, r0
 80054e6:	4613      	mov	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	009a      	lsls	r2, r3, #2
 80054ee:	441a      	add	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	fbb2 f5f3 	udiv	r5, r2, r3
 80054fa:	f7ff fc6f 	bl	8004ddc <HAL_RCC_GetPCLK1Freq>
 80054fe:	4602      	mov	r2, r0
 8005500:	4613      	mov	r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4413      	add	r3, r2
 8005506:	009a      	lsls	r2, r3, #2
 8005508:	441a      	add	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	fbb2 f3f3 	udiv	r3, r2, r3
 8005514:	4a21      	ldr	r2, [pc, #132]	; (800559c <UART_SetConfig+0x434>)
 8005516:	fba2 2303 	umull	r2, r3, r2, r3
 800551a:	095b      	lsrs	r3, r3, #5
 800551c:	2264      	movs	r2, #100	; 0x64
 800551e:	fb02 f303 	mul.w	r3, r2, r3
 8005522:	1aeb      	subs	r3, r5, r3
 8005524:	011b      	lsls	r3, r3, #4
 8005526:	3332      	adds	r3, #50	; 0x32
 8005528:	4a1c      	ldr	r2, [pc, #112]	; (800559c <UART_SetConfig+0x434>)
 800552a:	fba2 2303 	umull	r2, r3, r2, r3
 800552e:	095b      	lsrs	r3, r3, #5
 8005530:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005534:	441c      	add	r4, r3
 8005536:	f7ff fc51 	bl	8004ddc <HAL_RCC_GetPCLK1Freq>
 800553a:	4602      	mov	r2, r0
 800553c:	4613      	mov	r3, r2
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	009a      	lsls	r2, r3, #2
 8005544:	441a      	add	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	fbb2 f5f3 	udiv	r5, r2, r3
 8005550:	f7ff fc44 	bl	8004ddc <HAL_RCC_GetPCLK1Freq>
 8005554:	4602      	mov	r2, r0
 8005556:	4613      	mov	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	4413      	add	r3, r2
 800555c:	009a      	lsls	r2, r3, #2
 800555e:	441a      	add	r2, r3
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	fbb2 f3f3 	udiv	r3, r2, r3
 800556a:	4a0c      	ldr	r2, [pc, #48]	; (800559c <UART_SetConfig+0x434>)
 800556c:	fba2 2303 	umull	r2, r3, r2, r3
 8005570:	095b      	lsrs	r3, r3, #5
 8005572:	2264      	movs	r2, #100	; 0x64
 8005574:	fb02 f303 	mul.w	r3, r2, r3
 8005578:	1aeb      	subs	r3, r5, r3
 800557a:	011b      	lsls	r3, r3, #4
 800557c:	3332      	adds	r3, #50	; 0x32
 800557e:	4a07      	ldr	r2, [pc, #28]	; (800559c <UART_SetConfig+0x434>)
 8005580:	fba2 2303 	umull	r2, r3, r2, r3
 8005584:	095b      	lsrs	r3, r3, #5
 8005586:	f003 020f 	and.w	r2, r3, #15
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4422      	add	r2, r4
 8005590:	609a      	str	r2, [r3, #8]
}
 8005592:	e7ff      	b.n	8005594 <UART_SetConfig+0x42c>
 8005594:	bf00      	nop
 8005596:	3710      	adds	r7, #16
 8005598:	46bd      	mov	sp, r7
 800559a:	bdb0      	pop	{r4, r5, r7, pc}
 800559c:	51eb851f 	.word	0x51eb851f

080055a0 <HAL_UART_Init>:
  * @param  huart: pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e03c      	b.n	800562c <HAL_UART_Init+0x8c>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if(huart->gState == HAL_UART_STATE_RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d103      	bne.n	80055c6 <HAL_UART_Init+0x26>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    //HAL_UART_MspInit(huart);
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2224      	movs	r2, #36	; 0x24
 80055ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68da      	ldr	r2, [r3, #12]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055dc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7ff fdc2 	bl	8005168 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	691a      	ldr	r2, [r3, #16]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055f2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	695a      	ldr	r2, [r3, #20]
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005602:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68da      	ldr	r2, [r3, #12]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005612:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState= HAL_UART_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2220      	movs	r2, #32
 800561e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState= HAL_UART_STATE_READY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2220      	movs	r2, #32
 8005626:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3708      	adds	r7, #8
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <UART_WaitOnFlagForever>:

static HAL_StatusTypeDef UART_WaitOnFlagForever(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	4613      	mov	r3, r2
 8005640:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status);
 8005642:	bf00      	nop
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	681a      	ldr	r2, [r3, #0]
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	4013      	ands	r3, r2
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	429a      	cmp	r2, r3
 8005652:	bf0c      	ite	eq
 8005654:	2301      	moveq	r3, #1
 8005656:	2300      	movne	r3, #0
 8005658:	b2db      	uxtb	r3, r3
 800565a:	461a      	mov	r2, r3
 800565c:	79fb      	ldrb	r3, [r7, #7]
 800565e:	429a      	cmp	r2, r3
 8005660:	d0f0      	beq.n	8005644 <UART_WaitOnFlagForever+0x10>
  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3714      	adds	r7, #20
 8005668:	46bd      	mov	sp, r7
 800566a:	bc80      	pop	{r7}
 800566c:	4770      	bx	lr

0800566e <HAL_UART_Transmit>:
  * @param  Size: Amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800566e:	b580      	push	{r7, lr}
 8005670:	b086      	sub	sp, #24
 8005672:	af00      	add	r7, sp, #0
 8005674:	60f8      	str	r0, [r7, #12]
 8005676:	60b9      	str	r1, [r7, #8]
 8005678:	603b      	str	r3, [r7, #0]
 800567a:	4613      	mov	r3, r2
 800567c:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  //uint32_t tickstart = 0U;

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005684:	b2db      	uxtb	r3, r3
 8005686:	2b20      	cmp	r3, #32
 8005688:	d176      	bne.n	8005778 <HAL_UART_Transmit+0x10a>
  {
    if((pData == NULL ) || (Size == 0))
 800568a:	68bb      	ldr	r3, [r7, #8]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d002      	beq.n	8005696 <HAL_UART_Transmit+0x28>
 8005690:	88fb      	ldrh	r3, [r7, #6]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d101      	bne.n	800569a <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e06f      	b.n	800577a <HAL_UART_Transmit+0x10c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d101      	bne.n	80056a8 <HAL_UART_Transmit+0x3a>
 80056a4:	2302      	movs	r3, #2
 80056a6:	e068      	b.n	800577a <HAL_UART_Transmit+0x10c>
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2200      	movs	r2, #0
 80056b4:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2221      	movs	r2, #33	; 0x21
 80056ba:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    //tickstart = HAL_GetTick();

    huart->TxXferSize = Size;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	88fa      	ldrh	r2, [r7, #6]
 80056c2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	88fa      	ldrh	r2, [r7, #6]
 80056c8:	84da      	strh	r2, [r3, #38]	; 0x26
    while(huart->TxXferCount > 0U)
 80056ca:	e03c      	b.n	8005746 <HAL_UART_Transmit+0xd8>
    {
      huart->TxXferCount--;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056d0:	b29b      	uxth	r3, r3
 80056d2:	3b01      	subs	r3, #1
 80056d4:	b29a      	uxth	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	84da      	strh	r2, [r3, #38]	; 0x26
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056e2:	d11f      	bne.n	8005724 <HAL_UART_Transmit+0xb6>
      {
        if(UART_WaitOnFlagForever(huart, UART_FLAG_TXE, RESET) != HAL_OK)
 80056e4:	2200      	movs	r2, #0
 80056e6:	2180      	movs	r1, #128	; 0x80
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f7ff ffa3 	bl	8005634 <UART_WaitOnFlagForever>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d001      	beq.n	80056f8 <HAL_UART_Transmit+0x8a>
        {
          return HAL_TIMEOUT;
 80056f4:	2303      	movs	r3, #3
 80056f6:	e040      	b.n	800577a <HAL_UART_Transmit+0x10c>
        }
        tmp = (uint16_t*) pData;
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	617b      	str	r3, [r7, #20]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	881b      	ldrh	r3, [r3, #0]
 8005700:	461a      	mov	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800570a:	605a      	str	r2, [r3, #4]
        if(huart->Init.Parity == UART_PARITY_NONE)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d103      	bne.n	800571c <HAL_UART_Transmit+0xae>
        {
          pData +=2U;
 8005714:	68bb      	ldr	r3, [r7, #8]
 8005716:	3302      	adds	r3, #2
 8005718:	60bb      	str	r3, [r7, #8]
 800571a:	e014      	b.n	8005746 <HAL_UART_Transmit+0xd8>
        }
        else
        {
          pData +=1U;
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	3301      	adds	r3, #1
 8005720:	60bb      	str	r3, [r7, #8]
 8005722:	e010      	b.n	8005746 <HAL_UART_Transmit+0xd8>
        }
      }
      else
      {
        if(UART_WaitOnFlagForever(huart, UART_FLAG_TXE, RESET) != HAL_OK)
 8005724:	2200      	movs	r2, #0
 8005726:	2180      	movs	r1, #128	; 0x80
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f7ff ff83 	bl	8005634 <UART_WaitOnFlagForever>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d001      	beq.n	8005738 <HAL_UART_Transmit+0xca>
        {
          return HAL_TIMEOUT;
 8005734:	2303      	movs	r3, #3
 8005736:	e020      	b.n	800577a <HAL_UART_Transmit+0x10c>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005738:	68bb      	ldr	r3, [r7, #8]
 800573a:	1c5a      	adds	r2, r3, #1
 800573c:	60ba      	str	r2, [r7, #8]
 800573e:	781a      	ldrb	r2, [r3, #0]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	605a      	str	r2, [r3, #4]
    while(huart->TxXferCount > 0U)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800574a:	b29b      	uxth	r3, r3
 800574c:	2b00      	cmp	r3, #0
 800574e:	d1bd      	bne.n	80056cc <HAL_UART_Transmit+0x5e>
      }
    }

    if(UART_WaitOnFlagForever(huart, UART_FLAG_TC, RESET) != HAL_OK)
 8005750:	2200      	movs	r2, #0
 8005752:	2140      	movs	r1, #64	; 0x40
 8005754:	68f8      	ldr	r0, [r7, #12]
 8005756:	f7ff ff6d 	bl	8005634 <UART_WaitOnFlagForever>
 800575a:	4603      	mov	r3, r0
 800575c:	2b00      	cmp	r3, #0
 800575e:	d001      	beq.n	8005764 <HAL_UART_Transmit+0xf6>
    {
      return HAL_TIMEOUT;
 8005760:	2303      	movs	r3, #3
 8005762:	e00a      	b.n	800577a <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
      huart->gState = HAL_UART_STATE_READY;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2220      	movs	r2, #32
 8005768:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8005774:	2300      	movs	r3, #0
 8005776:	e000      	b.n	800577a <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8005778:	2302      	movs	r3, #2
  }
}
 800577a:	4618      	mov	r0, r3
 800577c:	3718      	adds	r7, #24
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}

08005782 <HAL_UART_Receive>:
  * @param  Size: Amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005782:	b580      	push	{r7, lr}
 8005784:	b086      	sub	sp, #24
 8005786:	af00      	add	r7, sp, #0
 8005788:	60f8      	str	r0, [r7, #12]
 800578a:	60b9      	str	r1, [r7, #8]
 800578c:	603b      	str	r3, [r7, #0]
 800578e:	4613      	mov	r3, r2
 8005790:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  //uint32_t tickstart = 0U;

  /* Check that a Rx process is not already ongoing */
  if(huart->RxState == HAL_UART_STATE_READY)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005798:	b2db      	uxtb	r3, r3
 800579a:	2b20      	cmp	r3, #32
 800579c:	f040 8087 	bne.w	80058ae <HAL_UART_Receive+0x12c>
  {
    if((pData == NULL ) || (Size == 0))
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d002      	beq.n	80057ac <HAL_UART_Receive+0x2a>
 80057a6:	88fb      	ldrh	r3, [r7, #6]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d101      	bne.n	80057b0 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80057ac:	2301      	movs	r3, #1
 80057ae:	e07f      	b.n	80058b0 <HAL_UART_Receive+0x12e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d101      	bne.n	80057be <HAL_UART_Receive+0x3c>
 80057ba:	2302      	movs	r3, #2
 80057bc:	e078      	b.n	80058b0 <HAL_UART_Receive+0x12e>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	2200      	movs	r2, #0
 80057ca:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2222      	movs	r2, #34	; 0x22
 80057d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    //tickstart = HAL_GetTick();

    huart->RxXferSize = Size;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	88fa      	ldrh	r2, [r7, #6]
 80057d8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	88fa      	ldrh	r2, [r7, #6]
 80057de:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while(huart->RxXferCount > 0U)
 80057e0:	e056      	b.n	8005890 <HAL_UART_Receive+0x10e>
    {
      huart->RxXferCount--;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057e6:	b29b      	uxth	r3, r3
 80057e8:	3b01      	subs	r3, #1
 80057ea:	b29a      	uxth	r2, r3
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	85da      	strh	r2, [r3, #46]	; 0x2e
      if(huart->Init.WordLength == UART_WORDLENGTH_9B)
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057f8:	d128      	bne.n	800584c <HAL_UART_Receive+0xca>
      {
        if(UART_WaitOnFlagForever(huart, UART_FLAG_RXNE, RESET) != HAL_OK)
 80057fa:	2200      	movs	r2, #0
 80057fc:	2120      	movs	r1, #32
 80057fe:	68f8      	ldr	r0, [r7, #12]
 8005800:	f7ff ff18 	bl	8005634 <UART_WaitOnFlagForever>
 8005804:	4603      	mov	r3, r0
 8005806:	2b00      	cmp	r3, #0
 8005808:	d001      	beq.n	800580e <HAL_UART_Receive+0x8c>
        {
          return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e050      	b.n	80058b0 <HAL_UART_Receive+0x12e>
        }
        tmp = (uint16_t*) pData;
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	617b      	str	r3, [r7, #20]
        if(huart->Init.Parity == UART_PARITY_NONE)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d10c      	bne.n	8005834 <HAL_UART_Receive+0xb2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	b29b      	uxth	r3, r3
 8005822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005826:	b29a      	uxth	r2, r3
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	801a      	strh	r2, [r3, #0]
          pData +=2U;
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	3302      	adds	r3, #2
 8005830:	60bb      	str	r3, [r7, #8]
 8005832:	e02d      	b.n	8005890 <HAL_UART_Receive+0x10e>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	b29b      	uxth	r3, r3
 800583c:	b2db      	uxtb	r3, r3
 800583e:	b29a      	uxth	r2, r3
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	801a      	strh	r2, [r3, #0]
          pData +=1U;
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	3301      	adds	r3, #1
 8005848:	60bb      	str	r3, [r7, #8]
 800584a:	e021      	b.n	8005890 <HAL_UART_Receive+0x10e>
        }

      }
      else
      {
        if(UART_WaitOnFlagForever(huart, UART_FLAG_RXNE, RESET) != HAL_OK)
 800584c:	2200      	movs	r2, #0
 800584e:	2120      	movs	r1, #32
 8005850:	68f8      	ldr	r0, [r7, #12]
 8005852:	f7ff feef 	bl	8005634 <UART_WaitOnFlagForever>
 8005856:	4603      	mov	r3, r0
 8005858:	2b00      	cmp	r3, #0
 800585a:	d001      	beq.n	8005860 <HAL_UART_Receive+0xde>
        {
          return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e027      	b.n	80058b0 <HAL_UART_Receive+0x12e>
        }
        if(huart->Init.Parity == UART_PARITY_NONE)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d108      	bne.n	800587a <HAL_UART_Receive+0xf8>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	6859      	ldr	r1, [r3, #4]
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	1c5a      	adds	r2, r3, #1
 8005872:	60ba      	str	r2, [r7, #8]
 8005874:	b2ca      	uxtb	r2, r1
 8005876:	701a      	strb	r2, [r3, #0]
 8005878:	e00a      	b.n	8005890 <HAL_UART_Receive+0x10e>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	b2da      	uxtb	r2, r3
 8005882:	68bb      	ldr	r3, [r7, #8]
 8005884:	1c59      	adds	r1, r3, #1
 8005886:	60b9      	str	r1, [r7, #8]
 8005888:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800588c:	b2d2      	uxtb	r2, r2
 800588e:	701a      	strb	r2, [r3, #0]
    while(huart->RxXferCount > 0U)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005894:	b29b      	uxth	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d1a3      	bne.n	80057e2 <HAL_UART_Receive+0x60>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2220      	movs	r2, #32
 800589e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80058aa:	2300      	movs	r3, #0
 80058ac:	e000      	b.n	80058b0 <HAL_UART_Receive+0x12e>
  }
  else
  {
    return HAL_BUSY;
 80058ae:	2302      	movs	r3, #2
  }
}
 80058b0:	4618      	mov	r0, r3
 80058b2:	3718      	adds	r7, #24
 80058b4:	46bd      	mov	sp, r7
 80058b6:	bd80      	pop	{r7, pc}

080058b8 <HAL_RNG_Init>:
  * @param  hrng: pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{ 
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b082      	sub	sp, #8
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if(hrng == NULL)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d101      	bne.n	80058ca <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80058c6:	2301      	movs	r3, #1
 80058c8:	e025      	b.n	8005916 <HAL_RNG_Init+0x5e>
  }
  
  __HAL_LOCK(hrng);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	791b      	ldrb	r3, [r3, #4]
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d101      	bne.n	80058d6 <HAL_RNG_Init+0x1e>
 80058d2:	2302      	movs	r3, #2
 80058d4:	e01f      	b.n	8005916 <HAL_RNG_Init+0x5e>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	2201      	movs	r2, #1
 80058da:	711a      	strb	r2, [r3, #4]
  
  if(hrng->State == HAL_RNG_STATE_RESET)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	795b      	ldrb	r3, [r3, #5]
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d105      	bne.n	80058f2 <HAL_RNG_Init+0x3a>
  {  
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 f816 	bl	800591e <HAL_RNG_MspInit>
  }
  
  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2202      	movs	r2, #2
 80058f6:	715a      	strb	r2, [r3, #5]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f042 0204 	orr.w	r2, r2, #4
 8005906:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	715a      	strb	r2, [r3, #5]
  
  __HAL_UNLOCK(hrng);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8005914:	2300      	movs	r3, #0
}
 8005916:	4618      	mov	r0, r3
 8005918:	3708      	adds	r7, #8
 800591a:	46bd      	mov	sp, r7
 800591c:	bd80      	pop	{r7, pc}

0800591e <HAL_RNG_MspInit>:
  * @param  hrng: pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_MspInit(RNG_HandleTypeDef *hrng)
{
 800591e:	b480      	push	{r7}
 8005920:	b083      	sub	sp, #12
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_MspInit must be implemented in the user file.
   */
}
 8005926:	bf00      	nop
 8005928:	370c      	adds	r7, #12
 800592a:	46bd      	mov	sp, r7
 800592c:	bc80      	pop	{r7}
 800592e:	4770      	bx	lr

08005930 <Reset_Handler>:
 8005930:	2100      	movs	r1, #0
 8005932:	e003      	b.n	800593c <LoopCopyDataInit>

08005934 <CopyDataInit>:
 8005934:	4b0b      	ldr	r3, [pc, #44]	; (8005964 <LoopForever+0x2>)
 8005936:	585b      	ldr	r3, [r3, r1]
 8005938:	5043      	str	r3, [r0, r1]
 800593a:	3104      	adds	r1, #4

0800593c <LoopCopyDataInit>:
 800593c:	480a      	ldr	r0, [pc, #40]	; (8005968 <LoopForever+0x6>)
 800593e:	4b0b      	ldr	r3, [pc, #44]	; (800596c <LoopForever+0xa>)
 8005940:	1842      	adds	r2, r0, r1
 8005942:	429a      	cmp	r2, r3
 8005944:	d3f6      	bcc.n	8005934 <CopyDataInit>
 8005946:	4a0a      	ldr	r2, [pc, #40]	; (8005970 <LoopForever+0xe>)
 8005948:	e002      	b.n	8005950 <LoopFillZerobss>

0800594a <FillZerobss>:
 800594a:	2300      	movs	r3, #0
 800594c:	6013      	str	r3, [r2, #0]
 800594e:	3204      	adds	r2, #4

08005950 <LoopFillZerobss>:
 8005950:	4b08      	ldr	r3, [pc, #32]	; (8005974 <LoopForever+0x12>)
 8005952:	429a      	cmp	r2, r3
 8005954:	d3f9      	bcc.n	800594a <FillZerobss>
 8005956:	f3af 8000 	nop.w
 800595a:	f000 f80f 	bl	800597c <__libc_init_array>
 800595e:	f7fa fd11 	bl	8000384 <main>

08005962 <LoopForever>:
 8005962:	e7fe      	b.n	8005962 <LoopForever>
 8005964:	08005b90 	.word	0x08005b90
 8005968:	20000000 	.word	0x20000000
 800596c:	2000043c 	.word	0x2000043c
 8005970:	2000043c 	.word	0x2000043c
 8005974:	20002c9c 	.word	0x20002c9c

08005978 <BusFault_Handler>:
 8005978:	e7fe      	b.n	8005978 <BusFault_Handler>
 800597a:	0000      	movs	r0, r0

0800597c <__libc_init_array>:
 800597c:	b570      	push	{r4, r5, r6, lr}
 800597e:	4e0d      	ldr	r6, [pc, #52]	; (80059b4 <__libc_init_array+0x38>)
 8005980:	4d0d      	ldr	r5, [pc, #52]	; (80059b8 <__libc_init_array+0x3c>)
 8005982:	1b76      	subs	r6, r6, r5
 8005984:	10b6      	asrs	r6, r6, #2
 8005986:	d006      	beq.n	8005996 <__libc_init_array+0x1a>
 8005988:	2400      	movs	r4, #0
 800598a:	f855 3b04 	ldr.w	r3, [r5], #4
 800598e:	3401      	adds	r4, #1
 8005990:	4798      	blx	r3
 8005992:	42a6      	cmp	r6, r4
 8005994:	d1f9      	bne.n	800598a <__libc_init_array+0xe>
 8005996:	4e09      	ldr	r6, [pc, #36]	; (80059bc <__libc_init_array+0x40>)
 8005998:	4d09      	ldr	r5, [pc, #36]	; (80059c0 <__libc_init_array+0x44>)
 800599a:	1b76      	subs	r6, r6, r5
 800599c:	f000 f882 	bl	8005aa4 <_init>
 80059a0:	10b6      	asrs	r6, r6, #2
 80059a2:	d006      	beq.n	80059b2 <__libc_init_array+0x36>
 80059a4:	2400      	movs	r4, #0
 80059a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80059aa:	3401      	adds	r4, #1
 80059ac:	4798      	blx	r3
 80059ae:	42a6      	cmp	r6, r4
 80059b0:	d1f9      	bne.n	80059a6 <__libc_init_array+0x2a>
 80059b2:	bd70      	pop	{r4, r5, r6, pc}
 80059b4:	08005b84 	.word	0x08005b84
 80059b8:	08005b84 	.word	0x08005b84
 80059bc:	08005b8c 	.word	0x08005b8c
 80059c0:	08005b84 	.word	0x08005b84

080059c4 <register_fini>:
 80059c4:	4b02      	ldr	r3, [pc, #8]	; (80059d0 <register_fini+0xc>)
 80059c6:	b113      	cbz	r3, 80059ce <register_fini+0xa>
 80059c8:	4802      	ldr	r0, [pc, #8]	; (80059d4 <register_fini+0x10>)
 80059ca:	f000 b805 	b.w	80059d8 <atexit>
 80059ce:	4770      	bx	lr
 80059d0:	00000000 	.word	0x00000000
 80059d4:	080059e5 	.word	0x080059e5

080059d8 <atexit>:
 80059d8:	2300      	movs	r3, #0
 80059da:	4601      	mov	r1, r0
 80059dc:	461a      	mov	r2, r3
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 b81a 	b.w	8005a18 <__register_exitproc>

080059e4 <__libc_fini_array>:
 80059e4:	b538      	push	{r3, r4, r5, lr}
 80059e6:	4b08      	ldr	r3, [pc, #32]	; (8005a08 <__libc_fini_array+0x24>)
 80059e8:	4d08      	ldr	r5, [pc, #32]	; (8005a0c <__libc_fini_array+0x28>)
 80059ea:	1b5b      	subs	r3, r3, r5
 80059ec:	109c      	asrs	r4, r3, #2
 80059ee:	d007      	beq.n	8005a00 <__libc_fini_array+0x1c>
 80059f0:	3b04      	subs	r3, #4
 80059f2:	441d      	add	r5, r3
 80059f4:	3c01      	subs	r4, #1
 80059f6:	f855 3904 	ldr.w	r3, [r5], #-4
 80059fa:	4798      	blx	r3
 80059fc:	2c00      	cmp	r4, #0
 80059fe:	d1f9      	bne.n	80059f4 <__libc_fini_array+0x10>
 8005a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a04:	f000 b854 	b.w	8005ab0 <_fini>
 8005a08:	08005b90 	.word	0x08005b90
 8005a0c:	08005b8c 	.word	0x08005b8c

08005a10 <__retarget_lock_acquire_recursive>:
 8005a10:	4770      	bx	lr
 8005a12:	bf00      	nop

08005a14 <__retarget_lock_release_recursive>:
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop

08005a18 <__register_exitproc>:
 8005a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a1c:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8005a9c <__register_exitproc+0x84>
 8005a20:	4606      	mov	r6, r0
 8005a22:	f8da 0000 	ldr.w	r0, [sl]
 8005a26:	4698      	mov	r8, r3
 8005a28:	460f      	mov	r7, r1
 8005a2a:	4691      	mov	r9, r2
 8005a2c:	f7ff fff0 	bl	8005a10 <__retarget_lock_acquire_recursive>
 8005a30:	4b1b      	ldr	r3, [pc, #108]	; (8005aa0 <__register_exitproc+0x88>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 8005a38:	b324      	cbz	r4, 8005a84 <__register_exitproc+0x6c>
 8005a3a:	6865      	ldr	r5, [r4, #4]
 8005a3c:	2d1f      	cmp	r5, #31
 8005a3e:	dc26      	bgt.n	8005a8e <__register_exitproc+0x76>
 8005a40:	b95e      	cbnz	r6, 8005a5a <__register_exitproc+0x42>
 8005a42:	1c6b      	adds	r3, r5, #1
 8005a44:	3502      	adds	r5, #2
 8005a46:	f8da 0000 	ldr.w	r0, [sl]
 8005a4a:	6063      	str	r3, [r4, #4]
 8005a4c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8005a50:	f7ff ffe0 	bl	8005a14 <__retarget_lock_release_recursive>
 8005a54:	2000      	movs	r0, #0
 8005a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a5a:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8005a5e:	2301      	movs	r3, #1
 8005a60:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 8005a64:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
 8005a68:	40ab      	lsls	r3, r5
 8005a6a:	431a      	orrs	r2, r3
 8005a6c:	2e02      	cmp	r6, #2
 8005a6e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
 8005a72:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 8005a76:	d1e4      	bne.n	8005a42 <__register_exitproc+0x2a>
 8005a78:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
 8005a82:	e7de      	b.n	8005a42 <__register_exitproc+0x2a>
 8005a84:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 8005a88:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 8005a8c:	e7d5      	b.n	8005a3a <__register_exitproc+0x22>
 8005a8e:	f8da 0000 	ldr.w	r0, [sl]
 8005a92:	f7ff ffbf 	bl	8005a14 <__retarget_lock_release_recursive>
 8005a96:	f04f 30ff 	mov.w	r0, #4294967295
 8005a9a:	e7dc      	b.n	8005a56 <__register_exitproc+0x3e>
 8005a9c:	20000438 	.word	0x20000438
 8005aa0:	08005b80 	.word	0x08005b80

08005aa4 <_init>:
 8005aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aa6:	bf00      	nop
 8005aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aaa:	bc08      	pop	{r3}
 8005aac:	469e      	mov	lr, r3
 8005aae:	4770      	bx	lr

08005ab0 <_fini>:
 8005ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ab2:	bf00      	nop
 8005ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ab6:	bc08      	pop	{r3}
 8005ab8:	469e      	mov	lr, r3
 8005aba:	4770      	bx	lr
